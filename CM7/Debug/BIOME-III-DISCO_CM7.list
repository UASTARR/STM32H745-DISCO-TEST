
BIOME-III-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5a4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e64  0800c848  0800c848  0000d848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6ac  0800d6ac  0000f1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d6ac  0800d6ac  0000e6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d6b4  0800d6b4  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6b4  0800d6b4  0000e6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d6b8  0800d6b8  0000e6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  0800d6bc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  240001d8  0800d894  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240004d8  0800d894  0000f4d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018444  00000000  00000000  0000f206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e2  00000000  00000000  0002764a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  0002a830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d80  00000000  00000000  0002b9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bfda  00000000  00000000  0002c730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001936d  00000000  00000000  0006870a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017ef6b  00000000  00000000  00081a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002009e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005778  00000000  00000000  00200a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  002061a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c82c 	.word	0x0800c82c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800c82c 	.word	0x0800c82c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006c0:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <SystemInit+0x12c>)
 80006c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006c6:	4a48      	ldr	r2, [pc, #288]	@ (80007e8 <SystemInit+0x12c>)
 80006c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006d0:	4b45      	ldr	r3, [pc, #276]	@ (80007e8 <SystemInit+0x12c>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	4a44      	ldr	r2, [pc, #272]	@ (80007e8 <SystemInit+0x12c>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006dc:	4b43      	ldr	r3, [pc, #268]	@ (80007ec <SystemInit+0x130>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	2b06      	cmp	r3, #6
 80006e6:	d807      	bhi.n	80006f8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e8:	4b40      	ldr	r3, [pc, #256]	@ (80007ec <SystemInit+0x130>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f023 030f 	bic.w	r3, r3, #15
 80006f0:	4a3e      	ldr	r2, [pc, #248]	@ (80007ec <SystemInit+0x130>)
 80006f2:	f043 0307 	orr.w	r3, r3, #7
 80006f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f8:	4b3d      	ldr	r3, [pc, #244]	@ (80007f0 <SystemInit+0x134>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a3c      	ldr	r2, [pc, #240]	@ (80007f0 <SystemInit+0x134>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000704:	4b3a      	ldr	r3, [pc, #232]	@ (80007f0 <SystemInit+0x134>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800070a:	4b39      	ldr	r3, [pc, #228]	@ (80007f0 <SystemInit+0x134>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4938      	ldr	r1, [pc, #224]	@ (80007f0 <SystemInit+0x134>)
 8000710:	4b38      	ldr	r3, [pc, #224]	@ (80007f4 <SystemInit+0x138>)
 8000712:	4013      	ands	r3, r2
 8000714:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000716:	4b35      	ldr	r3, [pc, #212]	@ (80007ec <SystemInit+0x130>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	2b00      	cmp	r3, #0
 8000720:	d007      	beq.n	8000732 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000722:	4b32      	ldr	r3, [pc, #200]	@ (80007ec <SystemInit+0x130>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f023 030f 	bic.w	r3, r3, #15
 800072a:	4a30      	ldr	r2, [pc, #192]	@ (80007ec <SystemInit+0x130>)
 800072c:	f043 0307 	orr.w	r3, r3, #7
 8000730:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <SystemInit+0x134>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000738:	4b2d      	ldr	r3, [pc, #180]	@ (80007f0 <SystemInit+0x134>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800073e:	4b2c      	ldr	r3, [pc, #176]	@ (80007f0 <SystemInit+0x134>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000744:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <SystemInit+0x134>)
 8000746:	4a2c      	ldr	r2, [pc, #176]	@ (80007f8 <SystemInit+0x13c>)
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800074a:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <SystemInit+0x134>)
 800074c:	4a2b      	ldr	r2, [pc, #172]	@ (80007fc <SystemInit+0x140>)
 800074e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <SystemInit+0x134>)
 8000752:	4a2b      	ldr	r2, [pc, #172]	@ (8000800 <SystemInit+0x144>)
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000756:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <SystemInit+0x134>)
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800075c:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <SystemInit+0x134>)
 800075e:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <SystemInit+0x144>)
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000762:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <SystemInit+0x134>)
 8000764:	2200      	movs	r2, #0
 8000766:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000768:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <SystemInit+0x134>)
 800076a:	4a25      	ldr	r2, [pc, #148]	@ (8000800 <SystemInit+0x144>)
 800076c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800076e:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <SystemInit+0x134>)
 8000770:	2200      	movs	r2, #0
 8000772:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000774:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <SystemInit+0x134>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a1d      	ldr	r2, [pc, #116]	@ (80007f0 <SystemInit+0x134>)
 800077a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800077e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <SystemInit+0x134>)
 8000782:	2200      	movs	r2, #0
 8000784:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000786:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <SystemInit+0x148>)
 8000788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800078a:	4a1e      	ldr	r2, [pc, #120]	@ (8000804 <SystemInit+0x148>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000790:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <SystemInit+0x14c>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <SystemInit+0x150>)
 8000798:	4013      	ands	r3, r2
 800079a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800079e:	d202      	bcs.n	80007a6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <SystemInit+0x154>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <SystemInit+0x134>)
 80007a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d113      	bne.n	80007dc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007b4:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <SystemInit+0x134>)
 80007b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007ba:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <SystemInit+0x134>)
 80007bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007c4:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <SystemInit+0x158>)
 80007c6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <SystemInit+0x134>)
 80007ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007d2:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <SystemInit+0x134>)
 80007d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00
 80007ec:	52002000 	.word	0x52002000
 80007f0:	58024400 	.word	0x58024400
 80007f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007f8:	02020200 	.word	0x02020200
 80007fc:	01ff0000 	.word	0x01ff0000
 8000800:	01010280 	.word	0x01010280
 8000804:	580000c0 	.word	0x580000c0
 8000808:	5c001000 	.word	0x5c001000
 800080c:	ffff0000 	.word	0xffff0000
 8000810:	51008108 	.word	0x51008108
 8000814:	52004000 	.word	0x52004000

08000818 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <ExitRun0Mode+0x2c>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <ExitRun0Mode+0x2c>)
 8000822:	f023 0302 	bic.w	r3, r3, #2
 8000826:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000828:	bf00      	nop
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <ExitRun0Mode+0x2c>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0f9      	beq.n	800082a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	58024800 	.word	0x58024800

08000848 <MMC56X3_GetMagnetic_uT>:
BIOME_Error_t MMC56X3_Init(void);
BIOME_Error_t MMC56X3_ReadData(MMC56X3_Data_t *data);
BIOME_Error_t MMC56X3_TestCommunication(void);

static inline float MMC56X3_GetMagnetic_uT(int32_t raw_value) 
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
    return (float)raw_value * MMC56X3_MAGNETIC_SCALE;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	ee07 3a90 	vmov	s15, r3
 8000856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800085a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8000870 <MMC56X3_GetMagnetic_uT+0x28>
 800085e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000862:	eeb0 0a67 	vmov.f32	s0, s15
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	3bcccccd 	.word	0x3bcccccd

08000874 <MMC56X3_GetMagnitude>:

static inline float MMC56X3_GetMagnitude(float x, float y, float z) 
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	ed87 0a03 	vstr	s0, [r7, #12]
 800087e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000882:	ed87 1a01 	vstr	s2, [r7, #4]
    return sqrtf(x*x + y*y + z*z);
 8000886:	edd7 7a03 	vldr	s15, [r7, #12]
 800088a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800088e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000892:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000896:	ee37 7a27 	vadd.f32	s14, s14, s15
 800089a:	edd7 7a01 	vldr	s15, [r7, #4]
 800089e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80008a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008a6:	eeb0 0a67 	vmov.f32	s0, s15
 80008aa:	f00b fe23 	bl	800c4f4 <sqrtf>
 80008ae:	eef0 7a40 	vmov.f32	s15, s0
}
 80008b2:	eeb0 0a67 	vmov.f32	s0, s15
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <MMC56X3_GetHeading>:

static inline float MMC56X3_GetHeading(float x, float y) 
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80008c6:	edc7 0a00 	vstr	s1, [r7]
    float heading = atan2f(y, x) * 180.0f / 3.14159f;
 80008ca:	edd7 0a01 	vldr	s1, [r7, #4]
 80008ce:	ed97 0a00 	vldr	s0, [r7]
 80008d2:	f00b fe0d 	bl	800c4f0 <atan2f>
 80008d6:	eef0 7a40 	vmov.f32	s15, s0
 80008da:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800091c <MMC56X3_GetHeading+0x60>
 80008de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008e2:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000920 <MMC56X3_GetHeading+0x64>
 80008e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008ea:	edc7 7a03 	vstr	s15, [r7, #12]
    if (heading < 0) heading += 360.0f;
 80008ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80008f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008fa:	d507      	bpl.n	800090c <MMC56X3_GetHeading+0x50>
 80008fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000900:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000924 <MMC56X3_GetHeading+0x68>
 8000904:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000908:	edc7 7a03 	vstr	s15, [r7, #12]
    return heading;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	ee07 3a90 	vmov	s15, r3
}
 8000912:	eeb0 0a67 	vmov.f32	s0, s15
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	43340000 	.word	0x43340000
 8000920:	40490fd0 	.word	0x40490fd0
 8000924:	43b40000 	.word	0x43b40000

08000928 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	b29a      	uxth	r2, r3
 8000938:	f04f 33ff 	mov.w	r3, #4294967295
 800093c:	68b9      	ldr	r1, [r7, #8]
 800093e:	4804      	ldr	r0, [pc, #16]	@ (8000950 <_write+0x28>)
 8000940:	f008 f85c 	bl	80089fc <HAL_UART_Transmit>
	return len;
 8000944:	687b      	ldr	r3, [r7, #4]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2400029c 	.word	0x2400029c
 8000954:	00000000 	.word	0x00000000

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b09c      	sub	sp, #112	@ 0x70
 800095c:	af04      	add	r7, sp, #16
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800095e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000962:	65fb      	str	r3, [r7, #92]	@ 0x5c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000964:	bf00      	nop
 8000966:	4bce      	ldr	r3, [pc, #824]	@ (8000ca0 <main+0x348>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d004      	beq.n	800097c <main+0x24>
 8000972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000974:	1e5a      	subs	r2, r3, #1
 8000976:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8000978:	2b00      	cmp	r3, #0
 800097a:	dcf4      	bgt.n	8000966 <main+0xe>
  if ( timeout < 0 )
 800097c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800097e:	2b00      	cmp	r3, #0
 8000980:	da01      	bge.n	8000986 <main+0x2e>
  {
  Error_Handler();
 8000982:	f000 fb9f 	bl	80010c4 <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000986:	f003 fc35 	bl	80041f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098a:	f000 f9f9 	bl	8000d80 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800098e:	4bc4      	ldr	r3, [pc, #784]	@ (8000ca0 <main+0x348>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000994:	4ac2      	ldr	r2, [pc, #776]	@ (8000ca0 <main+0x348>)
 8000996:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800099e:	4bc0      	ldr	r3, [pc, #768]	@ (8000ca0 <main+0x348>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80009ac:	2000      	movs	r0, #0
 80009ae:	f003 ff77 	bl	80048a0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80009b2:	2100      	movs	r1, #0
 80009b4:	2000      	movs	r0, #0
 80009b6:	f003 ff8d 	bl	80048d4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80009ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009be:	65fb      	str	r3, [r7, #92]	@ 0x5c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80009c0:	bf00      	nop
 80009c2:	4bb7      	ldr	r3, [pc, #732]	@ (8000ca0 <main+0x348>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d104      	bne.n	80009d8 <main+0x80>
 80009ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80009d0:	1e5a      	subs	r2, r3, #1
 80009d2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	dcf4      	bgt.n	80009c2 <main+0x6a>
if ( timeout < 0 )
 80009d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80009da:	2b00      	cmp	r3, #0
 80009dc:	da01      	bge.n	80009e2 <main+0x8a>
{
Error_Handler();
 80009de:	f000 fb71 	bl	80010c4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e2:	f000 fb19 	bl	8001018 <MX_GPIO_Init>
  MX_I2C3_Init();
 80009e6:	f000 fa4b 	bl	8000e80 <MX_I2C3_Init>
  MX_I2C4_Init();
 80009ea:	f000 fa89 	bl	8000f00 <MX_I2C4_Init>
  MX_USART3_UART_Init();
 80009ee:	f000 fac7 	bl	8000f80 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
  BIOME_Error_t status;
  status = sensor_init();
 80009f2:	f000 fb6d 	bl	80010d0 <sensor_init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
  if (status != SYS_OK) {
 80009fc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d002      	beq.n	8000a0a <main+0xb2>
	  printf("FAILED TO INITIALIZE SENSOR\r\n");
 8000a04:	48a7      	ldr	r0, [pc, #668]	@ (8000ca4 <main+0x34c>)
 8000a06:	f009 fe73 	bl	800a6f0 <puts>
  }

#ifdef USE_BME680
  BME680_Data_t bme680data;
  memset(&bme680data, 0, sizeof(bme680data));
 8000a0a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a0e:	2214      	movs	r2, #20
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f009 ff4c 	bl	800a8b0 <memset>
  memset(&si1145data, 0, sizeof(si1145data));
#endif // USE_SI1145

#ifdef USE_SGP30
  SGP30_Data_t sgp30data;
  memset(&sgp30data, 0, sizeof(sgp30data));
 8000a18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a1c:	2206      	movs	r2, #6
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f009 ff45 	bl	800a8b0 <memset>
#endif // USE_SGP30

#ifdef USE_MMC56X3
  MMC56X3_Data_t mmc56x3data;
  memset(&mmc56x3data, 0, sizeof(mmc56x3data));
 8000a26:	f107 0318 	add.w	r3, r7, #24
 8000a2a:	2210      	movs	r2, #16
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f009 ff3e 	bl	800a8b0 <memset>
#endif // USE_MMC56X3

#ifdef USE_MPL3115A2
  MPL3115A2_Data_t mpl3115a2data;
  memset(&mpl3115a2data, 0, sizeof(mpl3115a2data));
 8000a34:	f107 0308 	add.w	r3, r7, #8
 8000a38:	2210      	movs	r2, #16
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f009 ff37 	bl	800a8b0 <memset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	HAL_Delay(5000);
 8000a42:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a46:	f003 fc67 	bl	8004318 <HAL_Delay>
#ifdef USE_BME680
	HAL_Delay(50);
 8000a4a:	2032      	movs	r0, #50	@ 0x32
 8000a4c:	f003 fc64 	bl	8004318 <HAL_Delay>
	bme680data.data_valid = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	status = BME680_ReadData(&bme680data);
 8000a56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 feb4 	bl	80017c8 <BME680_ReadData>
 8000a60:	4603      	mov	r3, r0
 8000a62:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	if (status != SYS_OK)
 8000a66:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d006      	beq.n	8000a7c <main+0x124>
	{
		printf("BME680: READ DATA FAILED WITH STATUS %d\r\n", status);
 8000a6e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000a72:	4619      	mov	r1, r3
 8000a74:	488c      	ldr	r0, [pc, #560]	@ (8000ca8 <main+0x350>)
 8000a76:	f009 fdd3 	bl	800a620 <iprintf>
 8000a7a:	e03e      	b.n	8000afa <main+0x1a2>
	}
	else
	{
		printf("=== BME680 Sensor Data ===\r\n");
 8000a7c:	488b      	ldr	r0, [pc, #556]	@ (8000cac <main+0x354>)
 8000a7e:	f009 fe37 	bl	800a6f0 <puts>
		printf("Data Valid: %s\r\n", bme680data.data_valid ? "YES" : "NO");
 8000a82:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <main+0x136>
 8000a8a:	4b89      	ldr	r3, [pc, #548]	@ (8000cb0 <main+0x358>)
 8000a8c:	e000      	b.n	8000a90 <main+0x138>
 8000a8e:	4b89      	ldr	r3, [pc, #548]	@ (8000cb4 <main+0x35c>)
 8000a90:	4619      	mov	r1, r3
 8000a92:	4889      	ldr	r0, [pc, #548]	@ (8000cb8 <main+0x360>)
 8000a94:	f009 fdc4 	bl	800a620 <iprintf>
		printf("Temperature: %.2f°C\r\n", bme680data.temperature);
 8000a98:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000a9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aa0:	ec53 2b17 	vmov	r2, r3, d7
 8000aa4:	4885      	ldr	r0, [pc, #532]	@ (8000cbc <main+0x364>)
 8000aa6:	f009 fdbb 	bl	800a620 <iprintf>
		printf("Pressure: %.2f Pa (%.2f hPa)\r\n", bme680data.pressure, bme680data.pressure/100.0);
 8000aaa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000aae:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000ab2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000ab6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000aba:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8000c98 <main+0x340>
 8000abe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ac2:	ed8d 7b00 	vstr	d7, [sp]
 8000ac6:	ec53 2b14 	vmov	r2, r3, d4
 8000aca:	487d      	ldr	r0, [pc, #500]	@ (8000cc0 <main+0x368>)
 8000acc:	f009 fda8 	bl	800a620 <iprintf>
		printf("Humidity: %.1f%%\r\n", bme680data.humidity);
 8000ad0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000ad4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ad8:	ec53 2b17 	vmov	r2, r3, d7
 8000adc:	4879      	ldr	r0, [pc, #484]	@ (8000cc4 <main+0x36c>)
 8000ade:	f009 fd9f 	bl	800a620 <iprintf>
		printf("Gas Resistance: %.0f Ohms\r\n", bme680data.gas_resistance);
 8000ae2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000ae6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aea:	ec53 2b17 	vmov	r2, r3, d7
 8000aee:	4876      	ldr	r0, [pc, #472]	@ (8000cc8 <main+0x370>)
 8000af0:	f009 fd96 	bl	800a620 <iprintf>
		printf("========================\r\n");
 8000af4:	4875      	ldr	r0, [pc, #468]	@ (8000ccc <main+0x374>)
 8000af6:	f009 fdfb 	bl	800a6f0 <puts>
		printf("========================\r\n");
	}
#endif // USE_SI1145

#ifdef USE_SGP30
	HAL_Delay(50);
 8000afa:	2032      	movs	r0, #50	@ 0x32
 8000afc:	f003 fc0c 	bl	8004318 <HAL_Delay>
	sgp30data.data_valid = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	status = SGP30_ReadData(&sgp30data);
 8000b04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 fab5 	bl	8002078 <SGP30_ReadData>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	if (status != SYS_OK)
 8000b14:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d006      	beq.n	8000b2a <main+0x1d2>
	{
		printf("SGP30: READ DATA FAILED WITH STATUS %d\r\n", status);
 8000b1c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000b20:	4619      	mov	r1, r3
 8000b22:	486b      	ldr	r0, [pc, #428]	@ (8000cd0 <main+0x378>)
 8000b24:	f009 fd7c 	bl	800a620 <iprintf>
 8000b28:	e019      	b.n	8000b5e <main+0x206>
	}
	else
	{
    printf("=== SGP30 Sensor Data ===\r\n");
 8000b2a:	486a      	ldr	r0, [pc, #424]	@ (8000cd4 <main+0x37c>)
 8000b2c:	f009 fde0 	bl	800a6f0 <puts>
    printf("Data Valid: %s\r\n", sgp30data.data_valid ? "YES" : "NO");
 8000b30:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <main+0x1e2>
 8000b36:	4b5e      	ldr	r3, [pc, #376]	@ (8000cb0 <main+0x358>)
 8000b38:	e000      	b.n	8000b3c <main+0x1e4>
 8000b3a:	4b5e      	ldr	r3, [pc, #376]	@ (8000cb4 <main+0x35c>)
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	485e      	ldr	r0, [pc, #376]	@ (8000cb8 <main+0x360>)
 8000b40:	f009 fd6e 	bl	800a620 <iprintf>
    printf("CO2 Equivalent: %d ppm\r\n", sgp30data.co2_equiv_ppm);
 8000b44:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000b46:	4619      	mov	r1, r3
 8000b48:	4863      	ldr	r0, [pc, #396]	@ (8000cd8 <main+0x380>)
 8000b4a:	f009 fd69 	bl	800a620 <iprintf>
    printf("TVOC: %d ppb\r\n", sgp30data.tvoc_ppb);
 8000b4e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000b50:	4619      	mov	r1, r3
 8000b52:	4862      	ldr	r0, [pc, #392]	@ (8000cdc <main+0x384>)
 8000b54:	f009 fd64 	bl	800a620 <iprintf>
    printf("========================\r\n");
 8000b58:	485c      	ldr	r0, [pc, #368]	@ (8000ccc <main+0x374>)
 8000b5a:	f009 fdc9 	bl	800a6f0 <puts>
	}
#endif // USE_SGP30

#ifdef USE_MMC56X3
    HAL_Delay(50);
 8000b5e:	2032      	movs	r0, #50	@ 0x32
 8000b60:	f003 fbda 	bl	8004318 <HAL_Delay>
    mmc56x3data.data_valid = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

	status = MMC56X3_ReadData(&mmc56x3data);
 8000b6a:	f107 0318 	add.w	r3, r7, #24
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 ff90 	bl	8001a94 <MMC56X3_ReadData>
 8000b74:	4603      	mov	r3, r0
 8000b76:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	if (status != SYS_OK)
 8000b7a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d006      	beq.n	8000b90 <main+0x238>
	{
		printf("MMC56X3: READ DATA FAILED WITH STATUS %d\r\n", status);
 8000b82:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000b86:	4619      	mov	r1, r3
 8000b88:	4855      	ldr	r0, [pc, #340]	@ (8000ce0 <main+0x388>)
 8000b8a:	f009 fd49 	bl	800a620 <iprintf>
 8000b8e:	e061      	b.n	8000c54 <main+0x2fc>
	}
	else
	{
		float x_uT = MMC56X3_GetMagnetic_uT(mmc56x3data.x_magnetic);
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fe58 	bl	8000848 <MMC56X3_GetMagnetic_uT>
 8000b98:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
		float y_uT = MMC56X3_GetMagnetic_uT(mmc56x3data.y_magnetic);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fe52 	bl	8000848 <MMC56X3_GetMagnetic_uT>
 8000ba4:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50
		float z_uT = MMC56X3_GetMagnetic_uT(mmc56x3data.z_magnetic);
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fe4c 	bl	8000848 <MMC56X3_GetMagnetic_uT>
 8000bb0:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
		float magnitude = MMC56X3_GetMagnitude(x_uT, y_uT, z_uT);
 8000bb4:	ed97 1a13 	vldr	s2, [r7, #76]	@ 0x4c
 8000bb8:	edd7 0a14 	vldr	s1, [r7, #80]	@ 0x50
 8000bbc:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8000bc0:	f7ff fe58 	bl	8000874 <MMC56X3_GetMagnitude>
 8000bc4:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
		float heading = MMC56X3_GetHeading(x_uT, y_uT);
 8000bc8:	edd7 0a14 	vldr	s1, [r7, #80]	@ 0x50
 8000bcc:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8000bd0:	f7ff fe74 	bl	80008bc <MMC56X3_GetHeading>
 8000bd4:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44

		printf("=== MMC56X3 Sensor Data ===\r\n");
 8000bd8:	4842      	ldr	r0, [pc, #264]	@ (8000ce4 <main+0x38c>)
 8000bda:	f009 fd89 	bl	800a6f0 <puts>
		printf("Data Valid: %s\r\n", mmc56x3data.data_valid ? "YES" : "NO");
 8000bde:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <main+0x292>
 8000be6:	4b32      	ldr	r3, [pc, #200]	@ (8000cb0 <main+0x358>)
 8000be8:	e000      	b.n	8000bec <main+0x294>
 8000bea:	4b32      	ldr	r3, [pc, #200]	@ (8000cb4 <main+0x35c>)
 8000bec:	4619      	mov	r1, r3
 8000bee:	4832      	ldr	r0, [pc, #200]	@ (8000cb8 <main+0x360>)
 8000bf0:	f009 fd16 	bl	800a620 <iprintf>
		printf("Magnetic Field - X: %.2f uT, Y: %.2f uT, Z: %.2f uT\r\n", x_uT, y_uT, z_uT);
 8000bf4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000bf8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000bfc:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000c00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c04:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8000c08:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000c0c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000c10:	ed8d 7b00 	vstr	d7, [sp]
 8000c14:	ec53 2b15 	vmov	r2, r3, d5
 8000c18:	4833      	ldr	r0, [pc, #204]	@ (8000ce8 <main+0x390>)
 8000c1a:	f009 fd01 	bl	800a620 <iprintf>
		printf("Magnitude: %.2f uT\r\n", magnitude);
 8000c1e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000c22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c26:	ec53 2b17 	vmov	r2, r3, d7
 8000c2a:	4830      	ldr	r0, [pc, #192]	@ (8000cec <main+0x394>)
 8000c2c:	f009 fcf8 	bl	800a620 <iprintf>
		printf("Heading: %.1f°\r\n", heading);
 8000c30:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000c34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c38:	ec53 2b17 	vmov	r2, r3, d7
 8000c3c:	482c      	ldr	r0, [pc, #176]	@ (8000cf0 <main+0x398>)
 8000c3e:	f009 fcef 	bl	800a620 <iprintf>
		printf("Temperature: %d°C\r\n", mmc56x3data.temperature);
 8000c42:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	482a      	ldr	r0, [pc, #168]	@ (8000cf4 <main+0x39c>)
 8000c4a:	f009 fce9 	bl	800a620 <iprintf>
		printf("========================\r\n");
 8000c4e:	481f      	ldr	r0, [pc, #124]	@ (8000ccc <main+0x374>)
 8000c50:	f009 fd4e 	bl	800a6f0 <puts>
	}
#endif // USE_MMC56X3

#ifdef USE_MPL3115A2
	HAL_Delay(50);
 8000c54:	2032      	movs	r0, #50	@ 0x32
 8000c56:	f003 fb5f 	bl	8004318 <HAL_Delay>

	mpl3115a2data.data_valid = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	753b      	strb	r3, [r7, #20]

	status = MPL3115A2_ReadData(&mpl3115a2data);
 8000c5e:	f107 0308 	add.w	r3, r7, #8
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 f892 	bl	8001d8c <MPL3115A2_ReadData>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	if (status != SYS_OK)
 8000c6e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d006      	beq.n	8000c84 <main+0x32c>
	{
		printf("MPL3115A2: READ DATA FAILED WITH STATUS %d\r\n", status);
 8000c76:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	481e      	ldr	r0, [pc, #120]	@ (8000cf8 <main+0x3a0>)
 8000c7e:	f009 fccf 	bl	800a620 <iprintf>
 8000c82:	e6de      	b.n	8000a42 <main+0xea>
	}
	else
	{
		printf("=== MPL3115A2 Sensor Data ===\r\n");
 8000c84:	481d      	ldr	r0, [pc, #116]	@ (8000cfc <main+0x3a4>)
 8000c86:	f009 fd33 	bl	800a6f0 <puts>
		printf("Data Valid: %s\r\n", mpl3115a2data.data_valid ? "YES" : "NO");
 8000c8a:	7d3b      	ldrb	r3, [r7, #20]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d037      	beq.n	8000d00 <main+0x3a8>
 8000c90:	4b07      	ldr	r3, [pc, #28]	@ (8000cb0 <main+0x358>)
 8000c92:	e036      	b.n	8000d02 <main+0x3aa>
 8000c94:	f3af 8000 	nop.w
 8000c98:	00000000 	.word	0x00000000
 8000c9c:	40590000 	.word	0x40590000
 8000ca0:	58024400 	.word	0x58024400
 8000ca4:	0800c848 	.word	0x0800c848
 8000ca8:	0800c868 	.word	0x0800c868
 8000cac:	0800c894 	.word	0x0800c894
 8000cb0:	0800c8b0 	.word	0x0800c8b0
 8000cb4:	0800c8b4 	.word	0x0800c8b4
 8000cb8:	0800c8b8 	.word	0x0800c8b8
 8000cbc:	0800c8cc 	.word	0x0800c8cc
 8000cc0:	0800c8e4 	.word	0x0800c8e4
 8000cc4:	0800c904 	.word	0x0800c904
 8000cc8:	0800c918 	.word	0x0800c918
 8000ccc:	0800c934 	.word	0x0800c934
 8000cd0:	0800c950 	.word	0x0800c950
 8000cd4:	0800c97c 	.word	0x0800c97c
 8000cd8:	0800c998 	.word	0x0800c998
 8000cdc:	0800c9b4 	.word	0x0800c9b4
 8000ce0:	0800c9c4 	.word	0x0800c9c4
 8000ce4:	0800c9f0 	.word	0x0800c9f0
 8000ce8:	0800ca10 	.word	0x0800ca10
 8000cec:	0800ca48 	.word	0x0800ca48
 8000cf0:	0800ca60 	.word	0x0800ca60
 8000cf4:	0800ca74 	.word	0x0800ca74
 8000cf8:	0800ca8c 	.word	0x0800ca8c
 8000cfc:	0800cabc 	.word	0x0800cabc
 8000d00:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <main+0x410>)
 8000d02:	4619      	mov	r1, r3
 8000d04:	4819      	ldr	r0, [pc, #100]	@ (8000d6c <main+0x414>)
 8000d06:	f009 fc8b 	bl	800a620 <iprintf>
		printf("Temperature: %.2f°C\r\n", mpl3115a2data.temperature);
 8000d0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d12:	ec53 2b17 	vmov	r2, r3, d7
 8000d16:	4816      	ldr	r0, [pc, #88]	@ (8000d70 <main+0x418>)
 8000d18:	f009 fc82 	bl	800a620 <iprintf>
		printf("Altitude: %.2f m\r\n", mpl3115a2data.altitude);
 8000d1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d24:	ec53 2b17 	vmov	r2, r3, d7
 8000d28:	4812      	ldr	r0, [pc, #72]	@ (8000d74 <main+0x41c>)
 8000d2a:	f009 fc79 	bl	800a620 <iprintf>
		printf("Pressure: %.2f Pa (%.2f hPa)\r\n", mpl3115a2data.pressure, mpl3115a2data.pressure/100.0);
 8000d2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d32:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000d36:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d3a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000d3e:	ed9f 5b08 	vldr	d5, [pc, #32]	@ 8000d60 <main+0x408>
 8000d42:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d46:	ed8d 7b00 	vstr	d7, [sp]
 8000d4a:	ec53 2b14 	vmov	r2, r3, d4
 8000d4e:	480a      	ldr	r0, [pc, #40]	@ (8000d78 <main+0x420>)
 8000d50:	f009 fc66 	bl	800a620 <iprintf>
		printf("========================\r\n");
 8000d54:	4809      	ldr	r0, [pc, #36]	@ (8000d7c <main+0x424>)
 8000d56:	f009 fccb 	bl	800a6f0 <puts>
	HAL_Delay(5000);
 8000d5a:	e672      	b.n	8000a42 <main+0xea>
 8000d5c:	f3af 8000 	nop.w
 8000d60:	00000000 	.word	0x00000000
 8000d64:	40590000 	.word	0x40590000
 8000d68:	0800c8b4 	.word	0x0800c8b4
 8000d6c:	0800c8b8 	.word	0x0800c8b8
 8000d70:	0800c8cc 	.word	0x0800c8cc
 8000d74:	0800cadc 	.word	0x0800cadc
 8000d78:	0800c8e4 	.word	0x0800c8e4
 8000d7c:	0800c934 	.word	0x0800c934

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b09c      	sub	sp, #112	@ 0x70
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8a:	224c      	movs	r2, #76	@ 0x4c
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f009 fd8e 	bl	800a8b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2220      	movs	r2, #32
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f009 fd88 	bl	800a8b0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000da0:	2004      	movs	r0, #4
 8000da2:	f004 ff6f 	bl	8005c84 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	4b33      	ldr	r3, [pc, #204]	@ (8000e78 <SystemClock_Config+0xf8>)
 8000dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dae:	4a32      	ldr	r2, [pc, #200]	@ (8000e78 <SystemClock_Config+0xf8>)
 8000db0:	f023 0301 	bic.w	r3, r3, #1
 8000db4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000db6:	4b30      	ldr	r3, [pc, #192]	@ (8000e78 <SystemClock_Config+0xf8>)
 8000db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8000e7c <SystemClock_Config+0xfc>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dc8:	4a2c      	ldr	r2, [pc, #176]	@ (8000e7c <SystemClock_Config+0xfc>)
 8000dca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e7c <SystemClock_Config+0xfc>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ddc:	bf00      	nop
 8000dde:	4b27      	ldr	r3, [pc, #156]	@ (8000e7c <SystemClock_Config+0xfc>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dea:	d1f8      	bne.n	8000dde <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000dec:	2303      	movs	r3, #3
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000df0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dfa:	2340      	movs	r3, #64	@ 0x40
 8000dfc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e02:	2302      	movs	r3, #2
 8000e04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 23;
 8000e06:	2317      	movs	r3, #23
 8000e08:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 177;
 8000e0a:	23b1      	movs	r3, #177	@ 0xb1
 8000e0c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e12:	2304      	movs	r3, #4
 8000e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000e16:	2304      	movs	r3, #4
 8000e18:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f004 ff84 	bl	8005d38 <HAL_RCC_OscConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e36:	f000 f945 	bl	80010c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3a:	233f      	movs	r3, #63	@ 0x3f
 8000e3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f005 fbc4 	bl	80065ec <HAL_RCC_ClockConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000e6a:	f000 f92b 	bl	80010c4 <Error_Handler>
  }
}
 8000e6e:	bf00      	nop
 8000e70:	3770      	adds	r7, #112	@ 0x70
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	58000400 	.word	0x58000400
 8000e7c:	58024800 	.word	0x58024800

08000e80 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <MX_I2C3_Init+0x74>)
 8000e86:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef8 <MX_I2C3_Init+0x78>)
 8000e88:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef4 <MX_I2C3_Init+0x74>)
 8000e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000efc <MX_I2C3_Init+0x7c>)
 8000e8e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <MX_I2C3_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e96:	4b17      	ldr	r3, [pc, #92]	@ (8000ef4 <MX_I2C3_Init+0x74>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <MX_I2C3_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	@ (8000ef4 <MX_I2C3_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <MX_I2C3_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eae:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <MX_I2C3_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <MX_I2C3_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000eba:	480e      	ldr	r0, [pc, #56]	@ (8000ef4 <MX_I2C3_Init+0x74>)
 8000ebc:	f003 fd1e 	bl	80048fc <HAL_I2C_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000ec6:	f000 f8fd 	bl	80010c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4809      	ldr	r0, [pc, #36]	@ (8000ef4 <MX_I2C3_Init+0x74>)
 8000ece:	f004 fe41 	bl	8005b54 <HAL_I2CEx_ConfigAnalogFilter>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ed8:	f000 f8f4 	bl	80010c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000edc:	2100      	movs	r1, #0
 8000ede:	4805      	ldr	r0, [pc, #20]	@ (8000ef4 <MX_I2C3_Init+0x74>)
 8000ee0:	f004 fe83 	bl	8005bea <HAL_I2CEx_ConfigDigitalFilter>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000eea:	f000 f8eb 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	240001f4 	.word	0x240001f4
 8000ef8:	40005c00 	.word	0x40005c00
 8000efc:	10707dbc 	.word	0x10707dbc

08000f00 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f06:	4a1c      	ldr	r2, [pc, #112]	@ (8000f78 <MX_I2C4_Init+0x78>)
 8000f08:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f7c <MX_I2C4_Init+0x7c>)
 8000f0e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000f10:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f16:	4b17      	ldr	r3, [pc, #92]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000f22:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f28:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f3a:	480e      	ldr	r0, [pc, #56]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f3c:	f003 fcde 	bl	80048fc <HAL_I2C_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000f46:	f000 f8bd 	bl	80010c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4809      	ldr	r0, [pc, #36]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f4e:	f004 fe01 	bl	8005b54 <HAL_I2CEx_ConfigAnalogFilter>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000f58:	f000 f8b4 	bl	80010c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <MX_I2C4_Init+0x74>)
 8000f60:	f004 fe43 	bl	8005bea <HAL_I2CEx_ConfigDigitalFilter>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000f6a:	f000 f8ab 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	24000248 	.word	0x24000248
 8000f78:	58001c00 	.word	0x58001c00
 8000f7c:	10707dbc 	.word	0x10707dbc

08000f80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f84:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <MX_USART3_UART_Init+0x90>)
 8000f86:	4a23      	ldr	r2, [pc, #140]	@ (8001014 <MX_USART3_UART_Init+0x94>)
 8000f88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f8a:	4b21      	ldr	r3, [pc, #132]	@ (8001010 <MX_USART3_UART_Init+0x90>)
 8000f8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f92:	4b1f      	ldr	r3, [pc, #124]	@ (8001010 <MX_USART3_UART_Init+0x90>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f98:	4b1d      	ldr	r3, [pc, #116]	@ (8001010 <MX_USART3_UART_Init+0x90>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <MX_USART3_UART_Init+0x90>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <MX_USART3_UART_Init+0x90>)
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000faa:	4b19      	ldr	r3, [pc, #100]	@ (8001010 <MX_USART3_UART_Init+0x90>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <MX_USART3_UART_Init+0x90>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fb6:	4b16      	ldr	r3, [pc, #88]	@ (8001010 <MX_USART3_UART_Init+0x90>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_USART3_UART_Init+0x90>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc2:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <MX_USART3_UART_Init+0x90>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fc8:	4811      	ldr	r0, [pc, #68]	@ (8001010 <MX_USART3_UART_Init+0x90>)
 8000fca:	f007 fcc7 	bl	800895c <HAL_UART_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000fd4:	f000 f876 	bl	80010c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd8:	2100      	movs	r1, #0
 8000fda:	480d      	ldr	r0, [pc, #52]	@ (8001010 <MX_USART3_UART_Init+0x90>)
 8000fdc:	f008 fd5d 	bl	8009a9a <HAL_UARTEx_SetTxFifoThreshold>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000fe6:	f000 f86d 	bl	80010c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fea:	2100      	movs	r1, #0
 8000fec:	4808      	ldr	r0, [pc, #32]	@ (8001010 <MX_USART3_UART_Init+0x90>)
 8000fee:	f008 fd92 	bl	8009b16 <HAL_UARTEx_SetRxFifoThreshold>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ff8:	f000 f864 	bl	80010c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ffc:	4804      	ldr	r0, [pc, #16]	@ (8001010 <MX_USART3_UART_Init+0x90>)
 8000ffe:	f008 fd13 	bl	8009a28 <HAL_UARTEx_DisableFifoMode>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001008:	f000 f85c 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2400029c 	.word	0x2400029c
 8001014:	40004800 	.word	0x40004800

08001018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101e:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <MX_GPIO_Init+0xa8>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001024:	4a26      	ldr	r2, [pc, #152]	@ (80010c0 <MX_GPIO_Init+0xa8>)
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800102e:	4b24      	ldr	r3, [pc, #144]	@ (80010c0 <MX_GPIO_Init+0xa8>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103c:	4b20      	ldr	r3, [pc, #128]	@ (80010c0 <MX_GPIO_Init+0xa8>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001042:	4a1f      	ldr	r2, [pc, #124]	@ (80010c0 <MX_GPIO_Init+0xa8>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800104c:	4b1c      	ldr	r3, [pc, #112]	@ (80010c0 <MX_GPIO_Init+0xa8>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105a:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <MX_GPIO_Init+0xa8>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001060:	4a17      	ldr	r2, [pc, #92]	@ (80010c0 <MX_GPIO_Init+0xa8>)
 8001062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001066:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <MX_GPIO_Init+0xa8>)
 800106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001078:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <MX_GPIO_Init+0xa8>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107e:	4a10      	ldr	r2, [pc, #64]	@ (80010c0 <MX_GPIO_Init+0xa8>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001088:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <MX_GPIO_Init+0xa8>)
 800108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <MX_GPIO_Init+0xa8>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109c:	4a08      	ldr	r2, [pc, #32]	@ (80010c0 <MX_GPIO_Init+0xa8>)
 800109e:	f043 0308 	orr.w	r3, r3, #8
 80010a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <MX_GPIO_Init+0xa8>)
 80010a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010b4:	bf00      	nop
 80010b6:	371c      	adds	r7, #28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	58024400 	.word	0x58024400

080010c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
}
 80010ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <Error_Handler+0x8>

080010d0 <sensor_init>:
 *
 * @return A BIOME error code
 *
 */
BIOME_Error_t sensor_init(void) 
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
	int result;

#ifdef USE_BME680
    result = BME680_Init();
 80010d6:	f000 fadf 	bl	8001698 <BME680_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	607b      	str	r3, [r7, #4]
    if (result != SYS_OK) { return result; }
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <sensor_init+0x1a>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	e01e      	b.n	8001128 <sensor_init+0x58>
    result = SI1145_Init();
    if (result != SYS_OK) { return result; }
#endif // USE_SI1145

#ifdef USE_SGP30
    result = SGP30_Init();
 80010ea:	f000 ff85 	bl	8001ff8 <SGP30_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	607b      	str	r3, [r7, #4]
    if (result != SYS_OK) { return result; }
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <sensor_init+0x2e>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	e014      	b.n	8001128 <sensor_init+0x58>
#endif // USE_SGP30

#ifdef USE_MMC56X3
    result = MMC56X3_Init();
 80010fe:	f000 fc71 	bl	80019e4 <MMC56X3_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	607b      	str	r3, [r7, #4]
    if (result != SYS_OK) { return result; }
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <sensor_init+0x42>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	b29b      	uxth	r3, r3
 8001110:	e00a      	b.n	8001128 <sensor_init+0x58>
#endif // USE_MMC56X3

#ifdef USE_MPL3115A2
    result = MPL3115A2_Init();
 8001112:	f000 fdb1 	bl	8001c78 <MPL3115A2_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	607b      	str	r3, [r7, #4]
    if (result != SYS_OK) { return result; }
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d002      	beq.n	8001126 <sensor_init+0x56>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	b29b      	uxth	r3, r3
 8001124:	e000      	b.n	8001128 <sensor_init+0x58>
#endif // USE_MPL3115A2

    return SYS_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <HAL_MspInit+0x30>)
 8001138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800113c:	4a08      	ldr	r2, [pc, #32]	@ (8001160 <HAL_MspInit+0x30>)
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001146:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_MspInit+0x30>)
 8001148:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	58024400 	.word	0x58024400

08001164 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b0be      	sub	sp, #248	@ 0xf8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	22c0      	movs	r2, #192	@ 0xc0
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f009 fb93 	bl	800a8b0 <memset>
  if(hi2c->Instance==I2C3)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a60      	ldr	r2, [pc, #384]	@ (8001310 <HAL_I2C_MspInit+0x1ac>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d16c      	bne.n	800126e <HAL_I2C_MspInit+0x10a>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001194:	f04f 0208 	mov.w	r2, #8
 8001198:	f04f 0300 	mov.w	r3, #0
 800119c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	4618      	mov	r0, r3
 80011ac:	f005 fdaa 	bl	8006d04 <HAL_RCCEx_PeriphCLKConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80011b6:	f7ff ff85 	bl	80010c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	4b56      	ldr	r3, [pc, #344]	@ (8001314 <HAL_I2C_MspInit+0x1b0>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c0:	4a54      	ldr	r2, [pc, #336]	@ (8001314 <HAL_I2C_MspInit+0x1b0>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ca:	4b52      	ldr	r3, [pc, #328]	@ (8001314 <HAL_I2C_MspInit+0x1b0>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001314 <HAL_I2C_MspInit+0x1b0>)
 80011da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011de:	4a4d      	ldr	r2, [pc, #308]	@ (8001314 <HAL_I2C_MspInit+0x1b0>)
 80011e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001314 <HAL_I2C_MspInit+0x1b0>)
 80011ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011f2:	61bb      	str	r3, [r7, #24]
 80011f4:	69bb      	ldr	r3, [r7, #24]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011fe:	2312      	movs	r3, #18
 8001200:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001210:	2304      	movs	r3, #4
 8001212:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800121a:	4619      	mov	r1, r3
 800121c:	483e      	ldr	r0, [pc, #248]	@ (8001318 <HAL_I2C_MspInit+0x1b4>)
 800121e:	f003 f98f 	bl	8004540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001222:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001226:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122a:	2312      	movs	r3, #18
 800122c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800123c:	2304      	movs	r3, #4
 800123e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001242:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001246:	4619      	mov	r1, r3
 8001248:	4834      	ldr	r0, [pc, #208]	@ (800131c <HAL_I2C_MspInit+0x1b8>)
 800124a:	f003 f979 	bl	8004540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800124e:	4b31      	ldr	r3, [pc, #196]	@ (8001314 <HAL_I2C_MspInit+0x1b0>)
 8001250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001254:	4a2f      	ldr	r2, [pc, #188]	@ (8001314 <HAL_I2C_MspInit+0x1b0>)
 8001256:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800125a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800125e:	4b2d      	ldr	r3, [pc, #180]	@ (8001314 <HAL_I2C_MspInit+0x1b0>)
 8001260:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001264:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C4_MspInit 1 */

    /* USER CODE END I2C4_MspInit 1 */
  }

}
 800126c:	e04b      	b.n	8001306 <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C4)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a2b      	ldr	r2, [pc, #172]	@ (8001320 <HAL_I2C_MspInit+0x1bc>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d146      	bne.n	8001306 <HAL_I2C_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001278:	f04f 0210 	mov.w	r2, #16
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128a:	f107 0320 	add.w	r3, r7, #32
 800128e:	4618      	mov	r0, r3
 8001290:	f005 fd38 	bl	8006d04 <HAL_RCCEx_PeriphCLKConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_I2C_MspInit+0x13a>
      Error_Handler();
 800129a:	f7ff ff13 	bl	80010c4 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800129e:	4b1d      	ldr	r3, [pc, #116]	@ (8001314 <HAL_I2C_MspInit+0x1b0>)
 80012a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001314 <HAL_I2C_MspInit+0x1b0>)
 80012a6:	f043 0308 	orr.w	r3, r3, #8
 80012aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ae:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <HAL_I2C_MspInit+0x1b0>)
 80012b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80012bc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80012c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c4:	2312      	movs	r3, #18
 80012c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80012d6:	2304      	movs	r3, #4
 80012d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012dc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80012e0:	4619      	mov	r1, r3
 80012e2:	4810      	ldr	r0, [pc, #64]	@ (8001324 <HAL_I2C_MspInit+0x1c0>)
 80012e4:	f003 f92c 	bl	8004540 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80012e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <HAL_I2C_MspInit+0x1b0>)
 80012ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012ee:	4a09      	ldr	r2, [pc, #36]	@ (8001314 <HAL_I2C_MspInit+0x1b0>)
 80012f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012f4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_I2C_MspInit+0x1b0>)
 80012fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
}
 8001306:	bf00      	nop
 8001308:	37f8      	adds	r7, #248	@ 0xf8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40005c00 	.word	0x40005c00
 8001314:	58024400 	.word	0x58024400
 8001318:	58020000 	.word	0x58020000
 800131c:	58021c00 	.word	0x58021c00
 8001320:	58001c00 	.word	0x58001c00
 8001324:	58020c00 	.word	0x58020c00

08001328 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b0ba      	sub	sp, #232	@ 0xe8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	22c0      	movs	r2, #192	@ 0xc0
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f009 fab1 	bl	800a8b0 <memset>
  if(huart->Instance==USART3)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a27      	ldr	r2, [pc, #156]	@ (80013f0 <HAL_UART_MspInit+0xc8>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d146      	bne.n	80013e6 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001358:	f04f 0202 	mov.w	r2, #2
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	4618      	mov	r0, r3
 8001370:	f005 fcc8 	bl	8006d04 <HAL_RCCEx_PeriphCLKConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800137a:	f7ff fea3 	bl	80010c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800137e:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <HAL_UART_MspInit+0xcc>)
 8001380:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001384:	4a1b      	ldr	r2, [pc, #108]	@ (80013f4 <HAL_UART_MspInit+0xcc>)
 8001386:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800138a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800138e:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <HAL_UART_MspInit+0xcc>)
 8001390:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001394:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <HAL_UART_MspInit+0xcc>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a2:	4a14      	ldr	r2, [pc, #80]	@ (80013f4 <HAL_UART_MspInit+0xcc>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <HAL_UART_MspInit+0xcc>)
 80013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80013ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013d4:	2307      	movs	r3, #7
 80013d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013de:	4619      	mov	r1, r3
 80013e0:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <HAL_UART_MspInit+0xd0>)
 80013e2:	f003 f8ad 	bl	8004540 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80013e6:	bf00      	nop
 80013e8:	37e8      	adds	r7, #232	@ 0xe8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40004800 	.word	0x40004800
 80013f4:	58024400 	.word	0x58024400
 80013f8:	58020400 	.word	0x58020400

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <NMI_Handler+0x4>

08001404 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <MemManage_Handler+0x4>

08001414 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <UsageFault_Handler+0x4>

08001424 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001452:	f002 ff41 	bl	80042d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}

0800145a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  return 1;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <_kill>:

int _kill(int pid, int sig)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001474:	f009 fa6e 	bl	800a954 <__errno>
 8001478:	4603      	mov	r3, r0
 800147a:	2216      	movs	r2, #22
 800147c:	601a      	str	r2, [r3, #0]
  return -1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <_exit>:

void _exit (int status)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001492:	f04f 31ff 	mov.w	r1, #4294967295
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffe7 	bl	800146a <_kill>
  while (1) {}    /* Make sure we hang here */
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <_exit+0x12>

080014a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e00a      	b.n	80014c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014b2:	f3af 8000 	nop.w
 80014b6:	4601      	mov	r1, r0
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	60ba      	str	r2, [r7, #8]
 80014be:	b2ca      	uxtb	r2, r1
 80014c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	dbf0      	blt.n	80014b2 <_read+0x12>
  }

  return len;
 80014d0:	687b      	ldr	r3, [r7, #4]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <_close>:
  }
  return len;
}

int _close(int file)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001502:	605a      	str	r2, [r3, #4]
  return 0;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <_isatty>:

int _isatty(int file)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800154c:	4a14      	ldr	r2, [pc, #80]	@ (80015a0 <_sbrk+0x5c>)
 800154e:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <_sbrk+0x60>)
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001558:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d102      	bne.n	8001566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <_sbrk+0x64>)
 8001562:	4a12      	ldr	r2, [pc, #72]	@ (80015ac <_sbrk+0x68>)
 8001564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001566:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <_sbrk+0x64>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	429a      	cmp	r2, r3
 8001572:	d207      	bcs.n	8001584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001574:	f009 f9ee 	bl	800a954 <__errno>
 8001578:	4603      	mov	r3, r0
 800157a:	220c      	movs	r2, #12
 800157c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800157e:	f04f 33ff 	mov.w	r3, #4294967295
 8001582:	e009      	b.n	8001598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001584:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158a:	4b07      	ldr	r3, [pc, #28]	@ (80015a8 <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	4a05      	ldr	r2, [pc, #20]	@ (80015a8 <_sbrk+0x64>)
 8001594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001596:	68fb      	ldr	r3, [r7, #12]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	24080000 	.word	0x24080000
 80015a4:	00000400 	.word	0x00000400
 80015a8:	24000330 	.word	0x24000330
 80015ac:	240004d8 	.word	0x240004d8

080015b0 <bme680_i2c_read>:
/*
 * BME680 I2C read function.
 * This is used internally by the BME680 library to read data from the sensor.
 */
static int8_t bme680_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	@ 0x28
 80015b4:	af04      	add	r7, sp, #16
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	4603      	mov	r3, r0
 80015be:	73fb      	strb	r3, [r7, #15]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef*)intf_ptr;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, BME68X_I2C_ADDR_HIGH << 1,
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	2164      	movs	r1, #100	@ 0x64
 80015ce:	9102      	str	r1, [sp, #8]
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2301      	movs	r3, #1
 80015d8:	21ee      	movs	r1, #238	@ 0xee
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f003 fd4c 	bl	8005078 <HAL_I2C_Mem_Read>
 80015e0:	4603      	mov	r3, r0
 80015e2:	74fb      	strb	r3, [r7, #19]
                                               reg_addr, 1, reg_data, len, 100);

    return (status == HAL_OK) ? BME68X_INTF_RET_SUCCESS : -1;
 80015e4:	7cfb      	ldrb	r3, [r7, #19]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <bme680_i2c_read+0x3e>
 80015ea:	2300      	movs	r3, #0
 80015ec:	e001      	b.n	80015f2 <bme680_i2c_read+0x42>
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <bme680_i2c_write>:
/*
 * BME680 I2C write function.
 * This is used internally by the BME680 library to write to the sensor.
 */
static int8_t bme680_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b08a      	sub	sp, #40	@ 0x28
 80015fe:	af04      	add	r7, sp, #16
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	4603      	mov	r3, r0
 8001608:	73fb      	strb	r3, [r7, #15]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef*)intf_ptr;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(hi2c, BME68X_I2C_ADDR_HIGH << 1,
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	b29a      	uxth	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	b29b      	uxth	r3, r3
 8001616:	2164      	movs	r1, #100	@ 0x64
 8001618:	9102      	str	r1, [sp, #8]
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	2301      	movs	r3, #1
 8001622:	21ee      	movs	r1, #238	@ 0xee
 8001624:	6978      	ldr	r0, [r7, #20]
 8001626:	f003 fc13 	bl	8004e50 <HAL_I2C_Mem_Write>
 800162a:	4603      	mov	r3, r0
 800162c:	74fb      	strb	r3, [r7, #19]
                                                reg_addr, 1, (uint8_t*)reg_data, len, 100);

    return (status == HAL_OK) ? BME68X_INTF_RET_SUCCESS : -1;
 800162e:	7cfb      	ldrb	r3, [r7, #19]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <bme680_i2c_write+0x3e>
 8001634:	2300      	movs	r3, #0
 8001636:	e001      	b.n	800163c <bme680_i2c_write+0x42>
 8001638:	f04f 33ff 	mov.w	r3, #4294967295
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <bme680_delay_us>:

/* Microsecond delay function needed by the BME680 library. */
static void bme680_delay_us(uint32_t period, void *intf_ptr)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
    uint32_t delay_ms = (period / 1000) + ((period % 1000) ? 1 : 0);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a10      	ldr	r2, [pc, #64]	@ (8001694 <bme680_delay_us+0x50>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	0999      	lsrs	r1, r3, #6
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <bme680_delay_us+0x50>)
 800165c:	fba3 0302 	umull	r0, r3, r3, r2
 8001660:	099b      	lsrs	r3, r3, #6
 8001662:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001666:	fb00 f303 	mul.w	r3, r0, r3
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <bme680_delay_us+0x30>
 8001670:	2301      	movs	r3, #1
 8001672:	e000      	b.n	8001676 <bme680_delay_us+0x32>
 8001674:	2300      	movs	r3, #0
 8001676:	440b      	add	r3, r1
 8001678:	60fb      	str	r3, [r7, #12]
    if (delay_ms == 0) delay_ms = 1;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <bme680_delay_us+0x40>
 8001680:	2301      	movs	r3, #1
 8001682:	60fb      	str	r3, [r7, #12]

    HAL_Delay(delay_ms);
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f002 fe47 	bl	8004318 <HAL_Delay>
}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	10624dd3 	.word	0x10624dd3

08001698 <BME680_Init>:


/* Public function to initialize the BME680 */
BIOME_Error_t BME680_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
	int8_t result;
	HAL_StatusTypeDef i2c_status;
	struct bme68x_conf conf;
	struct bme68x_heatr_conf heatr_conf;

	if (bme680_initialized) { return SYS_OK; }
 800169e:	4b3f      	ldr	r3, [pc, #252]	@ (800179c <BME680_Init+0x104>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <BME680_Init+0x12>
 80016a6:	2300      	movs	r3, #0
 80016a8:	e073      	b.n	8001792 <BME680_Init+0xfa>

	bme680_dev.intf = BME68X_I2C_INTF;
 80016aa:	4b3d      	ldr	r3, [pc, #244]	@ (80017a0 <BME680_Init+0x108>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	731a      	strb	r2, [r3, #12]
	bme680_dev.intf_ptr = &hi2c4;
 80016b0:	4b3b      	ldr	r3, [pc, #236]	@ (80017a0 <BME680_Init+0x108>)
 80016b2:	4a3c      	ldr	r2, [pc, #240]	@ (80017a4 <BME680_Init+0x10c>)
 80016b4:	605a      	str	r2, [r3, #4]
	bme680_dev.read = bme680_i2c_read;
 80016b6:	4b3a      	ldr	r3, [pc, #232]	@ (80017a0 <BME680_Init+0x108>)
 80016b8:	4a3b      	ldr	r2, [pc, #236]	@ (80017a8 <BME680_Init+0x110>)
 80016ba:	641a      	str	r2, [r3, #64]	@ 0x40
	bme680_dev.write = bme680_i2c_write;
 80016bc:	4b38      	ldr	r3, [pc, #224]	@ (80017a0 <BME680_Init+0x108>)
 80016be:	4a3b      	ldr	r2, [pc, #236]	@ (80017ac <BME680_Init+0x114>)
 80016c0:	645a      	str	r2, [r3, #68]	@ 0x44
	bme680_dev.delay_us = bme680_delay_us;
 80016c2:	4b37      	ldr	r3, [pc, #220]	@ (80017a0 <BME680_Init+0x108>)
 80016c4:	4a3a      	ldr	r2, [pc, #232]	@ (80017b0 <BME680_Init+0x118>)
 80016c6:	649a      	str	r2, [r3, #72]	@ 0x48
	bme680_dev.amb_temp = 25;
 80016c8:	4b35      	ldr	r3, [pc, #212]	@ (80017a0 <BME680_Init+0x108>)
 80016ca:	2219      	movs	r2, #25
 80016cc:	739a      	strb	r2, [r3, #14]

	result = bme68x_init(&bme680_dev);
 80016ce:	4834      	ldr	r0, [pc, #208]	@ (80017a0 <BME680_Init+0x108>)
 80016d0:	f000 fd7b 	bl	80021ca <bme68x_init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	77fb      	strb	r3, [r7, #31]
	if (result != BME68X_OK)
 80016d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <BME680_Init+0x5a>
	{
		printf("INITIALIZATION FAILED WITH ERROR CODE %d\r\n", result);
 80016e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016e4:	4619      	mov	r1, r3
 80016e6:	4833      	ldr	r0, [pc, #204]	@ (80017b4 <BME680_Init+0x11c>)
 80016e8:	f008 ff9a 	bl	800a620 <iprintf>
		return SENS_ERR_INIT;
 80016ec:	f242 0303 	movw	r3, #8195	@ 0x2003
 80016f0:	e04f      	b.n	8001792 <BME680_Init+0xfa>
	}
	else
	{
		i2c_status = HAL_I2C_IsDeviceReady(&hi2c4, BME680_I2C_ADDRESS, 3, 1000);
 80016f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f6:	2203      	movs	r2, #3
 80016f8:	21ee      	movs	r1, #238	@ 0xee
 80016fa:	482a      	ldr	r0, [pc, #168]	@ (80017a4 <BME680_Init+0x10c>)
 80016fc:	f003 fdd6 	bl	80052ac <HAL_I2C_IsDeviceReady>
 8001700:	4603      	mov	r3, r0
 8001702:	77bb      	strb	r3, [r7, #30]
		printf("HAL_I2C_IsDeviceReady Result for BME680: %d\r\n", i2c_status);
 8001704:	7fbb      	ldrb	r3, [r7, #30]
 8001706:	4619      	mov	r1, r3
 8001708:	482b      	ldr	r0, [pc, #172]	@ (80017b8 <BME680_Init+0x120>)
 800170a:	f008 ff89 	bl	800a620 <iprintf>
	}

	conf.filter = BME68X_FILTER_OFF;
 800170e:	2300      	movs	r3, #0
 8001710:	76fb      	strb	r3, [r7, #27]
	conf.odr = BME68X_ODR_NONE;
 8001712:	2308      	movs	r3, #8
 8001714:	773b      	strb	r3, [r7, #28]
	conf.os_hum = BME68X_OS_2X;
 8001716:	2302      	movs	r3, #2
 8001718:	763b      	strb	r3, [r7, #24]
	conf.os_pres = BME68X_OS_4X;
 800171a:	2303      	movs	r3, #3
 800171c:	76bb      	strb	r3, [r7, #26]
	conf.os_temp = BME68X_OS_8X;
 800171e:	2304      	movs	r3, #4
 8001720:	767b      	strb	r3, [r7, #25]

	result = bme68x_set_conf(&conf, &bme680_dev);
 8001722:	f107 0318 	add.w	r3, r7, #24
 8001726:	491e      	ldr	r1, [pc, #120]	@ (80017a0 <BME680_Init+0x108>)
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fe93 	bl	8002454 <bme68x_set_conf>
 800172e:	4603      	mov	r3, r0
 8001730:	77fb      	strb	r3, [r7, #31]
	if (result != BME68X_OK)
 8001732:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d008      	beq.n	800174c <BME680_Init+0xb4>
	{
		printf("BME680: CONFIG FAILED: %d\r\n", result);
 800173a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800173e:	4619      	mov	r1, r3
 8001740:	481e      	ldr	r0, [pc, #120]	@ (80017bc <BME680_Init+0x124>)
 8001742:	f008 ff6d 	bl	800a620 <iprintf>
		return SENS_ERR_CONF;
 8001746:	f242 0304 	movw	r3, #8196	@ 0x2004
 800174a:	e022      	b.n	8001792 <BME680_Init+0xfa>
	}

	heatr_conf.enable = BME68X_ENABLE;
 800174c:	2301      	movs	r3, #1
 800174e:	713b      	strb	r3, [r7, #4]
	heatr_conf.heatr_temp = 300;
 8001750:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001754:	80fb      	strh	r3, [r7, #6]
	heatr_conf.heatr_dur = 100;
 8001756:	2364      	movs	r3, #100	@ 0x64
 8001758:	813b      	strh	r3, [r7, #8]

	result = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme680_dev);
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	4a10      	ldr	r2, [pc, #64]	@ (80017a0 <BME680_Init+0x108>)
 800175e:	4619      	mov	r1, r3
 8001760:	2001      	movs	r0, #1
 8001762:	f001 f900 	bl	8002966 <bme68x_set_heatr_conf>
 8001766:	4603      	mov	r3, r0
 8001768:	77fb      	strb	r3, [r7, #31]
	if (result != BME68X_OK)
 800176a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d008      	beq.n	8001784 <BME680_Init+0xec>
	{
		printf("BME680: HEATER CONFIG FAILED: %d\r\n", result);
 8001772:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001776:	4619      	mov	r1, r3
 8001778:	4811      	ldr	r0, [pc, #68]	@ (80017c0 <BME680_Init+0x128>)
 800177a:	f008 ff51 	bl	800a620 <iprintf>
		return SENS_ERR_CONF;
 800177e:	f242 0304 	movw	r3, #8196	@ 0x2004
 8001782:	e006      	b.n	8001792 <BME680_Init+0xfa>
	}

	printf("BME680 INITIALIZATION COMPLETE!\r\n");
 8001784:	480f      	ldr	r0, [pc, #60]	@ (80017c4 <BME680_Init+0x12c>)
 8001786:	f008 ffb3 	bl	800a6f0 <puts>
	bme680_initialized = true;
 800178a:	4b04      	ldr	r3, [pc, #16]	@ (800179c <BME680_Init+0x104>)
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
	return SYS_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3720      	adds	r7, #32
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	24000384 	.word	0x24000384
 80017a0:	24000334 	.word	0x24000334
 80017a4:	24000248 	.word	0x24000248
 80017a8:	080015b1 	.word	0x080015b1
 80017ac:	080015fb 	.word	0x080015fb
 80017b0:	08001645 	.word	0x08001645
 80017b4:	0800caf0 	.word	0x0800caf0
 80017b8:	0800cb1c 	.word	0x0800cb1c
 80017bc:	0800cb4c 	.word	0x0800cb4c
 80017c0:	0800cb68 	.word	0x0800cb68
 80017c4:	0800cb8c 	.word	0x0800cb8c

080017c8 <BME680_ReadData>:

BIOME_Error_t BME680_ReadData(BME680_Data_t *data)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	@ 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	int8_t result;
	uint8_t num_fields;
	struct bme68x_data retrieved_data;

	if (!bme680_initialized) { return SENS_ERR_NOT_RDY; }
 80017d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001884 <BME680_ReadData+0xbc>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	f083 0301 	eor.w	r3, r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <BME680_ReadData+0x1c>
 80017de:	f242 0302 	movw	r3, #8194	@ 0x2002
 80017e2:	e04a      	b.n	800187a <BME680_ReadData+0xb2>
	if (!data) { return SYS_ERR_NULL_PTR; }
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <BME680_ReadData+0x28>
 80017ea:	f241 0301 	movw	r3, #4097	@ 0x1001
 80017ee:	e044      	b.n	800187a <BME680_ReadData+0xb2>

	result = bme68x_set_op_mode(BME68X_FORCED_MODE, &bme680_dev);
 80017f0:	4925      	ldr	r1, [pc, #148]	@ (8001888 <BME680_ReadData+0xc0>)
 80017f2:	2001      	movs	r0, #1
 80017f4:	f000 ff38 	bl	8002668 <bme68x_set_op_mode>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (result == BME68X_E_NULL_PTR) { return SYS_ERR_NULL_PTR; }
 80017fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001806:	d102      	bne.n	800180e <BME680_ReadData+0x46>
 8001808:	f241 0301 	movw	r3, #4097	@ 0x1001
 800180c:	e035      	b.n	800187a <BME680_ReadData+0xb2>
	else if (result != BME68X_OK) { return SENS_ERR_NOT_RDY; }
 800180e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <BME680_ReadData+0x54>
 8001816:	f242 0302 	movw	r3, #8194	@ 0x2002
 800181a:	e02e      	b.n	800187a <BME680_ReadData+0xb2>

	HAL_Delay(100);
 800181c:	2064      	movs	r0, #100	@ 0x64
 800181e:	f002 fd7b 	bl	8004318 <HAL_Delay>
	result = bme68x_get_data(BME68X_FORCED_MODE, &retrieved_data, &num_fields, &bme680_dev);
 8001822:	f107 0226 	add.w	r2, r7, #38	@ 0x26
 8001826:	f107 010c 	add.w	r1, r7, #12
 800182a:	4b17      	ldr	r3, [pc, #92]	@ (8001888 <BME680_ReadData+0xc0>)
 800182c:	2001      	movs	r0, #1
 800182e:	f000 ff9c 	bl	800276a <bme68x_get_data>
 8001832:	4603      	mov	r3, r0
 8001834:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (result == BME68X_E_NULL_PTR) { return SYS_ERR_NULL_PTR; }
 8001838:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001840:	d102      	bne.n	8001848 <BME680_ReadData+0x80>
 8001842:	f241 0301 	movw	r3, #4097	@ 0x1001
 8001846:	e018      	b.n	800187a <BME680_ReadData+0xb2>
	else if (result != BME68X_OK) { return SENS_ERR_NOT_RDY; }
 8001848:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800184c:	2b00      	cmp	r3, #0
 800184e:	d002      	beq.n	8001856 <BME680_ReadData+0x8e>
 8001850:	f242 0302 	movw	r3, #8194	@ 0x2002
 8001854:	e011      	b.n	800187a <BME680_ReadData+0xb2>

	data->temperature = retrieved_data.temperature;
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	601a      	str	r2, [r3, #0]
	data->pressure = retrieved_data.pressure;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	605a      	str	r2, [r3, #4]
	data->humidity = retrieved_data.humidity;
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	609a      	str	r2, [r3, #8]
	data->gas_resistance = retrieved_data.gas_resistance;
 8001868:	6a3a      	ldr	r2, [r7, #32]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	60da      	str	r2, [r3, #12]
	/*
	 * If we've retrieved new data, the new data mask will be set. If it
	 * isn't set, then no new data has been retrieved. The caller of
	 * BME680_ReadData should be clearing data_valid before reading.
	 */
	data->data_valid = (retrieved_data.status & BME68X_NEW_DATA_MSK) ? 1 : 0;
 800186e:	7b3b      	ldrb	r3, [r7, #12]
 8001870:	09db      	lsrs	r3, r3, #7
 8001872:	b2da      	uxtb	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	741a      	strb	r2, [r3, #16]

	return SYS_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3728      	adds	r7, #40	@ 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	24000384 	.word	0x24000384
 8001888:	24000334 	.word	0x24000334

0800188c <mmc56x3_write_reg>:
extern I2C_HandleTypeDef hi2c4;

static bool mmc56x3_initialized = false;

static HAL_StatusTypeDef mmc56x3_write_reg(uint8_t reg, uint8_t val) 
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af04      	add	r7, sp, #16
 8001892:	4603      	mov	r3, r0
 8001894:	460a      	mov	r2, r1
 8001896:	71fb      	strb	r3, [r7, #7]
 8001898:	4613      	mov	r3, r2
 800189a:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(&hi2c4, MMC56X3_I2C_ADDRESS, reg, 1, &val, 1, 1000);
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	b29a      	uxth	r2, r3
 80018a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018a4:	9302      	str	r3, [sp, #8]
 80018a6:	2301      	movs	r3, #1
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	1dbb      	adds	r3, r7, #6
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2301      	movs	r3, #1
 80018b0:	2160      	movs	r1, #96	@ 0x60
 80018b2:	4804      	ldr	r0, [pc, #16]	@ (80018c4 <mmc56x3_write_reg+0x38>)
 80018b4:	f003 facc 	bl	8004e50 <HAL_I2C_Mem_Write>
 80018b8:	4603      	mov	r3, r0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	24000248 	.word	0x24000248

080018c8 <mmc56x3_read_reg>:

static HAL_StatusTypeDef mmc56x3_read_reg(uint8_t reg, uint8_t *val) 
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af04      	add	r7, sp, #16
 80018ce:	4603      	mov	r3, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Read(&hi2c4, MMC56X3_I2C_ADDRESS, reg, 1, val, 1, 1000);
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018dc:	9302      	str	r3, [sp, #8]
 80018de:	2301      	movs	r3, #1
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2301      	movs	r3, #1
 80018e8:	2160      	movs	r1, #96	@ 0x60
 80018ea:	4804      	ldr	r0, [pc, #16]	@ (80018fc <mmc56x3_read_reg+0x34>)
 80018ec:	f003 fbc4 	bl	8005078 <HAL_I2C_Mem_Read>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	24000248 	.word	0x24000248

08001900 <mmc56x3_read_multiple>:

static HAL_StatusTypeDef mmc56x3_read_multiple(uint8_t reg, uint8_t *data, uint16_t len) 
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af04      	add	r7, sp, #16
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
 800190c:	4613      	mov	r3, r2
 800190e:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&hi2c4, MMC56X3_I2C_ADDRESS, reg, 1, data, len, 1000);
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	b29a      	uxth	r2, r3
 8001914:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001918:	9302      	str	r3, [sp, #8]
 800191a:	88bb      	ldrh	r3, [r7, #4]
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2301      	movs	r3, #1
 8001924:	2160      	movs	r1, #96	@ 0x60
 8001926:	4804      	ldr	r0, [pc, #16]	@ (8001938 <mmc56x3_read_multiple+0x38>)
 8001928:	f003 fba6 	bl	8005078 <HAL_I2C_Mem_Read>
 800192c:	4603      	mov	r3, r0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	24000248 	.word	0x24000248

0800193c <mmc56x3_convert_20bit>:

static void mmc56x3_convert_20bit(uint8_t *buffer, int32_t *x, int32_t *y, int32_t *z) {
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	603b      	str	r3, [r7, #0]
    // Adafruit format: 20-bit data with extra bits in bytes 6,7,8
    *x = (uint32_t)buffer[0] << 12 | (uint32_t)buffer[1] << 4 | (uint32_t)buffer[6] >> 4;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	031a      	lsls	r2, r3, #12
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	3301      	adds	r3, #1
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	4313      	orrs	r3, r2
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	3206      	adds	r2, #6
 800195e:	7812      	ldrb	r2, [r2, #0]
 8001960:	0912      	lsrs	r2, r2, #4
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	4313      	orrs	r3, r2
 8001966:	461a      	mov	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	601a      	str	r2, [r3, #0]
    *y = (uint32_t)buffer[2] << 12 | (uint32_t)buffer[3] << 4 | (uint32_t)buffer[7] >> 4;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3302      	adds	r3, #2
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	031a      	lsls	r2, r3, #12
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	3303      	adds	r3, #3
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	4313      	orrs	r3, r2
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	3207      	adds	r2, #7
 8001982:	7812      	ldrb	r2, [r2, #0]
 8001984:	0912      	lsrs	r2, r2, #4
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	4313      	orrs	r3, r2
 800198a:	461a      	mov	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	601a      	str	r2, [r3, #0]
    *z = (uint32_t)buffer[4] << 12 | (uint32_t)buffer[5] << 4 | (uint32_t)buffer[8] >> 4;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3304      	adds	r3, #4
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	031a      	lsls	r2, r3, #12
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3305      	adds	r3, #5
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	4313      	orrs	r3, r2
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	3208      	adds	r2, #8
 80019a6:	7812      	ldrb	r2, [r2, #0]
 80019a8:	0912      	lsrs	r2, r2, #4
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	4313      	orrs	r3, r2
 80019ae:	461a      	mov	r2, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	601a      	str	r2, [r3, #0]
    
    // Fix center offsets (subtract 2^19)
    *x -= MMC56X3_CENTER_OFFSET;
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f5a3 2200 	sub.w	r2, r3, #524288	@ 0x80000
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	601a      	str	r2, [r3, #0]
    *y -= MMC56X3_CENTER_OFFSET;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f5a3 2200 	sub.w	r2, r3, #524288	@ 0x80000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	601a      	str	r2, [r3, #0]
    *z -= MMC56X3_CENTER_OFFSET;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f5a3 2200 	sub.w	r2, r3, #524288	@ 0x80000
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	601a      	str	r2, [r3, #0]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <MMC56X3_Init>:

BIOME_Error_t MMC56X3_Init(void) 
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
    uint8_t product_id;

    if (mmc56x3_initialized) 
 80019e8:	4b24      	ldr	r3, [pc, #144]	@ (8001a7c <MMC56X3_Init+0x98>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d004      	beq.n	80019fa <MMC56X3_Init+0x16>
    {
        printf("MMC56X3: Sensor already initialized.\r\n");
 80019f0:	4823      	ldr	r0, [pc, #140]	@ (8001a80 <MMC56X3_Init+0x9c>)
 80019f2:	f008 fe7d 	bl	800a6f0 <puts>
        return SYS_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e03d      	b.n	8001a76 <MMC56X3_Init+0x92>
    }

    if (HAL_I2C_IsDeviceReady(&hi2c4, MMC56X3_I2C_ADDRESS, 3, 1000) != HAL_OK) 
 80019fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019fe:	2203      	movs	r2, #3
 8001a00:	2160      	movs	r1, #96	@ 0x60
 8001a02:	4820      	ldr	r0, [pc, #128]	@ (8001a84 <MMC56X3_Init+0xa0>)
 8001a04:	f003 fc52 	bl	80052ac <HAL_I2C_IsDeviceReady>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d005      	beq.n	8001a1a <MMC56X3_Init+0x36>
    {
        printf("MMC56X3: DEVICE IS NOT READY.\r\n");
 8001a0e:	481e      	ldr	r0, [pc, #120]	@ (8001a88 <MMC56X3_Init+0xa4>)
 8001a10:	f008 fe6e 	bl	800a6f0 <puts>
        return SENS_ERR_INIT;
 8001a14:	f242 0303 	movw	r3, #8195	@ 0x2003
 8001a18:	e02d      	b.n	8001a76 <MMC56X3_Init+0x92>
    }

    /* Reset the sensor */
	mmc56x3_write_reg(MMC56X3_CTRL1_REG, 0x80);
 8001a1a:	2180      	movs	r1, #128	@ 0x80
 8001a1c:	201c      	movs	r0, #28
 8001a1e:	f7ff ff35 	bl	800188c <mmc56x3_write_reg>


    /* Set measurement rate (100Hz) */
    if (mmc56x3_write_reg(MMC56X3_CTRL1_REG, 0x80) != HAL_OK)
 8001a22:	2180      	movs	r1, #128	@ 0x80
 8001a24:	201c      	movs	r0, #28
 8001a26:	f7ff ff31 	bl	800188c <mmc56x3_write_reg>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <MMC56X3_Init+0x58>
    {
        printf("MMC56X3: FAILED TO CONFIGURE CTRL1.\r\n");
 8001a30:	4816      	ldr	r0, [pc, #88]	@ (8001a8c <MMC56X3_Init+0xa8>)
 8001a32:	f008 fe5d 	bl	800a6f0 <puts>
        return SENS_ERR_INIT;
 8001a36:	f242 0303 	movw	r3, #8195	@ 0x2003
 8001a3a:	e01c      	b.n	8001a76 <MMC56X3_Init+0x92>
    }

    mmc56x3_write_reg(MMC56X3_CTRL0_REG, 0x08);  // Set
 8001a3c:	2108      	movs	r1, #8
 8001a3e:	201b      	movs	r0, #27
 8001a40:	f7ff ff24 	bl	800188c <mmc56x3_write_reg>
	HAL_Delay(1);
 8001a44:	2001      	movs	r0, #1
 8001a46:	f002 fc67 	bl	8004318 <HAL_Delay>
	mmc56x3_write_reg(MMC56X3_CTRL0_REG, 0x10);  // Reset
 8001a4a:	2110      	movs	r1, #16
 8001a4c:	201b      	movs	r0, #27
 8001a4e:	f7ff ff1d 	bl	800188c <mmc56x3_write_reg>
	HAL_Delay(1);
 8001a52:	2001      	movs	r0, #1
 8001a54:	f002 fc60 	bl	8004318 <HAL_Delay>

    mmc56x3_write_reg(MMC56X3_CTRL0_REG, 0x00);  // Clear continuous mode
 8001a58:	2100      	movs	r1, #0
 8001a5a:	201b      	movs	r0, #27
 8001a5c:	f7ff ff16 	bl	800188c <mmc56x3_write_reg>
    mmc56x3_write_reg(MMC56X3_CTRL2_REG, 0x00);  // Clear CMM enable
 8001a60:	2100      	movs	r1, #0
 8001a62:	201d      	movs	r0, #29
 8001a64:	f7ff ff12 	bl	800188c <mmc56x3_write_reg>
//		printf("MMC56X3: WRONG PRODUCT ID: 0x%02X (expected 0x%02X)\r\n",
//			   product_id, MMC56X3_CHIP_ID);
//		return SENS_ERR_INIT;
//	}

    printf("MMC56X3: INITIALIZED SUCCESSFULLY.\r\n");
 8001a68:	4809      	ldr	r0, [pc, #36]	@ (8001a90 <MMC56X3_Init+0xac>)
 8001a6a:	f008 fe41 	bl	800a6f0 <puts>
    mmc56x3_initialized = true;
 8001a6e:	4b03      	ldr	r3, [pc, #12]	@ (8001a7c <MMC56X3_Init+0x98>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	701a      	strb	r2, [r3, #0]
    return SYS_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	24000385 	.word	0x24000385
 8001a80:	0800cc2c 	.word	0x0800cc2c
 8001a84:	24000248 	.word	0x24000248
 8001a88:	0800cc54 	.word	0x0800cc54
 8001a8c:	0800cc74 	.word	0x0800cc74
 8001a90:	0800cc9c 	.word	0x0800cc9c

08001a94 <MMC56X3_ReadData>:

BIOME_Error_t MMC56X3_ReadData(MMC56X3_Data_t *data) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
    if (!mmc56x3_initialized) { return SENS_ERR_NOT_RDY; }
 8001a9c:	4b24      	ldr	r3, [pc, #144]	@ (8001b30 <MMC56X3_ReadData+0x9c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	f083 0301 	eor.w	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <MMC56X3_ReadData+0x1c>
 8001aaa:	f242 0302 	movw	r3, #8194	@ 0x2002
 8001aae:	e03a      	b.n	8001b26 <MMC56X3_ReadData+0x92>
    if (!data) { return SYS_ERR_NULL_PTR; }
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d102      	bne.n	8001abc <MMC56X3_ReadData+0x28>
 8001ab6:	f241 0301 	movw	r3, #4097	@ 0x1001
 8001aba:	e034      	b.n	8001b26 <MMC56X3_ReadData+0x92>
    
    uint8_t read_buf[9];
    uint8_t status;

    mmc56x3_write_reg(MMC56X3_CTRL0_REG, MMC56X3_CMD_MEASURE);
 8001abc:	2101      	movs	r1, #1
 8001abe:	201b      	movs	r0, #27
 8001ac0:	f7ff fee4 	bl	800188c <mmc56x3_write_reg>

    do
    {
    	HAL_Delay(5);
 8001ac4:	2005      	movs	r0, #5
 8001ac6:	f002 fc27 	bl	8004318 <HAL_Delay>
    	mmc56x3_read_reg(MMC56X3_STATUS_REG, &status);
 8001aca:	f107 030b 	add.w	r3, r7, #11
 8001ace:	4619      	mov	r1, r3
 8001ad0:	2018      	movs	r0, #24
 8001ad2:	f7ff fef9 	bl	80018c8 <mmc56x3_read_reg>
    } while (!(status & 0x40)); /* bit gets set when done */
 8001ad6:	7afb      	ldrb	r3, [r7, #11]
 8001ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f1      	beq.n	8001ac4 <MMC56X3_ReadData+0x30>


    /* Read 9 bytes (3 bytes per axis) */
    if (mmc56x3_read_multiple(MMC56X3_OUT_X_L, read_buf, 9) != HAL_OK)
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	2209      	movs	r2, #9
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff ff09 	bl	8001900 <mmc56x3_read_multiple>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <MMC56X3_ReadData+0x6c>
    {
        printf("MMC56X3_ReadData: READ COMMAND FAILED.\r\n");
 8001af4:	480f      	ldr	r0, [pc, #60]	@ (8001b34 <MMC56X3_ReadData+0xa0>)
 8001af6:	f008 fdfb 	bl	800a6f0 <puts>
        return SENS_ERR_NOT_RDY;
 8001afa:	f242 0302 	movw	r3, #8194	@ 0x2002
 8001afe:	e012      	b.n	8001b26 <MMC56X3_ReadData+0x92>
    }

    mmc56x3_convert_20bit(read_buf, &data->x_magnetic, &data->y_magnetic, &data->z_magnetic);
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	1d1a      	adds	r2, r3, #4
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3308      	adds	r3, #8
 8001b0a:	f107 000c 	add.w	r0, r7, #12
 8001b0e:	f7ff ff15 	bl	800193c <mmc56x3_convert_20bit>
    data->data_valid = 1;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	735a      	strb	r2, [r3, #13]

    /* Read temperature */
    mmc56x3_read_reg(MMC56X3_OUT_TEMP, &data->temperature);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	330c      	adds	r3, #12
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	2009      	movs	r0, #9
 8001b20:	f7ff fed2 	bl	80018c8 <mmc56x3_read_reg>

    return SYS_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	24000385 	.word	0x24000385
 8001b34:	0800ccc0 	.word	0x0800ccc0

08001b38 <mpl3115a2_write_reg>:
#include "sensors/mpl3115a2.h"

static bool mpl3115a2_initialized = false;

static HAL_StatusTypeDef mpl3115a2_write_reg(uint8_t reg, uint8_t val)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af04      	add	r7, sp, #16
 8001b3e:	4603      	mov	r3, r0
 8001b40:	460a      	mov	r2, r1
 8001b42:	71fb      	strb	r3, [r7, #7]
 8001b44:	4613      	mov	r3, r2
 8001b46:	71bb      	strb	r3, [r7, #6]
	return HAL_I2C_Mem_Write(&hi2c4, MPL3115A2_I2C_ADDRESS, reg, 1, &val, 1, 1000);
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b50:	9302      	str	r3, [sp, #8]
 8001b52:	2301      	movs	r3, #1
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	1dbb      	adds	r3, r7, #6
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	21c0      	movs	r1, #192	@ 0xc0
 8001b5e:	4804      	ldr	r0, [pc, #16]	@ (8001b70 <mpl3115a2_write_reg+0x38>)
 8001b60:	f003 f976 	bl	8004e50 <HAL_I2C_Mem_Write>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	24000248 	.word	0x24000248

08001b74 <mpl3115a2_read_reg>:
{
	return HAL_I2C_Mem_Write(&hi2c4, MPL3115A2_I2C_ADDRESS, reg, 1, val, len, 1000);
}

static HAL_StatusTypeDef mpl3115a2_read_reg(uint8_t reg, uint8_t *val)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af04      	add	r7, sp, #16
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	71fb      	strb	r3, [r7, #7]
	return HAL_I2C_Mem_Read(&hi2c4, MPL3115A2_I2C_ADDRESS, reg, 1, val, 1, 1000);
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b88:	9302      	str	r3, [sp, #8]
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	9301      	str	r3, [sp, #4]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2301      	movs	r3, #1
 8001b94:	21c0      	movs	r1, #192	@ 0xc0
 8001b96:	4804      	ldr	r0, [pc, #16]	@ (8001ba8 <mpl3115a2_read_reg+0x34>)
 8001b98:	f003 fa6e 	bl	8005078 <HAL_I2C_Mem_Read>
 8001b9c:	4603      	mov	r3, r0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	24000248 	.word	0x24000248

08001bac <mpl3115a2_read_multiple_reg>:

/* length is the number of bytes to read*/
static HAL_StatusTypeDef mpl3115a2_read_multiple_reg(uint8_t reg, uint8_t *val, uint8_t len)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af04      	add	r7, sp, #16
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	71fb      	strb	r3, [r7, #7]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	71bb      	strb	r3, [r7, #6]
	return HAL_I2C_Mem_Read(&hi2c4, MPL3115A2_I2C_ADDRESS, reg, 1, val, len, 1000);
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	79bb      	ldrb	r3, [r7, #6]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001bc8:	9102      	str	r1, [sp, #8]
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	21c0      	movs	r1, #192	@ 0xc0
 8001bd4:	4803      	ldr	r0, [pc, #12]	@ (8001be4 <mpl3115a2_read_multiple_reg+0x38>)
 8001bd6:	f003 fa4f 	bl	8005078 <HAL_I2C_Mem_Read>
 8001bda:	4603      	mov	r3, r0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	24000248 	.word	0x24000248

08001be8 <mpl3115a2_is_conversion_complete>:

static HAL_StatusTypeDef mpl3115a2_is_conversion_complete(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	71fb      	strb	r3, [r7, #7]
	if (mpl3115a2_read_reg(MPL3115A2_REGISTER_STATUS, &status) != HAL_OK)
 8001bf2:	1dfb      	adds	r3, r7, #7
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f7ff ffbc 	bl	8001b74 <mpl3115a2_read_reg>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <mpl3115a2_is_conversion_complete+0x1e>
	{
		return false;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e007      	b.n	8001c16 <mpl3115a2_is_conversion_complete+0x2e>
	}

	return ((status & MPL3115A2_REGISTER_STATUS_PTDR) != 0);
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf14      	ite	ne
 8001c10:	2301      	movne	r3, #1
 8001c12:	2300      	moveq	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <mpl3115a2_initialize_read>:

static void mpl3115a2_initialize_read(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
	uint8_t ctrl_reg1 = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	71fb      	strb	r3, [r7, #7]

	do {
		if (mpl3115a2_read_reg(MPL3115A2_CTRL_REG1, &ctrl_reg1) != HAL_OK)
 8001c2a:	1dfb      	adds	r3, r7, #7
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	2026      	movs	r0, #38	@ 0x26
 8001c30:	f7ff ffa0 	bl	8001b74 <mpl3115a2_read_reg>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d115      	bne.n	8001c66 <mpl3115a2_initialize_read+0x46>
		{
			return;
		}
	} while (ctrl_reg1 & MPL3115A2_CTRL_REG1_OST);
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1f2      	bne.n	8001c2a <mpl3115a2_initialize_read+0xa>

	ctrl_reg1 |= MPL3115A2_CTRL_REG1_OST;
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	f043 0302 	orr.w	r3, r3, #2
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	71fb      	strb	r3, [r7, #7]
	if (mpl3115a2_write_reg(MPL3115A2_CTRL_REG1, ctrl_reg1))
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	4619      	mov	r1, r3
 8001c52:	2026      	movs	r0, #38	@ 0x26
 8001c54:	f7ff ff70 	bl	8001b38 <mpl3115a2_write_reg>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <mpl3115a2_initialize_read+0x4a>
	{
		printf("MPL3115A2: Error initializing read on MPL3115A2\r\n");
 8001c5e:	4805      	ldr	r0, [pc, #20]	@ (8001c74 <mpl3115a2_initialize_read+0x54>)
 8001c60:	f008 fd46 	bl	800a6f0 <puts>
	}
	return;
 8001c64:	e001      	b.n	8001c6a <mpl3115a2_initialize_read+0x4a>
			return;
 8001c66:	bf00      	nop
 8001c68:	e000      	b.n	8001c6c <mpl3115a2_initialize_read+0x4c>
	return;
 8001c6a:	bf00      	nop
}
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	0800cdbc 	.word	0x0800cdbc

08001c78 <MPL3115A2_Init>:

BIOME_Error_t MPL3115A2_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
	uint8_t whoami = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	71bb      	strb	r3, [r7, #6]
	uint8_t ctrl_reg1 = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	717b      	strb	r3, [r7, #5]
	uint8_t pt_data_cfg;
	uint8_t set_press_buf[3];
	
	if (mpl3115a2_initialized) { return SYS_OK; }
 8001c86:	4b38      	ldr	r3, [pc, #224]	@ (8001d68 <MPL3115A2_Init+0xf0>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MPL3115A2_Init+0x1a>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e066      	b.n	8001d60 <MPL3115A2_Init+0xe8>
	
	if (HAL_I2C_IsDeviceReady(&hi2c4, MPL3115A2_I2C_ADDRESS, 3, 1000) != HAL_OK)
 8001c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c96:	2203      	movs	r2, #3
 8001c98:	21c0      	movs	r1, #192	@ 0xc0
 8001c9a:	4834      	ldr	r0, [pc, #208]	@ (8001d6c <MPL3115A2_Init+0xf4>)
 8001c9c:	f003 fb06 	bl	80052ac <HAL_I2C_IsDeviceReady>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <MPL3115A2_Init+0x3a>
	{
		printf("MPL3115A2: INITIALIZATION FAILED.\r\n");
 8001ca6:	4832      	ldr	r0, [pc, #200]	@ (8001d70 <MPL3115A2_Init+0xf8>)
 8001ca8:	f008 fd22 	bl	800a6f0 <puts>
		return SENS_ERR_INIT;
 8001cac:	f242 0303 	movw	r3, #8195	@ 0x2003
 8001cb0:	e056      	b.n	8001d60 <MPL3115A2_Init+0xe8>
	}
	
	if (mpl3115a2_read_reg(MPL3115A2_WHOAMI, &whoami) != HAL_OK)
 8001cb2:	1dbb      	adds	r3, r7, #6
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	200c      	movs	r0, #12
 8001cb8:	f7ff ff5c 	bl	8001b74 <mpl3115a2_read_reg>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <MPL3115A2_Init+0x56>
	{
		printf("MPL3115A2: READ WHOAMI FAILED.\r\n");
 8001cc2:	482c      	ldr	r0, [pc, #176]	@ (8001d74 <MPL3115A2_Init+0xfc>)
 8001cc4:	f008 fd14 	bl	800a6f0 <puts>
		return SENS_ERR_INIT;
 8001cc8:	f242 0303 	movw	r3, #8195	@ 0x2003
 8001ccc:	e048      	b.n	8001d60 <MPL3115A2_Init+0xe8>
	}

	if (whoami != MPL3115A2_WHOAMI_VALUE)
 8001cce:	79bb      	ldrb	r3, [r7, #6]
 8001cd0:	2bc4      	cmp	r3, #196	@ 0xc4
 8001cd2:	d008      	beq.n	8001ce6 <MPL3115A2_Init+0x6e>
	{
		printf("MPL3115A2: WRONG WHOAMI: 0x%02X (expected 0x%02X).\r\n", whoami, MPL3115A2_WHOAMI_VALUE);
 8001cd4:	79bb      	ldrb	r3, [r7, #6]
 8001cd6:	22c4      	movs	r2, #196	@ 0xc4
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4827      	ldr	r0, [pc, #156]	@ (8001d78 <MPL3115A2_Init+0x100>)
 8001cdc:	f008 fca0 	bl	800a620 <iprintf>
		return SENS_ERR_INIT;
 8001ce0:	f242 0303 	movw	r3, #8195	@ 0x2003
 8001ce4:	e03c      	b.n	8001d60 <MPL3115A2_Init+0xe8>
//		printf("MPL3115A2: ERROR RESETTING MPL3115A2.\r\n");
//		return SENS_ERR_RST;
//	}

	do {
		HAL_Delay(10);
 8001ce6:	200a      	movs	r0, #10
 8001ce8:	f002 fb16 	bl	8004318 <HAL_Delay>
		if (mpl3115a2_read_reg(MPL3115A2_CTRL_REG1, &ctrl_reg1) != HAL_OK)
 8001cec:	1d7b      	adds	r3, r7, #5
 8001cee:	4619      	mov	r1, r3
 8001cf0:	2026      	movs	r0, #38	@ 0x26
 8001cf2:	f7ff ff3f 	bl	8001b74 <mpl3115a2_read_reg>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <MPL3115A2_Init+0x90>
		{
			printf("MPL3115A2: FAILED TO READ CTRL_REG1 WHILE RESETTING SENSOR.\r\n");
 8001cfc:	481f      	ldr	r0, [pc, #124]	@ (8001d7c <MPL3115A2_Init+0x104>)
 8001cfe:	f008 fcf7 	bl	800a6f0 <puts>
			return SENS_ERR_RST;
 8001d02:	f242 0305 	movw	r3, #8197	@ 0x2005
 8001d06:	e02b      	b.n	8001d60 <MPL3115A2_Init+0xe8>
		}
	} while (ctrl_reg1 & MPL3115A2_CTRL_REG1_RST);
 8001d08:	797b      	ldrb	r3, [r7, #5]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1e9      	bne.n	8001ce6 <MPL3115A2_Init+0x6e>
	

	ctrl_reg1 = MPL3115A2_CTRL_REG1_OS128 | MPL3115A2_CTRL_REG1_ALT;
 8001d12:	23b8      	movs	r3, #184	@ 0xb8
 8001d14:	717b      	strb	r3, [r7, #5]
	if (mpl3115a2_write_reg(MPL3115A2_CTRL_REG1, ctrl_reg1) != HAL_OK)
 8001d16:	797b      	ldrb	r3, [r7, #5]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	2026      	movs	r0, #38	@ 0x26
 8001d1c:	f7ff ff0c 	bl	8001b38 <mpl3115a2_write_reg>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <MPL3115A2_Init+0xba>
	{
		printf("MPL3115A2: ERROR SETTING OVERSAMPLING AND ALTITUDE MODE.\r\n");
 8001d26:	4816      	ldr	r0, [pc, #88]	@ (8001d80 <MPL3115A2_Init+0x108>)
 8001d28:	f008 fce2 	bl	800a6f0 <puts>
		return SENS_ERR_INIT;
 8001d2c:	f242 0303 	movw	r3, #8195	@ 0x2003
 8001d30:	e016      	b.n	8001d60 <MPL3115A2_Init+0xe8>
	}

	pt_data_cfg = MPL3115A2_PT_DATA_CFG_TDEFE | MPL3115A2_PT_DATA_CFG_PDEFE |
 8001d32:	2307      	movs	r3, #7
 8001d34:	71fb      	strb	r3, [r7, #7]
				  MPL3115A2_PT_DATA_CFG_DREM;

	if (mpl3115a2_write_reg(MPL3115A2_PT_DATA_CFG, pt_data_cfg) != HAL_OK)
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	2013      	movs	r0, #19
 8001d3c:	f7ff fefc 	bl	8001b38 <mpl3115a2_write_reg>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <MPL3115A2_Init+0xda>
	{
		printf("MPL3115A2: ERROR SETTING CONFIGURATION.\r\n");
 8001d46:	480f      	ldr	r0, [pc, #60]	@ (8001d84 <MPL3115A2_Init+0x10c>)
 8001d48:	f008 fcd2 	bl	800a6f0 <puts>
		return SENS_ERR_CONF;
 8001d4c:	f242 0304 	movw	r3, #8196	@ 0x2004
 8001d50:	e006      	b.n	8001d60 <MPL3115A2_Init+0xe8>
//	if (mpl3115a2_write_multiple_reg(MPL3115A2_BAR_IN_MSB, set_press_buf, 3) != HAL_OK)
//	{
//		printf("MPL3115A2: ERROR SETTING SEA LEVELPRESSURE.\r\n");
//	}

	printf("MPL3115A2: SUCCESSFULLY INITIALIZED.\r\n");
 8001d52:	480d      	ldr	r0, [pc, #52]	@ (8001d88 <MPL3115A2_Init+0x110>)
 8001d54:	f008 fccc 	bl	800a6f0 <puts>
	mpl3115a2_initialized = true;
 8001d58:	4b03      	ldr	r3, [pc, #12]	@ (8001d68 <MPL3115A2_Init+0xf0>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	701a      	strb	r2, [r3, #0]
	return SYS_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	24000386 	.word	0x24000386
 8001d6c:	24000248 	.word	0x24000248
 8001d70:	0800cdf0 	.word	0x0800cdf0
 8001d74:	0800ce14 	.word	0x0800ce14
 8001d78:	0800ce34 	.word	0x0800ce34
 8001d7c:	0800ce6c 	.word	0x0800ce6c
 8001d80:	0800ceac 	.word	0x0800ceac
 8001d84:	0800cee8 	.word	0x0800cee8
 8001d88:	0800cf14 	.word	0x0800cf14

08001d8c <MPL3115A2_ReadData>:


BIOME_Error_t MPL3115A2_ReadData(MPL3115A2_Data_t *data)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	uint16_t timeout = 1000;
 8001d94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d98:	83fb      	strh	r3, [r7, #30]
	
	uint8_t buf[5] = {MPL3115A2_REGISTER_PRESSURE_MSB, 0, 0, 0, 0};
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	733b      	strb	r3, [r7, #12]

	uint32_t pressure_raw;
	uint32_t temp_raw;
	uint32_t altitude_raw;

	if (!mpl3115a2_initialized) { return SENS_ERR_NOT_RDY; }
 8001da2:	4b44      	ldr	r3, [pc, #272]	@ (8001eb4 <MPL3115A2_ReadData+0x128>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	f083 0301 	eor.w	r3, r3, #1
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <MPL3115A2_ReadData+0x2a>
 8001db0:	f242 0302 	movw	r3, #8194	@ 0x2002
 8001db4:	e079      	b.n	8001eaa <MPL3115A2_ReadData+0x11e>
	if (!data) { return SYS_ERR_NULL_PTR; }
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <MPL3115A2_ReadData+0x36>
 8001dbc:	f241 0301 	movw	r3, #4097	@ 0x1001
 8001dc0:	e073      	b.n	8001eaa <MPL3115A2_ReadData+0x11e>

	data->temperature = 0;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	605a      	str	r2, [r3, #4]
	data->pressure = 0;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
	data->altitude = 0;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]

	mpl3115a2_initialize_read();
 8001dda:	f7ff ff21 	bl	8001c20 <mpl3115a2_initialize_read>

	while (!mpl3115a2_is_conversion_complete() && timeout > 0)
 8001dde:	e005      	b.n	8001dec <MPL3115A2_ReadData+0x60>
	{
		HAL_Delay(10);
 8001de0:	200a      	movs	r0, #10
 8001de2:	f002 fa99 	bl	8004318 <HAL_Delay>
		timeout -= 10;
 8001de6:	8bfb      	ldrh	r3, [r7, #30]
 8001de8:	3b0a      	subs	r3, #10
 8001dea:	83fb      	strh	r3, [r7, #30]
	while (!mpl3115a2_is_conversion_complete() && timeout > 0)
 8001dec:	f7ff fefc 	bl	8001be8 <mpl3115a2_is_conversion_complete>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d102      	bne.n	8001dfc <MPL3115A2_ReadData+0x70>
 8001df6:	8bfb      	ldrh	r3, [r7, #30]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f1      	bne.n	8001de0 <MPL3115A2_ReadData+0x54>
	}

	if (timeout == 0)
 8001dfc:	8bfb      	ldrh	r3, [r7, #30]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d105      	bne.n	8001e0e <MPL3115A2_ReadData+0x82>
	{
		printf("MPL3115A2: CONVERSION TIMED OUT.\r\n");
 8001e02:	482d      	ldr	r0, [pc, #180]	@ (8001eb8 <MPL3115A2_ReadData+0x12c>)
 8001e04:	f008 fc74 	bl	800a6f0 <puts>
		return SENS_ERR_TIMEOUT;
 8001e08:	f242 0306 	movw	r3, #8198	@ 0x2006
 8001e0c:	e04d      	b.n	8001eaa <MPL3115A2_ReadData+0x11e>
	}

	if (mpl3115a2_read_multiple_reg(MPL3115A2_REGISTER_PRESSURE_MSB, buf, 5) != HAL_OK)
 8001e0e:	f107 0308 	add.w	r3, r7, #8
 8001e12:	2205      	movs	r2, #5
 8001e14:	4619      	mov	r1, r3
 8001e16:	2001      	movs	r0, #1
 8001e18:	f7ff fec8 	bl	8001bac <mpl3115a2_read_multiple_reg>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <MPL3115A2_ReadData+0xa2>
	{
		printf("MPL3115A2: ERROR READING DATA.\r\n");
 8001e22:	4826      	ldr	r0, [pc, #152]	@ (8001ebc <MPL3115A2_ReadData+0x130>)
 8001e24:	f008 fc64 	bl	800a6f0 <puts>
		return SENS_ERR_READ;
 8001e28:	f242 0307 	movw	r3, #8199	@ 0x2007
 8001e2c:	e03d      	b.n	8001eaa <MPL3115A2_ReadData+0x11e>
	}

	pressure_raw = ((uint32_t)buf[0] << 16) | ((uint32_t)buf[1] << 8) |
 8001e2e:	7a3b      	ldrb	r3, [r7, #8]
 8001e30:	041a      	lsls	r2, r3, #16
 8001e32:	7a7b      	ldrb	r3, [r7, #9]
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	4313      	orrs	r3, r2
			(uint32_t)buf[2];
 8001e38:	7aba      	ldrb	r2, [r7, #10]
	pressure_raw = ((uint32_t)buf[0] << 16) | ((uint32_t)buf[1] << 8) |
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
	temp_raw = ((uint32_t)buf[3] << 8) | (uint32_t)buf[4];
 8001e3e:	7afb      	ldrb	r3, [r7, #11]
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	7b3a      	ldrb	r2, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]
	altitude_raw = ((uint32_t)buf[0] << 24) | ((uint32_t)buf[1] << 16) |
 8001e48:	7a3b      	ldrb	r3, [r7, #8]
 8001e4a:	061a      	lsls	r2, r3, #24
 8001e4c:	7a7b      	ldrb	r3, [r7, #9]
 8001e4e:	041b      	lsls	r3, r3, #16
 8001e50:	431a      	orrs	r2, r3
			((uint32_t)buf[2] << 8);
 8001e52:	7abb      	ldrb	r3, [r7, #10]
 8001e54:	021b      	lsls	r3, r3, #8
	altitude_raw = ((uint32_t)buf[0] << 24) | ((uint32_t)buf[1] << 16) |
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]

	data->pressure = (float)pressure_raw / 6400.0f;
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e64:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001ec0 <MPL3115A2_ReadData+0x134>
 8001e68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	edc3 7a00 	vstr	s15, [r3]
	data->temperature = (float)temp_raw / 256.0f;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e7c:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001ec4 <MPL3115A2_ReadData+0x138>
 8001e80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	edc3 7a01 	vstr	s15, [r3, #4]
	data->altitude = (float)altitude_raw / 65536.0f;
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	ee07 3a90 	vmov	s15, r3
 8001e90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e94:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001ec8 <MPL3115A2_ReadData+0x13c>
 8001e98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	edc3 7a02 	vstr	s15, [r3, #8]

	data->data_valid = 1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	731a      	strb	r2, [r3, #12]

	return SYS_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3720      	adds	r7, #32
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	24000386 	.word	0x24000386
 8001eb8:	0800cf3c 	.word	0x0800cf3c
 8001ebc:	0800cf60 	.word	0x0800cf60
 8001ec0:	45c80000 	.word	0x45c80000
 8001ec4:	43800000 	.word	0x43800000
 8001ec8:	47800000 	.word	0x47800000

08001ecc <sgp30_write_cmd>:
extern I2C_HandleTypeDef hi2c4;

static bool sgp30_initialized = false;

static HAL_StatusTypeDef sgp30_write_cmd(uint16_t cmd)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80fb      	strh	r3, [r7, #6]
	/* Build up a two byte buffer for this 16 bit command */
	uint8_t cmd_buf[2] = {(cmd >> 8) & 0xFF, cmd & 0xFF};
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	733b      	strb	r3, [r7, #12]
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(&hi2c4, SGP30_I2C_ADDRESS, cmd_buf, 2, 1000);
 8001ee6:	f107 020c 	add.w	r2, r7, #12
 8001eea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	21b0      	movs	r1, #176	@ 0xb0
 8001ef4:	4803      	ldr	r0, [pc, #12]	@ (8001f04 <sgp30_write_cmd+0x38>)
 8001ef6:	f002 fd9d 	bl	8004a34 <HAL_I2C_Master_Transmit>
 8001efa:	4603      	mov	r3, r0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	24000248 	.word	0x24000248

08001f08 <sgp30_read_data>:

static HAL_StatusTypeDef sgp30_read_data(uint8_t *data, uint16_t len)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
	return HAL_I2C_Master_Receive(&hi2c4, SGP30_I2C_ADDRESS, data, len, 1000);
 8001f14:	887b      	ldrh	r3, [r7, #2]
 8001f16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f1a:	9200      	str	r2, [sp, #0]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	21b0      	movs	r1, #176	@ 0xb0
 8001f20:	4803      	ldr	r0, [pc, #12]	@ (8001f30 <sgp30_read_data+0x28>)
 8001f22:	f002 fe9f 	bl	8004c64 <HAL_I2C_Master_Receive>
 8001f26:	4603      	mov	r3, r0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	24000248 	.word	0x24000248

08001f34 <sgp30_crc8>:
/*
 * The SGP30 sends data with a CRC8 checksum, so we might as well handle that
 * and attempt to filter out bad data caused by communication issues.
 */
static uint8_t sgp30_crc8(const uint8_t *data, uint8_t len)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0xFF;
 8001f40:	23ff      	movs	r3, #255	@ 0xff
 8001f42:	73fb      	strb	r3, [r7, #15]

	for (uint8_t idx = 0; idx < len; idx++)
 8001f44:	2300      	movs	r3, #0
 8001f46:	73bb      	strb	r3, [r7, #14]
 8001f48:	e022      	b.n	8001f90 <sgp30_crc8+0x5c>
	{
		crc ^= data[idx];
 8001f4a:	7bbb      	ldrb	r3, [r7, #14]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	4413      	add	r3, r2
 8001f50:	781a      	ldrb	r2, [r3, #0]
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	4053      	eors	r3, r2
 8001f56:	73fb      	strb	r3, [r7, #15]
		for (uint8_t bit = 8; bit > 0; bit--)
 8001f58:	2308      	movs	r3, #8
 8001f5a:	737b      	strb	r3, [r7, #13]
 8001f5c:	e012      	b.n	8001f84 <sgp30_crc8+0x50>
		{
			if (crc & 0x80)
 8001f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	da08      	bge.n	8001f78 <sgp30_crc8+0x44>
			{
			crc = (crc << 1) ^ 0x31;
 8001f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	b25b      	sxtb	r3, r3
 8001f6e:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8001f72:	b25b      	sxtb	r3, r3
 8001f74:	73fb      	strb	r3, [r7, #15]
 8001f76:	e002      	b.n	8001f7e <sgp30_crc8+0x4a>
			} else {
				crc = (crc << 1);
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	73fb      	strb	r3, [r7, #15]
		for (uint8_t bit = 8; bit > 0; bit--)
 8001f7e:	7b7b      	ldrb	r3, [r7, #13]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	737b      	strb	r3, [r7, #13]
 8001f84:	7b7b      	ldrb	r3, [r7, #13]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1e9      	bne.n	8001f5e <sgp30_crc8+0x2a>
	for (uint8_t idx = 0; idx < len; idx++)
 8001f8a:	7bbb      	ldrb	r3, [r7, #14]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	73bb      	strb	r3, [r7, #14]
 8001f90:	7bba      	ldrb	r2, [r7, #14]
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d3d8      	bcc.n	8001f4a <sgp30_crc8+0x16>
			}
		}
	}
	return crc;
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <sgp30_check_crc>:

static bool sgp30_check_crc(const uint8_t *data)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	6078      	str	r0, [r7, #4]
	uint8_t calculated_crc = sgp30_crc8(data, 2);
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ffbe 	bl	8001f34 <sgp30_crc8>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	73fb      	strb	r3, [r7, #15]
	uint8_t received_crc = data[2];
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	73bb      	strb	r3, [r7, #14]

	if (calculated_crc != received_crc)
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	7bbb      	ldrb	r3, [r7, #14]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d00e      	beq.n	8001fea <sgp30_check_crc+0x42>
	{
		printf("SGP30: CRC Error: Expected 0x%02X, got 0x%02X for data [0x%2X, 0x%2X]\r\n",
 8001fcc:	7bf9      	ldrb	r1, [r7, #15]
 8001fce:	7bba      	ldrb	r2, [r7, #14]
				calculated_crc, received_crc, data[0], data[1]);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	781b      	ldrb	r3, [r3, #0]
		printf("SGP30: CRC Error: Expected 0x%02X, got 0x%02X for data [0x%2X, 0x%2X]\r\n",
 8001fd4:	4618      	mov	r0, r3
				calculated_crc, received_crc, data[0], data[1]);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	781b      	ldrb	r3, [r3, #0]
		printf("SGP30: CRC Error: Expected 0x%02X, got 0x%02X for data [0x%2X, 0x%2X]\r\n",
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4804      	ldr	r0, [pc, #16]	@ (8001ff4 <sgp30_check_crc+0x4c>)
 8001fe2:	f008 fb1d 	bl	800a620 <iprintf>
		return false;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <sgp30_check_crc+0x44>
	}
	return true;
 8001fea:	2301      	movs	r3, #1
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	0800d03c 	.word	0x0800d03c

08001ff8 <SGP30_Init>:


BIOME_Error_t SGP30_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	if (sgp30_initialized)
 8001ffc:	4b18      	ldr	r3, [pc, #96]	@ (8002060 <SGP30_Init+0x68>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d004      	beq.n	800200e <SGP30_Init+0x16>
	{
		printf("SGP30: Sensor already initialized.");
 8002004:	4817      	ldr	r0, [pc, #92]	@ (8002064 <SGP30_Init+0x6c>)
 8002006:	f008 fb0b 	bl	800a620 <iprintf>
		return SYS_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e026      	b.n	800205c <SGP30_Init+0x64>
	}

	if (HAL_I2C_IsDeviceReady(&hi2c4, SGP30_I2C_ADDRESS, 3, 1000) != HAL_OK)
 800200e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002012:	2203      	movs	r2, #3
 8002014:	21b0      	movs	r1, #176	@ 0xb0
 8002016:	4814      	ldr	r0, [pc, #80]	@ (8002068 <SGP30_Init+0x70>)
 8002018:	f003 f948 	bl	80052ac <HAL_I2C_IsDeviceReady>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d005      	beq.n	800202e <SGP30_Init+0x36>
	{
		printf("SGP30: DEVICE IS NOT READY.\r\n");
 8002022:	4812      	ldr	r0, [pc, #72]	@ (800206c <SGP30_Init+0x74>)
 8002024:	f008 fb64 	bl	800a6f0 <puts>
		return SENS_ERR_INIT;
 8002028:	f242 0303 	movw	r3, #8195	@ 0x2003
 800202c:	e016      	b.n	800205c <SGP30_Init+0x64>
	}

	if (sgp30_write_cmd(SGP30_CMD_IAQ_INIT) != HAL_OK)
 800202e:	f242 0003 	movw	r0, #8195	@ 0x2003
 8002032:	f7ff ff4b 	bl	8001ecc <sgp30_write_cmd>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <SGP30_Init+0x50>
	{
		printf("SGP30: IAQ INITIALIZATION FAILED.\r\n");
 800203c:	480c      	ldr	r0, [pc, #48]	@ (8002070 <SGP30_Init+0x78>)
 800203e:	f008 fb57 	bl	800a6f0 <puts>
		return SENS_ERR_INIT;
 8002042:	f242 0303 	movw	r3, #8195	@ 0x2003
 8002046:	e009      	b.n	800205c <SGP30_Init+0x64>
	}

	/* Wait 10ms for initialization */
	HAL_Delay(10);
 8002048:	200a      	movs	r0, #10
 800204a:	f002 f965 	bl	8004318 <HAL_Delay>

	printf("SGP30: SUCCESSFULLY INITIALIZED.\r\n");
 800204e:	4809      	ldr	r0, [pc, #36]	@ (8002074 <SGP30_Init+0x7c>)
 8002050:	f008 fb4e 	bl	800a6f0 <puts>
	sgp30_initialized = true;
 8002054:	4b02      	ldr	r3, [pc, #8]	@ (8002060 <SGP30_Init+0x68>)
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
	return SYS_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	bd80      	pop	{r7, pc}
 8002060:	24000387 	.word	0x24000387
 8002064:	0800d084 	.word	0x0800d084
 8002068:	24000248 	.word	0x24000248
 800206c:	0800d0a8 	.word	0x0800d0a8
 8002070:	0800d0c8 	.word	0x0800d0c8
 8002074:	0800d0ec 	.word	0x0800d0ec

08002078 <SGP30_ReadData>:


BIOME_Error_t SGP30_ReadData(SGP30_Data_t *data)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
    if (!sgp30_initialized) { return SENS_ERR_NOT_RDY; }
 8002080:	4b37      	ldr	r3, [pc, #220]	@ (8002160 <SGP30_ReadData+0xe8>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	f083 0301 	eor.w	r3, r3, #1
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <SGP30_ReadData+0x1c>
 800208e:	f242 0302 	movw	r3, #8194	@ 0x2002
 8002092:	e061      	b.n	8002158 <SGP30_ReadData+0xe0>
    if (!data) { return SYS_ERR_NULL_PTR; }
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d102      	bne.n	80020a0 <SGP30_ReadData+0x28>
 800209a:	f241 0301 	movw	r3, #4097	@ 0x1001
 800209e:	e05b      	b.n	8002158 <SGP30_ReadData+0xe0>

    uint8_t read_buf[6];

    // Send measure command
    if (sgp30_write_cmd(SGP30_CMD_IAQ_MEASURE) != HAL_OK)
 80020a0:	f242 0008 	movw	r0, #8200	@ 0x2008
 80020a4:	f7ff ff12 	bl	8001ecc <sgp30_write_cmd>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <SGP30_ReadData+0x42>
    {
        printf("SGP30_ReadData: MEASURE COMMAND FAILED.\r\n");
 80020ae:	482d      	ldr	r0, [pc, #180]	@ (8002164 <SGP30_ReadData+0xec>)
 80020b0:	f008 fb1e 	bl	800a6f0 <puts>
        return SENS_ERR_NOT_RDY;
 80020b4:	f242 0302 	movw	r3, #8194	@ 0x2002
 80020b8:	e04e      	b.n	8002158 <SGP30_ReadData+0xe0>
    }

    // Wait for measurement (12ms)
    HAL_Delay(15);
 80020ba:	200f      	movs	r0, #15
 80020bc:	f002 f92c 	bl	8004318 <HAL_Delay>

    // Read 6 bytes for CO2 (high), CO2 (low), CRC, TVOC (high), TVOC (low), CRC
    if (sgp30_read_data(read_buf, 6) != HAL_OK)
 80020c0:	f107 0308 	add.w	r3, r7, #8
 80020c4:	2106      	movs	r1, #6
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff1e 	bl	8001f08 <sgp30_read_data>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <SGP30_ReadData+0x66>
    {
        printf("SGP30_ReadData: Read failed\r\n");
 80020d2:	4825      	ldr	r0, [pc, #148]	@ (8002168 <SGP30_ReadData+0xf0>)
 80020d4:	f008 fb0c 	bl	800a6f0 <puts>
        return SENS_ERR_NOT_RDY;
 80020d8:	f242 0302 	movw	r3, #8194	@ 0x2002
 80020dc:	e03c      	b.n	8002158 <SGP30_ReadData+0xe0>
    }

    // Verify the CRC for CO2 data (bytes 0-2, with byte 2 being the CRC checksum)
    if (!sgp30_check_crc(&read_buf[0]))
 80020de:	f107 0308 	add.w	r3, r7, #8
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff ff60 	bl	8001fa8 <sgp30_check_crc>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f083 0301 	eor.w	r3, r3, #1
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <SGP30_ReadData+0x88>
    {
        printf("SGP30_ReadData: CO2 CRC verification failed\r\n");
 80020f4:	481d      	ldr	r0, [pc, #116]	@ (800216c <SGP30_ReadData+0xf4>)
 80020f6:	f008 fafb 	bl	800a6f0 <puts>
        return SENS_ERR_NOT_RDY;
 80020fa:	f242 0302 	movw	r3, #8194	@ 0x2002
 80020fe:	e02b      	b.n	8002158 <SGP30_ReadData+0xe0>
    }

    // Verify CRC for TVOC data (bytes 3-5, with byte 5 being the CRC checksum)
    if (!sgp30_check_crc(&read_buf[3]))
 8002100:	f107 0308 	add.w	r3, r7, #8
 8002104:	3303      	adds	r3, #3
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ff4e 	bl	8001fa8 <sgp30_check_crc>
 800210c:	4603      	mov	r3, r0
 800210e:	f083 0301 	eor.w	r3, r3, #1
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <SGP30_ReadData+0xac>
    {
        printf("SGP30_ReadData: TVOC CRC verification failed\r\n");
 8002118:	4815      	ldr	r0, [pc, #84]	@ (8002170 <SGP30_ReadData+0xf8>)
 800211a:	f008 fae9 	bl	800a6f0 <puts>
        return SENS_ERR_NOT_RDY;
 800211e:	f242 0302 	movw	r3, #8194	@ 0x2002
 8002122:	e019      	b.n	8002158 <SGP30_ReadData+0xe0>
    }


    data->co2_equiv_ppm = (read_buf[0] << 8) | read_buf[1];
 8002124:	7a3b      	ldrb	r3, [r7, #8]
 8002126:	b21b      	sxth	r3, r3
 8002128:	021b      	lsls	r3, r3, #8
 800212a:	b21a      	sxth	r2, r3
 800212c:	7a7b      	ldrb	r3, [r7, #9]
 800212e:	b21b      	sxth	r3, r3
 8002130:	4313      	orrs	r3, r2
 8002132:	b21b      	sxth	r3, r3
 8002134:	b29a      	uxth	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	801a      	strh	r2, [r3, #0]
    data->tvoc_ppb = (read_buf[3] << 8) | read_buf[4];
 800213a:	7afb      	ldrb	r3, [r7, #11]
 800213c:	b21b      	sxth	r3, r3
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	b21a      	sxth	r2, r3
 8002142:	7b3b      	ldrb	r3, [r7, #12]
 8002144:	b21b      	sxth	r3, r3
 8002146:	4313      	orrs	r3, r2
 8002148:	b21b      	sxth	r3, r3
 800214a:	b29a      	uxth	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	805a      	strh	r2, [r3, #2]
    data->data_valid = 1;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	809a      	strh	r2, [r3, #4]

    return SYS_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	24000387 	.word	0x24000387
 8002164:	0800d110 	.word	0x0800d110
 8002168:	0800d13c 	.word	0x0800d13c
 800216c:	0800d15c 	.word	0x0800d15c
 8002170:	0800d18c 	.word	0x0800d18c

08002174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002174:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80021b0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002178:	f7fe fb4e 	bl	8000818 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800217c:	f7fe fa9e 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002180:	480c      	ldr	r0, [pc, #48]	@ (80021b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002182:	490d      	ldr	r1, [pc, #52]	@ (80021b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002184:	4a0d      	ldr	r2, [pc, #52]	@ (80021bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002188:	e002      	b.n	8002190 <LoopCopyDataInit>

0800218a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800218c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218e:	3304      	adds	r3, #4

08002190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002194:	d3f9      	bcc.n	800218a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002196:	4a0a      	ldr	r2, [pc, #40]	@ (80021c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002198:	4c0a      	ldr	r4, [pc, #40]	@ (80021c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800219c:	e001      	b.n	80021a2 <LoopFillZerobss>

0800219e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a0:	3204      	adds	r2, #4

080021a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a4:	d3fb      	bcc.n	800219e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021a6:	f008 fbdb 	bl	800a960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021aa:	f7fe fbd5 	bl	8000958 <main>
  bx  lr
 80021ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80021b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021b8:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 80021bc:	0800d6bc 	.word	0x0800d6bc
  ldr r2, =_sbss
 80021c0:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80021c4:	240004d8 	.word	0x240004d8

080021c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c8:	e7fe      	b.n	80021c8 <ADC3_IRQHandler>

080021ca <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f8fa 	bl	80023cc <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	20d0      	movs	r0, #208	@ 0xd0
 80021e0:	f000 f8b0 	bl	8002344 <bme68x_get_regs>
 80021e4:	4603      	mov	r3, r0
 80021e6:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 80021e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d114      	bne.n	800221a <bme68x_init+0x50>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b61      	cmp	r3, #97	@ 0x61
 80021f6:	d10e      	bne.n	8002216 <bme68x_init+0x4c>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f001 ffde 	bl	80041ba <read_variant_id>
 80021fe:	4603      	mov	r3, r0
 8002200:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 8002202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d107      	bne.n	800221a <bme68x_init+0x50>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f001 fec6 	bl	8003f9c <get_calib_data>
 8002210:	4603      	mov	r3, r0
 8002212:	73fb      	strb	r3, [r7, #15]
 8002214:	e001      	b.n	800221a <bme68x_init+0x50>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 8002216:	23fd      	movs	r3, #253	@ 0xfd
 8002218:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800221a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8002226:	b5b0      	push	{r4, r5, r7, lr}
 8002228:	b08a      	sub	sp, #40	@ 0x28
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002244:	6838      	ldr	r0, [r7, #0]
 8002246:	f001 fc87 	bl	8003b58 <null_ptr_check>
 800224a:	4603      	mov	r3, r0
 800224c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8002250:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002254:	2b00      	cmp	r3, #0
 8002256:	d16c      	bne.n	8002332 <bme68x_set_regs+0x10c>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d069      	beq.n	8002332 <bme68x_set_regs+0x10c>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d066      	beq.n	8002332 <bme68x_set_regs+0x10c>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d05d      	beq.n	8002326 <bme68x_set_regs+0x100>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b0a      	cmp	r3, #10
 800226e:	d85a      	bhi.n	8002326 <bme68x_set_regs+0x100>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8002270:	2300      	movs	r3, #0
 8002272:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002274:	e034      	b.n	80022e0 <bme68x_set_regs+0xba>
            {
                if (dev->intf == BME68X_SPI_INTF)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	7b1b      	ldrb	r3, [r3, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d118      	bne.n	80022b0 <bme68x_set_regs+0x8a>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 800227e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4413      	add	r3, r2
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	6839      	ldr	r1, [r7, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f001 fba4 	bl	80039d6 <set_mem_page>
 800228e:	4603      	mov	r3, r0
 8002290:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8002294:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4413      	add	r3, r2
 800229a:	781a      	ldrb	r2, [r3, #0]
 800229c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	3328      	adds	r3, #40	@ 0x28
 80022a8:	443b      	add	r3, r7
 80022aa:	f803 2c18 	strb.w	r2, [r3, #-24]
 80022ae:	e009      	b.n	80022c4 <bme68x_set_regs+0x9e>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 80022b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	441a      	add	r2, r3
 80022b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	7812      	ldrb	r2, [r2, #0]
 80022bc:	3328      	adds	r3, #40	@ 0x28
 80022be:	443b      	add	r3, r7
 80022c0:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 80022c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	441a      	add	r2, r3
 80022ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	3301      	adds	r3, #1
 80022d0:	7812      	ldrb	r2, [r2, #0]
 80022d2:	3328      	adds	r3, #40	@ 0x28
 80022d4:	443b      	add	r3, r7
 80022d6:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 80022da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022dc:	3301      	adds	r3, #1
 80022de:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80022e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d8c6      	bhi.n	8002276 <bme68x_set_regs+0x50>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 80022e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d11e      	bne.n	800232e <bme68x_set_regs+0x108>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80022f4:	7c38      	ldrb	r0, [r7, #16]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	1e5a      	subs	r2, r3, #1
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685d      	ldr	r5, [r3, #4]
 8002300:	f107 0310 	add.w	r3, r7, #16
 8002304:	1c59      	adds	r1, r3, #1
 8002306:	462b      	mov	r3, r5
 8002308:	47a0      	blx	r4
 800230a:	4603      	mov	r3, r0
 800230c:	461a      	mov	r2, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 800231a:	2b00      	cmp	r3, #0
 800231c:	d007      	beq.n	800232e <bme68x_set_regs+0x108>
                {
                    rslt = BME68X_E_COM_FAIL;
 800231e:	23fe      	movs	r3, #254	@ 0xfe
 8002320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (rslt == BME68X_OK)
 8002324:	e003      	b.n	800232e <bme68x_set_regs+0x108>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 8002326:	23fc      	movs	r3, #252	@ 0xfc
 8002328:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 800232c:	e004      	b.n	8002338 <bme68x_set_regs+0x112>
            if (rslt == BME68X_OK)
 800232e:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8002330:	e002      	b.n	8002338 <bme68x_set_regs+0x112>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8002332:	23ff      	movs	r3, #255	@ 0xff
 8002334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8002338:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800233c:	4618      	mov	r0, r3
 800233e:	3728      	adds	r7, #40	@ 0x28
 8002340:	46bd      	mov	sp, r7
 8002342:	bdb0      	pop	{r4, r5, r7, pc}

08002344 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	4603      	mov	r3, r0
 8002352:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002354:	6838      	ldr	r0, [r7, #0]
 8002356:	f001 fbff 	bl	8003b58 <null_ptr_check>
 800235a:	4603      	mov	r3, r0
 800235c:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 800235e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d12a      	bne.n	80023bc <bme68x_get_regs+0x78>
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d027      	beq.n	80023bc <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	7b1b      	ldrb	r3, [r3, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10e      	bne.n	8002392 <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	6839      	ldr	r1, [r7, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f001 fb2c 	bl	80039d6 <set_mem_page>
 800237e:	4603      	mov	r3, r0
 8002380:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 8002382:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d103      	bne.n	8002392 <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002390:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	7bf8      	ldrb	r0, [r7, #15]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	68b9      	ldr	r1, [r7, #8]
 80023a0:	47a0      	blx	r4
 80023a2:	4603      	mov	r3, r0
 80023a4:	461a      	mov	r2, r3
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d004      	beq.n	80023c0 <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 80023b6:	23fe      	movs	r3, #254	@ 0xfe
 80023b8:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 80023ba:	e001      	b.n	80023c0 <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80023bc:	23ff      	movs	r3, #255	@ 0xff
 80023be:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80023c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	371c      	adds	r7, #28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd90      	pop	{r4, r7, pc}

080023cc <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 80023d4:	23e0      	movs	r3, #224	@ 0xe0
 80023d6:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 80023d8:	23b6      	movs	r3, #182	@ 0xb6
 80023da:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f001 fbbb 	bl	8003b58 <null_ptr_check>
 80023e2:	4603      	mov	r3, r0
 80023e4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 80023e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d12b      	bne.n	8002446 <bme68x_soft_reset+0x7a>
    {
        if (dev->intf == BME68X_SPI_INTF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	7b1b      	ldrb	r3, [r3, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d104      	bne.n	8002400 <bme68x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f001 fb52 	bl	8003aa0 <get_mem_page>
 80023fc:	4603      	mov	r3, r0
 80023fe:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 8002400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d11e      	bne.n	8002446 <bme68x_soft_reset+0x7a>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8002408:	f107 010d 	add.w	r1, r7, #13
 800240c:	f107 000e 	add.w	r0, r7, #14
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f7ff ff07 	bl	8002226 <bme68x_set_regs>
 8002418:	4603      	mov	r3, r0
 800241a:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME68X_OK)
 800241c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d110      	bne.n	8002446 <bme68x_soft_reset+0x7a>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6852      	ldr	r2, [r2, #4]
 800242c:	4611      	mov	r1, r2
 800242e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002432:	4798      	blx	r3

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	7b1b      	ldrb	r3, [r3, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d104      	bne.n	8002446 <bme68x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f001 fb2f 	bl	8003aa0 <get_mem_page>
 8002442:	4603      	mov	r3, r0
 8002444:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8002446:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 800245e:	2300      	movs	r3, #0
 8002460:	77bb      	strb	r3, [r7, #30]
 8002462:	2301      	movs	r3, #1
 8002464:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8002466:	4a7f      	ldr	r2, [pc, #508]	@ (8002664 <bme68x_set_conf+0x210>)
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002470:	6018      	str	r0, [r3, #0]
 8002472:	3304      	adds	r3, #4
 8002474:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8002476:	f107 030c 	add.w	r3, r7, #12
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	711a      	strb	r2, [r3, #4]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8002480:	f107 031c 	add.w	r3, r7, #28
 8002484:	6839      	ldr	r1, [r7, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f94f 	bl	800272a <bme68x_get_op_mode>
 800248c:	4603      	mov	r3, r0
 800248e:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME68X_OK)
 8002490:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d105      	bne.n	80024a4 <bme68x_set_conf+0x50>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8002498:	6839      	ldr	r1, [r7, #0]
 800249a:	2000      	movs	r0, #0
 800249c:	f000 f8e4 	bl	8002668 <bme68x_set_op_mode>
 80024a0:	4603      	mov	r3, r0
 80024a2:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <bme68x_set_conf+0x5c>
    {
        rslt = BME68X_E_NULL_PTR;
 80024aa:	23ff      	movs	r3, #255	@ 0xff
 80024ac:	77fb      	strb	r3, [r7, #31]
 80024ae:	e0b7      	b.n	8002620 <bme68x_set_conf+0x1cc>
    }
    else if (rslt == BME68X_OK)
 80024b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 80b3 	bne.w	8002620 <bme68x_set_conf+0x1cc>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 80024ba:	7d38      	ldrb	r0, [r7, #20]
 80024bc:	f107 010c 	add.w	r1, r7, #12
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2205      	movs	r2, #5
 80024c4:	f7ff ff3e 	bl	8002344 <bme68x_get_regs>
 80024c8:	4603      	mov	r3, r0
 80024ca:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME68X_OK;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (rslt == BME68X_OK)
 80024d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d108      	bne.n	80024ee <bme68x_set_conf+0x9a>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3303      	adds	r3, #3
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	2107      	movs	r1, #7
 80024e4:	4618      	mov	r0, r3
 80024e6:	f001 fb0a 	bl	8003afe <boundary_check>
 80024ea:	4603      	mov	r3, r0
 80024ec:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80024ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d108      	bne.n	8002508 <bme68x_set_conf+0xb4>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3301      	adds	r3, #1
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	2105      	movs	r1, #5
 80024fe:	4618      	mov	r0, r3
 8002500:	f001 fafd 	bl	8003afe <boundary_check>
 8002504:	4603      	mov	r3, r0
 8002506:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8002508:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d108      	bne.n	8002522 <bme68x_set_conf+0xce>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3302      	adds	r3, #2
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	2105      	movs	r1, #5
 8002518:	4618      	mov	r0, r3
 800251a:	f001 faf0 	bl	8003afe <boundary_check>
 800251e:	4603      	mov	r3, r0
 8002520:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8002522:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d107      	bne.n	800253a <bme68x_set_conf+0xe6>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	2105      	movs	r1, #5
 8002530:	4618      	mov	r0, r3
 8002532:	f001 fae4 	bl	8003afe <boundary_check>
 8002536:	4603      	mov	r3, r0
 8002538:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 800253a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d108      	bne.n	8002554 <bme68x_set_conf+0x100>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3304      	adds	r3, #4
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	2108      	movs	r1, #8
 800254a:	4618      	mov	r0, r3
 800254c:	f001 fad7 	bl	8003afe <boundary_check>
 8002550:	4603      	mov	r3, r0
 8002552:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8002554:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d161      	bne.n	8002620 <bme68x_set_conf+0x1cc>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 800255c:	7c3b      	ldrb	r3, [r7, #16]
 800255e:	b25b      	sxtb	r3, r3
 8002560:	f023 031c 	bic.w	r3, r3, #28
 8002564:	b25a      	sxtb	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	78db      	ldrb	r3, [r3, #3]
 800256a:	b25b      	sxtb	r3, r3
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	b25b      	sxtb	r3, r3
 8002570:	f003 031c 	and.w	r3, r3, #28
 8002574:	b25b      	sxtb	r3, r3
 8002576:	4313      	orrs	r3, r2
 8002578:	b25b      	sxtb	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	b25b      	sxtb	r3, r3
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	b25a      	sxtb	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	785b      	ldrb	r3, [r3, #1]
 800258c:	b25b      	sxtb	r3, r3
 800258e:	015b      	lsls	r3, r3, #5
 8002590:	b25b      	sxtb	r3, r3
 8002592:	4313      	orrs	r3, r2
 8002594:	b25b      	sxtb	r3, r3
 8002596:	b2db      	uxtb	r3, r3
 8002598:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	b25b      	sxtb	r3, r3
 800259e:	f023 031c 	bic.w	r3, r3, #28
 80025a2:	b25a      	sxtb	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	789b      	ldrb	r3, [r3, #2]
 80025a8:	b25b      	sxtb	r3, r3
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	b25b      	sxtb	r3, r3
 80025ae:	f003 031c 	and.w	r3, r3, #28
 80025b2:	b25b      	sxtb	r3, r3
 80025b4:	4313      	orrs	r3, r2
 80025b6:	b25b      	sxtb	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 80025bc:	7b7b      	ldrb	r3, [r7, #13]
 80025be:	b25b      	sxtb	r3, r3
 80025c0:	f023 0307 	bic.w	r3, r3, #7
 80025c4:	b25a      	sxtb	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	b25b      	sxtb	r3, r3
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	b25b      	sxtb	r3, r3
 80025d2:	4313      	orrs	r3, r2
 80025d4:	b25b      	sxtb	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME68X_ODR_NONE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	791b      	ldrb	r3, [r3, #4]
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d004      	beq.n	80025ec <bme68x_set_conf+0x198>
            {
                odr20 = conf->odr;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	791b      	ldrb	r3, [r3, #4]
 80025e6:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 80025ec:	7c3b      	ldrb	r3, [r7, #16]
 80025ee:	b25b      	sxtb	r3, r3
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	b25a      	sxtb	r2, r3
 80025f6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80025fa:	015b      	lsls	r3, r3, #5
 80025fc:	b25b      	sxtb	r3, r3
 80025fe:	4313      	orrs	r3, r2
 8002600:	b25b      	sxtb	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8002606:	7b3b      	ldrb	r3, [r7, #12]
 8002608:	b25b      	sxtb	r3, r3
 800260a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800260e:	b25a      	sxtb	r2, r3
 8002610:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002614:	01db      	lsls	r3, r3, #7
 8002616:	b25b      	sxtb	r3, r3
 8002618:	4313      	orrs	r3, r2
 800261a:	b25b      	sxtb	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME68X_OK)
 8002620:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d109      	bne.n	800263c <bme68x_set_conf+0x1e8>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8002628:	f107 010c 	add.w	r1, r7, #12
 800262c:	f107 0014 	add.w	r0, r7, #20
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	2205      	movs	r2, #5
 8002634:	f7ff fdf7 	bl	8002226 <bme68x_set_regs>
 8002638:	4603      	mov	r3, r0
 800263a:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 800263c:	7f3b      	ldrb	r3, [r7, #28]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <bme68x_set_conf+0x204>
 8002642:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <bme68x_set_conf+0x204>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 800264a:	7f3b      	ldrb	r3, [r7, #28]
 800264c:	6839      	ldr	r1, [r7, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f80a 	bl	8002668 <bme68x_set_op_mode>
 8002654:	4603      	mov	r3, r0
 8002656:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002658:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3720      	adds	r7, #32
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	0800d234 	.word	0x0800d234

08002668 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	6039      	str	r1, [r7, #0]
 8002672:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8002678:	2374      	movs	r3, #116	@ 0x74
 800267a:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 800267c:	f107 010d 	add.w	r1, r7, #13
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2201      	movs	r2, #1
 8002684:	2074      	movs	r0, #116	@ 0x74
 8002686:	f7ff fe5d 	bl	8002344 <bme68x_get_regs>
 800268a:	4603      	mov	r3, r0
 800268c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 800268e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d11d      	bne.n	80026d2 <bme68x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 8002696:	7b7b      	ldrb	r3, [r7, #13]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME68X_SLEEP_MODE)
 800269e:	7bbb      	ldrb	r3, [r7, #14]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d016      	beq.n	80026d2 <bme68x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 80026a4:	7b7b      	ldrb	r3, [r7, #13]
 80026a6:	f023 0303 	bic.w	r3, r3, #3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	737b      	strb	r3, [r7, #13]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80026ae:	f107 010d 	add.w	r1, r7, #13
 80026b2:	f107 000c 	add.w	r0, r7, #12
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f7ff fdb4 	bl	8002226 <bme68x_set_regs>
 80026be:	4603      	mov	r3, r0
 80026c0:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	6852      	ldr	r2, [r2, #4]
 80026ca:	4611      	mov	r1, r2
 80026cc:	f242 7010 	movw	r0, #10000	@ 0x2710
 80026d0:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 80026d2:	7bbb      	ldrb	r3, [r7, #14]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <bme68x_set_op_mode+0x78>
 80026d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0cd      	beq.n	800267c <bme68x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01b      	beq.n	800271e <bme68x_set_op_mode+0xb6>
 80026e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d117      	bne.n	800271e <bme68x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 80026ee:	7b7b      	ldrb	r3, [r7, #13]
 80026f0:	b25b      	sxtb	r3, r3
 80026f2:	f023 0303 	bic.w	r3, r3, #3
 80026f6:	b25a      	sxtb	r2, r3
 80026f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	b25b      	sxtb	r3, r3
 8002702:	4313      	orrs	r3, r2
 8002704:	b25b      	sxtb	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	737b      	strb	r3, [r7, #13]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800270a:	f107 010d 	add.w	r1, r7, #13
 800270e:	f107 000c 	add.w	r0, r7, #12
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2201      	movs	r2, #1
 8002716:	f7ff fd86 	bl	8002226 <bme68x_set_regs>
 800271a:	4603      	mov	r3, r0
 800271c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800271e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00f      	beq.n	800275a <bme68x_get_op_mode+0x30>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 800273a:	f107 010e 	add.w	r1, r7, #14
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2201      	movs	r2, #1
 8002742:	2074      	movs	r0, #116	@ 0x74
 8002744:	f7ff fdfe 	bl	8002344 <bme68x_get_regs>
 8002748:	4603      	mov	r3, r0
 800274a:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 800274c:	7bbb      	ldrb	r3, [r7, #14]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	b2da      	uxtb	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	e001      	b.n	800275e <bme68x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 800275a:	23ff      	movs	r3, #255	@ 0xff
 800275c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800275e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 800276a:	b5b0      	push	{r4, r5, r7, lr}
 800276c:	b09a      	sub	sp, #104	@ 0x68
 800276e:	af00      	add	r7, sp, #0
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	603b      	str	r3, [r7, #0]
 8002776:	4603      	mov	r3, r0
 8002778:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8002780:	2300      	movs	r3, #0
 8002782:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8002786:	2300      	movs	r3, #0
 8002788:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
    struct bme68x_data *field_ptr[3] = { 0 };
 800278c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
    struct bme68x_data field_data[3] = { { 0 } };
 8002798:	f107 0310 	add.w	r3, r7, #16
 800279c:	2248      	movs	r2, #72	@ 0x48
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f008 f885 	bl	800a8b0 <memset>

    field_ptr[0] = &field_data[0];
 80027a6:	f107 0310 	add.w	r3, r7, #16
 80027aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    field_ptr[1] = &field_data[1];
 80027ac:	f107 0310 	add.w	r3, r7, #16
 80027b0:	3318      	adds	r3, #24
 80027b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    field_ptr[2] = &field_data[2];
 80027b4:	f107 0310 	add.w	r3, r7, #16
 80027b8:	3330      	adds	r3, #48	@ 0x30
 80027ba:	663b      	str	r3, [r7, #96]	@ 0x60

    rslt = null_ptr_check(dev);
 80027bc:	6838      	ldr	r0, [r7, #0]
 80027be:	f001 f9cb 	bl	8003b58 <null_ptr_check>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if ((rslt == BME68X_OK) && (data != NULL))
 80027c8:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f040 80c1 	bne.w	8002954 <bme68x_get_data+0x1ea>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80bd 	beq.w	8002954 <bme68x_get_data+0x1ea>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d11c      	bne.n	800281a <bme68x_get_data+0xb0>
        {
            rslt = read_field_data(0, data, dev);
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	2000      	movs	r0, #0
 80027e6:	f000 fd8e 	bl	8003306 <read_field_data>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            if (rslt == BME68X_OK)
 80027f0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f040 80a1 	bne.w	800293c <bme68x_get_data+0x1d2>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	b25b      	sxtb	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	da03      	bge.n	800280c <bme68x_get_data+0xa2>
                {
                    new_fields = 1;
 8002804:	2301      	movs	r3, #1
 8002806:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800280a:	e097      	b.n	800293c <bme68x_get_data+0x1d2>
                }
                else
                {
                    new_fields = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                    rslt = BME68X_W_NO_NEW_DATA;
 8002812:	2302      	movs	r3, #2
 8002814:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002818:	e090      	b.n	800293c <bme68x_get_data+0x1d2>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d003      	beq.n	8002828 <bme68x_get_data+0xbe>
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b03      	cmp	r3, #3
 8002824:	f040 8087 	bne.w	8002936 <bme68x_get_data+0x1cc>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 8002828:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800282c:	6839      	ldr	r1, [r7, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f000 feac 	bl	800358c <read_all_field_data>
 8002834:	4603      	mov	r3, r0
 8002836:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

            new_fields = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8002840:	2300      	movs	r3, #0
 8002842:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8002846:	e014      	b.n	8002872 <bme68x_get_data+0x108>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8002848:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	3368      	adds	r3, #104	@ 0x68
 8002850:	443b      	add	r3, r7
 8002852:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	b25b      	sxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	da04      	bge.n	8002868 <bme68x_get_data+0xfe>
                {
                    new_fields++;
 800285e:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8002862:	3301      	adds	r3, #1
 8002864:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8002868:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800286c:	3301      	adds	r3, #1
 800286e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8002872:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002876:	2b02      	cmp	r3, #2
 8002878:	d803      	bhi.n	8002882 <bme68x_get_data+0x118>
 800287a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0e2      	beq.n	8002848 <bme68x_get_data+0xde>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8002882:	2300      	movs	r3, #0
 8002884:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8002888:	e01c      	b.n	80028c4 <bme68x_get_data+0x15a>
            {
                for (j = i + 1; j < 3; j++)
 800288a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800288e:	3301      	adds	r3, #1
 8002890:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8002894:	e00d      	b.n	80028b2 <bme68x_get_data+0x148>
                {
                    sort_sensor_data(i, j, field_ptr);
 8002896:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800289a:	f897 1065 	ldrb.w	r1, [r7, #101]	@ 0x65
 800289e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80028a2:	4618      	mov	r0, r3
 80028a4:	f001 fb00 	bl	8003ea8 <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 80028a8:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80028ac:	3301      	adds	r3, #1
 80028ae:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 80028b2:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d9ed      	bls.n	8002896 <bme68x_get_data+0x12c>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 80028ba:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80028be:	3301      	adds	r3, #1
 80028c0:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80028c4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d803      	bhi.n	80028d4 <bme68x_get_data+0x16a>
 80028cc:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0da      	beq.n	800288a <bme68x_get_data+0x120>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80028d4:	2300      	movs	r3, #0
 80028d6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80028da:	e01c      	b.n	8002916 <bme68x_get_data+0x1ac>
            {
                data[i] = *field_ptr[i];
 80028dc:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	3368      	adds	r3, #104	@ 0x68
 80028e4:	443b      	add	r3, r7
 80028e6:	f853 1c10 	ldr.w	r1, [r3, #-16]
 80028ea:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	461a      	mov	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4413      	add	r3, r2
 80028fc:	461c      	mov	r4, r3
 80028fe:	460d      	mov	r5, r1
 8002900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002904:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002908:	e884 0003 	stmia.w	r4, {r0, r1}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800290c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002910:	3301      	adds	r3, #1
 8002912:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8002916:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800291a:	2b02      	cmp	r3, #2
 800291c:	d803      	bhi.n	8002926 <bme68x_get_data+0x1bc>
 800291e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0da      	beq.n	80028dc <bme68x_get_data+0x172>
            }

            if (new_fields == 0)
 8002926:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <bme68x_get_data+0x1d2>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 800292e:	2302      	movs	r3, #2
 8002930:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            if (new_fields == 0)
 8002934:	e002      	b.n	800293c <bme68x_get_data+0x1d2>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 8002936:	2301      	movs	r3, #1
 8002938:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }

        if (n_data == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d103      	bne.n	800294a <bme68x_get_data+0x1e0>
        {
            rslt = BME68X_E_NULL_PTR;
 8002942:	23ff      	movs	r3, #255	@ 0xff
 8002944:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        if (n_data == NULL)
 8002948:	e007      	b.n	800295a <bme68x_get_data+0x1f0>
        }
        else
        {
            *n_data = new_fields;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8002950:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 8002952:	e002      	b.n	800295a <bme68x_get_data+0x1f0>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8002954:	23ff      	movs	r3, #255	@ 0xff
 8002956:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    }

    return rslt;
 800295a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 800295e:	4618      	mov	r0, r3
 8002960:	3768      	adds	r7, #104	@ 0x68
 8002962:	46bd      	mov	sp, r7
 8002964:	bdb0      	pop	{r4, r5, r7, pc}

08002966 <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b088      	sub	sp, #32
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 8002974:	2300      	movs	r3, #0
 8002976:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 800297c:	f247 1370 	movw	r3, #29040	@ 0x7170
 8002980:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d070      	beq.n	8002a6a <bme68x_set_heatr_conf+0x104>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	2000      	movs	r0, #0
 800298c:	f7ff fe6c 	bl	8002668 <bme68x_set_op_mode>
 8002990:	4603      	mov	r3, r0
 8002992:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME68X_OK)
 8002994:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d108      	bne.n	80029ae <bme68x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 800299c:	f107 021c 	add.w	r2, r7, #28
 80029a0:	7bf9      	ldrb	r1, [r7, #15]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68b8      	ldr	r0, [r7, #8]
 80029a6:	f001 f8f6 	bl	8003b96 <set_conf>
 80029aa:	4603      	mov	r3, r0
 80029ac:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80029ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d15b      	bne.n	8002a6e <bme68x_set_heatr_conf+0x108>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 80029b6:	f107 0118 	add.w	r1, r7, #24
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2202      	movs	r2, #2
 80029be:	2070      	movs	r0, #112	@ 0x70
 80029c0:	f7ff fcc0 	bl	8002344 <bme68x_get_regs>
 80029c4:	4603      	mov	r3, r0
 80029c6:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME68X_OK)
 80029c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d14e      	bne.n	8002a6e <bme68x_set_heatr_conf+0x108>
            {
                if (conf->enable == BME68X_ENABLE)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d10b      	bne.n	80029f0 <bme68x_set_heatr_conf+0x8a>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 80029d8:	2300      	movs	r3, #0
 80029da:	77bb      	strb	r3, [r7, #30]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d102      	bne.n	80029ea <bme68x_set_heatr_conf+0x84>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 80029e4:	2302      	movs	r3, #2
 80029e6:	777b      	strb	r3, [r7, #29]
 80029e8:	e006      	b.n	80029f8 <bme68x_set_heatr_conf+0x92>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 80029ea:	2301      	movs	r3, #1
 80029ec:	777b      	strb	r3, [r7, #29]
 80029ee:	e003      	b.n	80029f8 <bme68x_set_heatr_conf+0x92>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 80029f0:	2301      	movs	r3, #1
 80029f2:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 80029f4:	2300      	movs	r3, #0
 80029f6:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 80029f8:	7e3b      	ldrb	r3, [r7, #24]
 80029fa:	b25b      	sxtb	r3, r3
 80029fc:	f023 0308 	bic.w	r3, r3, #8
 8002a00:	b25a      	sxtb	r2, r3
 8002a02:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	b25b      	sxtb	r3, r3
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	b25b      	sxtb	r3, r3
 8002a10:	4313      	orrs	r3, r2
 8002a12:	b25b      	sxtb	r3, r3
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8002a18:	7e7b      	ldrb	r3, [r7, #25]
 8002a1a:	b25b      	sxtb	r3, r3
 8002a1c:	f023 030f 	bic.w	r3, r3, #15
 8002a20:	b25a      	sxtb	r2, r3
 8002a22:	7f3b      	ldrb	r3, [r7, #28]
 8002a24:	b25b      	sxtb	r3, r3
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	b25b      	sxtb	r3, r3
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	b25b      	sxtb	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8002a34:	7e7b      	ldrb	r3, [r7, #25]
 8002a36:	b25b      	sxtb	r3, r3
 8002a38:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002a3c:	b25a      	sxtb	r2, r3
 8002a3e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	b25b      	sxtb	r3, r3
 8002a46:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002a4a:	b25b      	sxtb	r3, r3
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	b25b      	sxtb	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	767b      	strb	r3, [r7, #25]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 8002a54:	f107 0118 	add.w	r1, r7, #24
 8002a58:	f107 0014 	add.w	r0, r7, #20
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f7ff fbe1 	bl	8002226 <bme68x_set_regs>
 8002a64:	4603      	mov	r3, r0
 8002a66:	77fb      	strb	r3, [r7, #31]
 8002a68:	e001      	b.n	8002a6e <bme68x_set_heatr_conf+0x108>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8002a6a:	23ff      	movs	r3, #255	@ 0xff
 8002a6c:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002a6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3720      	adds	r7, #32
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	ee07 3a90 	vmov	s15, r3
 8002a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a90:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002b74 <calc_temperature+0xf8>
 8002a94:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	8bdb      	ldrh	r3, [r3, #30]
 8002a9c:	ee07 3a90 	vmov	s15, r3
 8002aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aa4:	ed9f 6a34 	vldr	s12, [pc, #208]	@ 8002b78 <calc_temperature+0xfc>
 8002aa8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002aac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002ab6:	ee07 3a90 	vmov	s15, r3
 8002aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac2:	edc7 7a05 	vstr	s15, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	ee07 3a90 	vmov	s15, r3
 8002acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad0:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8002b7c <calc_temperature+0x100>
 8002ad4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	8bdb      	ldrh	r3, [r3, #30]
 8002adc:	ee07 3a90 	vmov	s15, r3
 8002ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ae4:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 8002b80 <calc_temperature+0x104>
 8002ae8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002aec:	ee37 7a67 	vsub.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	ee07 3a90 	vmov	s15, r3
 8002af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afa:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 8002b7c <calc_temperature+0x100>
 8002afe:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	8bdb      	ldrh	r3, [r3, #30]
 8002b06:	ee07 3a90 	vmov	s15, r3
 8002b0a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8002b0e:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002b80 <calc_temperature+0x104>
 8002b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b16:	ee76 7ae7 	vsub.f32	s15, s13, s15
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8002b1a:	ee27 7a27 	vmul.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 8002b24:	ee07 3a90 	vmov	s15, r3
 8002b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b2c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002b30:	ee67 7aa6 	vmul.f32	s15, s15, s13
    var2 =
 8002b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b38:	edc7 7a04 	vstr	s15, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 8002b3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b40:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8002b54:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002b84 <calc_temperature+0x108>
 8002b58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b5c:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_temp;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	ee07 3a90 	vmov	s15, r3
}
 8002b66:	eeb0 0a67 	vmov.f32	s0, s15
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	46800000 	.word	0x46800000
 8002b78:	44800000 	.word	0x44800000
 8002b7c:	48000000 	.word	0x48000000
 8002b80:	46000000 	.word	0x46000000
 8002b84:	45a00000 	.word	0x45a00000

08002b88 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8002b98:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002b9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ba0:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8002ddc <calc_pressure+0x254>
 8002ba4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ba8:	edc7 7a04 	vstr	s15, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 8002bac:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bb0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	f993 302e 	ldrsb.w	r3, [r3, #46]	@ 0x2e
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002bc2:	ed9f 6a87 	vldr	s12, [pc, #540]	@ 8002de0 <calc_pressure+0x258>
 8002bc6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bce:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8002bd8:	ee07 3a90 	vmov	s15, r3
 8002bdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002be0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002bec:	ed97 7a03 	vldr	s14, [r7, #12]
 8002bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf4:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 8002bf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bfc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002c00:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8002c0a:	ee07 3a90 	vmov	s15, r3
 8002c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c12:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8002de4 <calc_pressure+0x25c>
 8002c16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c1e:	edc7 7a03 	vstr	s15, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 8002c28:	ee07 3a90 	vmov	s15, r3
 8002c2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c30:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c38:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c40:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002de8 <calc_pressure+0x260>
 8002c44:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8002c4e:	ee07 3a90 	vmov	s15, r3
 8002c52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c56:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c62:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8002dec <calc_pressure+0x264>
 8002c66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c6a:	edc7 7a04 	vstr	s15, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 8002c6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002df0 <calc_pressure+0x268>
 8002c76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002c86:	ee07 3a90 	vmov	s15, r3
 8002c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c92:	edc7 7a04 	vstr	s15, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	ee07 3a90 	vmov	s15, r3
 8002c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ca0:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8002df4 <calc_pressure+0x26c>
 8002ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca8:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 8002cac:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cb4:	ee17 3a90 	vmov	r3, s15
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 8081 	beq.w	8002dc0 <calc_pressure+0x238>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8002cbe:	ed97 7a03 	vldr	s14, [r7, #12]
 8002cc2:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8002df8 <calc_pressure+0x270>
 8002cc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cca:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd2:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8002dfc <calc_pressure+0x274>
 8002cd6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002cda:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ce2:	edc7 7a05 	vstr	s15, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8002cec:	ee07 3a90 	vmov	s15, r3
 8002cf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cf4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d04:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002e00 <calc_pressure+0x278>
 8002d08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d0c:	edc7 7a04 	vstr	s15, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8002d16:	ee07 3a90 	vmov	s15, r3
 8002d1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d1e:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8002df0 <calc_pressure+0x268>
 8002d22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d26:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2e:	edc7 7a03 	vstr	s15, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 8002d32:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d36:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002e04 <calc_pressure+0x27c>
 8002d3a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d3e:	edd7 6a05 	vldr	s13, [r7, #20]
 8002d42:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 8002e04 <calc_pressure+0x27c>
 8002d46:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d4e:	edd7 6a05 	vldr	s13, [r7, #20]
 8002d52:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8002e04 <calc_pressure+0x27c>
 8002d56:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d64:	ee07 3a90 	vmov	s15, r3
 8002d68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d6c:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 8002de0 <calc_pressure+0x258>
 8002d70:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d78:	edc7 7a02 	vstr	s15, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 8002d7c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d80:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d88:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	f993 302f 	ldrsb.w	r3, [r3, #47]	@ 0x2f
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d9e:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002e08 <calc_pressure+0x280>
 8002da2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002da6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002daa:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002dae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002db2:	ed97 7a05 	vldr	s14, [r7, #20]
 8002db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dba:	edc7 7a05 	vstr	s15, [r7, #20]
 8002dbe:	e002      	b.n	8002dc6 <calc_pressure+0x23e>
    }
    else
    {
        calc_pres = 0;
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	ee07 3a90 	vmov	s15, r3
}
 8002dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd0:	371c      	adds	r7, #28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	477a0000 	.word	0x477a0000
 8002de0:	48000000 	.word	0x48000000
 8002de4:	47800000 	.word	0x47800000
 8002de8:	46800000 	.word	0x46800000
 8002dec:	49000000 	.word	0x49000000
 8002df0:	47000000 	.word	0x47000000
 8002df4:	49800000 	.word	0x49800000
 8002df8:	45800000 	.word	0x45800000
 8002dfc:	45c35000 	.word	0x45c35000
 8002e00:	4f000000 	.word	0x4f000000
 8002e04:	43800000 	.word	0x43800000
 8002e08:	43000000 	.word	0x43000000

08002e0c <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b089      	sub	sp, #36	@ 0x24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	6039      	str	r1, [r7, #0]
 8002e16:	80fb      	strh	r3, [r7, #6]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8002e1e:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8002f88 <calc_humidity+0x17c>
 8002e22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e26:	edc7 7a06 	vstr	s15, [r7, #24]
    var1 = (float)((float)hum_adc) -
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	ee07 3a90 	vmov	s15, r3
 8002e30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	8a1b      	ldrh	r3, [r3, #16]
 8002e38:	ee07 3a90 	vmov	s15, r3
 8002e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e40:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002e44:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002e4e:	ee07 3a90 	vmov	s15, r3
 8002e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e56:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 8002e5a:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8002e5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e62:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
    var1 = (float)((float)hum_adc) -
 8002e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e6e:	edc7 7a05 	vstr	s15, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	8a5b      	ldrh	r3, [r3, #18]
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e7e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002f8c <calc_humidity+0x180>
 8002e82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002e8c:	ee07 3a90 	vmov	s15, r3
 8002e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e94:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8002f90 <calc_humidity+0x184>
 8002e98:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002e9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ea4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ea8:	ee77 6aa6 	vadd.f32	s13, s15, s13
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8002eb2:	ee07 3a90 	vmov	s15, r3
 8002eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eba:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8002f94 <calc_humidity+0x188>
 8002ebe:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8002ec2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ec6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002eca:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ece:	ee66 7a27 	vmul.f32	s15, s12, s15
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8002ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8002ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
    var2 = var1 *
 8002eda:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee2:	edc7 7a04 	vstr	s15, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	7ddb      	ldrb	r3, [r3, #23]
 8002eea:	ee07 3a90 	vmov	s15, r3
 8002eee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ef2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002f90 <calc_humidity+0x184>
 8002ef6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002efa:	edc7 7a03 	vstr	s15, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8002f04:	ee07 3a90 	vmov	s15, r3
 8002f08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f0c:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8002f98 <calc_humidity+0x18c>
 8002f10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f14:	edc7 7a02 	vstr	s15, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8002f18:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f24:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f34:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f44:	edc7 7a07 	vstr	s15, [r7, #28]
    if (calc_hum > 100.0f)
 8002f48:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f4c:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002f9c <calc_humidity+0x190>
 8002f50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f58:	dd02      	ble.n	8002f60 <calc_humidity+0x154>
    {
        calc_hum = 100.0f;
 8002f5a:	4b11      	ldr	r3, [pc, #68]	@ (8002fa0 <calc_humidity+0x194>)
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	e009      	b.n	8002f74 <calc_humidity+0x168>
    }
    else if (calc_hum < 0.0f)
 8002f60:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6c:	d502      	bpl.n	8002f74 <calc_humidity+0x168>
    {
        calc_hum = 0.0f;
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	ee07 3a90 	vmov	s15, r3
}
 8002f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f7e:	3724      	adds	r7, #36	@ 0x24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	45a00000 	.word	0x45a00000
 8002f8c:	48800000 	.word	0x48800000
 8002f90:	46800000 	.word	0x46800000
 8002f94:	49800000 	.word	0x49800000
 8002f98:	4a000000 	.word	0x4a000000
 8002f9c:	42c80000 	.word	0x42c80000
 8002fa0:	42c80000 	.word	0x42c80000

08002fa4 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 8002fa4:	b4b0      	push	{r4, r5, r7}
 8002fa6:	b0a9      	sub	sp, #164	@ 0xa4
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	603a      	str	r2, [r7, #0]
 8002fae:	80fb      	strh	r3, [r7, #6]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	ee07 3a90 	vmov	s15, r3
 8002fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fbe:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 8002fc2:	797b      	ldrb	r3, [r7, #5]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	ee07 3a90 	vmov	s15, r3
 8002fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd2:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
    const float lookup_k1_range[16] = {
 8002fd6:	4b3e      	ldr	r3, [pc, #248]	@ (80030d0 <calc_gas_resistance_low+0x12c>)
 8002fd8:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8002fdc:	461d      	mov	r5, r3
 8002fde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fe2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002fee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 8002ff2:	4b38      	ldr	r3, [pc, #224]	@ (80030d4 <calc_gas_resistance_low+0x130>)
 8002ff4:	f107 0408 	add.w	r4, r7, #8
 8002ff8:	461d      	mov	r5, r3
 8002ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003006:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800300a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	f993 303e 	ldrsb.w	r3, [r3, #62]	@ 0x3e
 8003014:	ee07 3a90 	vmov	s15, r3
 8003018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800301c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003020:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003024:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80030d8 <calc_gas_resistance_low+0x134>
 8003028:	ee77 7a87 	vadd.f32	s15, s15, s14
 800302c:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 8003030:	797b      	ldrb	r3, [r7, #5]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	33a0      	adds	r3, #160	@ 0xa0
 8003036:	443b      	add	r3, r7
 8003038:	3b58      	subs	r3, #88	@ 0x58
 800303a:	ed93 7a00 	vldr	s14, [r3]
 800303e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80030dc <calc_gas_resistance_low+0x138>
 8003042:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003046:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800304a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800304e:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003056:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 800305a:	797b      	ldrb	r3, [r7, #5]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	33a0      	adds	r3, #160	@ 0xa0
 8003060:	443b      	add	r3, r7
 8003062:	3b98      	subs	r3, #152	@ 0x98
 8003064:	ed93 7a00 	vldr	s14, [r3]
 8003068:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80030dc <calc_gas_resistance_low+0x138>
 800306c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003070:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003074:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003078:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 800307c:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003080:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80030e0 <calc_gas_resistance_low+0x13c>
 8003084:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003088:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800308c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003090:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003094:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80030e4 <calc_gas_resistance_low+0x140>
 8003098:	ee37 6ae6 	vsub.f32	s12, s15, s13
 800309c:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 80030a0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80030a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030b8:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    return calc_gas_res;
 80030bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030c0:	ee07 3a90 	vmov	s15, r3
}
 80030c4:	eeb0 0a67 	vmov.f32	s0, s15
 80030c8:	37a4      	adds	r7, #164	@ 0xa4
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bcb0      	pop	{r4, r5, r7}
 80030ce:	4770      	bx	lr
 80030d0:	0800d244 	.word	0x0800d244
 80030d4:	0800d284 	.word	0x0800d284
 80030d8:	44a78000 	.word	0x44a78000
 80030dc:	42c80000 	.word	0x42c80000
 80030e0:	340637bd 	.word	0x340637bd
 80030e4:	44000000 	.word	0x44000000

080030e8 <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	460a      	mov	r2, r1
 80030f2:	80fb      	strh	r3, [r7, #6]
 80030f4:	4613      	mov	r3, r2
 80030f6:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 80030f8:	797b      	ldrb	r3, [r7, #5]
 80030fa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80030fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003102:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800310a:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4613      	mov	r3, r2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800311c:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	ee07 3a90 	vmov	s15, r3
 8003124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003128:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8003158 <calc_gas_resistance_high+0x70>
 800312c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	ee07 3a90 	vmov	s15, r3
 8003136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800313a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800313e:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_gas_res;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	ee07 3a90 	vmov	s15, r3
}
 8003148:	eeb0 0a67 	vmov.f32	s0, s15
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	49742400 	.word	0x49742400

0800315c <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 800315c:	b480      	push	{r7}
 800315e:	b08b      	sub	sp, #44	@ 0x2c
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	81fb      	strh	r3, [r7, #14]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 8003168:	89fb      	ldrh	r3, [r7, #14]
 800316a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800316e:	d902      	bls.n	8003176 <calc_res_heat+0x1a>
    {
        temp = 400;
 8003170:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8003174:	81fb      	strh	r3, [r7, #14]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f993 3019 	ldrsb.w	r3, [r3, #25]
 800317c:	ee07 3a90 	vmov	s15, r3
 8003180:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003184:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8003188:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800318c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80032a0 <calc_res_heat+0x144>
 8003190:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003194:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031a6:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80032a4 <calc_res_heat+0x148>
 80031aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031ae:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80032a8 <calc_res_heat+0x14c>
 80031b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031b6:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 80032ac <calc_res_heat+0x150>
 80031ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031be:	edc7 7a08 	vstr	s15, [r7, #32]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f993 301c 	ldrsb.w	r3, [r3, #28]
 80031c8:	ee07 3a90 	vmov	s15, r3
 80031cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031d0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80032b0 <calc_res_heat+0x154>
 80031d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031d8:	edc7 7a07 	vstr	s15, [r7, #28]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 80031dc:	89fb      	ldrh	r3, [r7, #14]
 80031de:	ee07 3a90 	vmov	s15, r3
 80031e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80031ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80031f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031f6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80031fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fe:	edc7 7a06 	vstr	s15, [r7, #24]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8003208:	ee07 3a90 	vmov	s15, r3
 800320c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003210:	edd7 7a07 	vldr	s15, [r7, #28]
 8003214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003218:	ed97 7a06 	vldr	s14, [r7, #24]
 800321c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003220:	edc7 7a05 	vstr	s15, [r7, #20]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800322a:	ee07 3a90 	vmov	s15, r3
 800322e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003232:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8003236:	ee77 7a87 	vadd.f32	s15, s15, s14
 800323a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800323e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003242:	edd7 7a05 	vldr	s15, [r7, #20]
 8003246:	ee27 7a27 	vmul.f32	s14, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f993 303d 	ldrsb.w	r3, [r3, #61]	@ 0x3d
 8003250:	ee07 3a90 	vmov	s15, r3
 8003254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003258:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80032b4 <calc_res_heat+0x158>
 800325c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003260:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003264:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8003268:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800326c:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8003270:	ee67 7a27 	vmul.f32	s15, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8003274:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8003278:	ee77 7ac7 	vsub.f32	s15, s15, s14
        (uint8_t)(3.4f *
 800327c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80032b8 <calc_res_heat+0x15c>
 8003280:	ee67 7a87 	vmul.f32	s15, s15, s14
    res_heat =
 8003284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003288:	edc7 7a01 	vstr	s15, [r7, #4]
 800328c:	793b      	ldrb	r3, [r7, #4]
 800328e:	74fb      	strb	r3, [r7, #19]
                   25));

    return res_heat;
 8003290:	7cfb      	ldrb	r3, [r7, #19]
}
 8003292:	4618      	mov	r0, r3
 8003294:	372c      	adds	r7, #44	@ 0x2c
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	42440000 	.word	0x42440000
 80032a4:	47000000 	.word	0x47000000
 80032a8:	3a03126f 	.word	0x3a03126f
 80032ac:	3b1a0275 	.word	0x3b1a0275
 80032b0:	44800000 	.word	0x44800000
 80032b4:	3b03126f 	.word	0x3b03126f
 80032b8:	4059999a 	.word	0x4059999a

080032bc <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 80032d0:	d308      	bcc.n	80032e4 <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 80032d2:	23ff      	movs	r3, #255	@ 0xff
 80032d4:	73bb      	strb	r3, [r7, #14]
 80032d6:	e00f      	b.n	80032f8 <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 80032d8:	88fb      	ldrh	r3, [r7, #6]
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 80032de:	7bfb      	ldrb	r3, [r7, #15]
 80032e0:	3301      	adds	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 80032e4:	88fb      	ldrh	r3, [r7, #6]
 80032e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80032e8:	d8f6      	bhi.n	80032d8 <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	019b      	lsls	r3, r3, #6
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	4413      	add	r3, r2
 80032f6:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 80032f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b08e      	sub	sp, #56	@ 0x38
 800330a:	af00      	add	r7, sp, #0
 800330c:	4603      	mov	r3, r0
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME68X_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 800331a:	f107 0310 	add.w	r3, r7, #16
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	605a      	str	r2, [r3, #4]
 8003324:	609a      	str	r2, [r3, #8]
 8003326:	60da      	str	r2, [r3, #12]
 8003328:	741a      	strb	r2, [r3, #16]
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 800332a:	2305      	movs	r3, #5
 800332c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    while ((tries) && (rslt == BME68X_OK))
 8003330:	e11d      	b.n	800356e <read_field_data+0x268>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	461a      	mov	r2, r3
 8003336:	0112      	lsls	r2, r2, #4
 8003338:	4413      	add	r3, r2
 800333a:	b2db      	uxtb	r3, r3
 800333c:	331d      	adds	r3, #29
 800333e:	b2d8      	uxtb	r0, r3
 8003340:	f107 0110 	add.w	r1, r7, #16
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2211      	movs	r2, #17
 8003348:	f7fe fffc 	bl	8002344 <bme68x_get_regs>
 800334c:	4603      	mov	r3, r0
 800334e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d103      	bne.n	8003360 <read_field_data+0x5a>
        {
            rslt = BME68X_E_NULL_PTR;
 8003358:	23ff      	movs	r3, #255	@ 0xff
 800335a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 800335e:	e10f      	b.n	8003580 <read_field_data+0x27a>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8003360:	7c3b      	ldrb	r3, [r7, #16]
 8003362:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003366:	b2da      	uxtb	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 800336c:	7c3b      	ldrb	r3, [r7, #16]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	b2da      	uxtb	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 8003378:	7c7a      	ldrb	r2, [r7, #17]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 800337e:	7cbb      	ldrb	r3, [r7, #18]
 8003380:	031a      	lsls	r2, r3, #12
 8003382:	7cfb      	ldrb	r3, [r7, #19]
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	4313      	orrs	r3, r2
 8003388:	7d3a      	ldrb	r2, [r7, #20]
 800338a:	0912      	lsrs	r2, r2, #4
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	4313      	orrs	r3, r2
 8003390:	633b      	str	r3, [r7, #48]	@ 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8003392:	7d7b      	ldrb	r3, [r7, #21]
 8003394:	031a      	lsls	r2, r3, #12
 8003396:	7dbb      	ldrb	r3, [r7, #22]
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	4313      	orrs	r3, r2
 800339c:	7dfa      	ldrb	r2, [r7, #23]
 800339e:	0912      	lsrs	r2, r2, #4
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	4313      	orrs	r3, r2
 80033a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 80033a6:	7e3b      	ldrb	r3, [r7, #24]
 80033a8:	021b      	lsls	r3, r3, #8
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	7e7a      	ldrb	r2, [r7, #25]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	857b      	strh	r3, [r7, #42]	@ 0x2a
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 80033b2:	7f7b      	ldrb	r3, [r7, #29]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	7fba      	ldrb	r2, [r7, #30]
 80033ba:	0992      	lsrs	r2, r2, #6
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	4313      	orrs	r3, r2
 80033c0:	853b      	strh	r3, [r7, #40]	@ 0x28
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 80033c2:	7ffb      	ldrb	r3, [r7, #31]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80033cc:	0992      	lsrs	r2, r2, #6
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	4313      	orrs	r3, r2
 80033d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 80033d4:	7fbb      	ldrb	r3, [r7, #30]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 80033de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d11c      	bne.n	800342c <read_field_data+0x126>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	b25a      	sxtb	r2, r3
 80033f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033fc:	b25b      	sxtb	r3, r3
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	b25b      	sxtb	r3, r3
 8003404:	4313      	orrs	r3, r2
 8003406:	b25b      	sxtb	r3, r3
 8003408:	b2da      	uxtb	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	b25a      	sxtb	r2, r3
 8003414:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003418:	b25b      	sxtb	r3, r3
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	b25b      	sxtb	r3, r3
 8003420:	4313      	orrs	r3, r2
 8003422:	b25b      	sxtb	r3, r3
 8003424:	b2da      	uxtb	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	701a      	strb	r2, [r3, #0]
 800342a:	e019      	b.n	8003460 <read_field_data+0x15a>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	b25a      	sxtb	r2, r3
 8003432:	7fbb      	ldrb	r3, [r7, #30]
 8003434:	b25b      	sxtb	r3, r3
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	b25b      	sxtb	r3, r3
 800343c:	4313      	orrs	r3, r2
 800343e:	b25b      	sxtb	r3, r3
 8003440:	b2da      	uxtb	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	b25a      	sxtb	r2, r3
 800344c:	7fbb      	ldrb	r3, [r7, #30]
 800344e:	b25b      	sxtb	r3, r3
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	b25b      	sxtb	r3, r3
 8003456:	4313      	orrs	r3, r2
 8003458:	b25b      	sxtb	r3, r3
 800345a:	b2da      	uxtb	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	b25b      	sxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	da70      	bge.n	800354c <read_field_data+0x246>
 800346a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800346e:	2b00      	cmp	r3, #0
 8003470:	d16c      	bne.n	800354c <read_field_data+0x246>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	785b      	ldrb	r3, [r3, #1]
 8003476:	335a      	adds	r3, #90	@ 0x5a
 8003478:	b2d8      	uxtb	r0, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	1cd9      	adds	r1, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f7fe ff5f 	bl	8002344 <bme68x_get_regs>
 8003486:	4603      	mov	r3, r0
 8003488:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            if (rslt == BME68X_OK)
 800348c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10c      	bne.n	80034ae <read_field_data+0x1a8>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	785b      	ldrb	r3, [r3, #1]
 8003498:	3350      	adds	r3, #80	@ 0x50
 800349a:	b2d8      	uxtb	r0, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	1d19      	adds	r1, r3, #4
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f7fe ff4e 	bl	8002344 <bme68x_get_regs>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BME68X_OK)
 80034ae:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10c      	bne.n	80034d0 <read_field_data+0x1ca>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	785b      	ldrb	r3, [r3, #1]
 80034ba:	3364      	adds	r3, #100	@ 0x64
 80034bc:	b2d8      	uxtb	r0, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	1d59      	adds	r1, r3, #5
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f7fe ff3d 	bl	8002344 <bme68x_get_regs>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BME68X_OK)
 80034d0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d139      	bne.n	800354c <read_field_data+0x246>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034dc:	f7ff face 	bl	8002a7c <calc_temperature>
 80034e0:	eef0 7a40 	vmov.f32	s15, s0
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	edc3 7a02 	vstr	s15, [r3, #8]
                data->pressure = calc_pressure(adc_pres, dev);
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034ee:	f7ff fb4b 	bl	8002b88 <calc_pressure>
 80034f2:	eef0 7a40 	vmov.f32	s15, s0
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	edc3 7a03 	vstr	s15, [r3, #12]
                data->humidity = calc_humidity(adc_hum, dev);
 80034fc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff fc83 	bl	8002e0c <calc_humidity>
 8003506:	eef0 7a40 	vmov.f32	s15, s0
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	edc3 7a04 	vstr	s15, [r3, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d10c      	bne.n	8003532 <read_field_data+0x22c>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8003518:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800351c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fde1 	bl	80030e8 <calc_gas_resistance_high>
 8003526:	eef0 7a40 	vmov.f32	s15, s0
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	edc3 7a05 	vstr	s15, [r3, #20]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 8003530:	e026      	b.n	8003580 <read_field_data+0x27a>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8003532:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8003536:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff fd32 	bl	8002fa4 <calc_gas_resistance_low>
 8003540:	eef0 7a40 	vmov.f32	s15, s0
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	edc3 7a05 	vstr	s15, [r3, #20]
                break;
 800354a:	e019      	b.n	8003580 <read_field_data+0x27a>
            }
        }

        if (rslt == BME68X_OK)
 800354c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003550:	2b00      	cmp	r3, #0
 8003552:	d107      	bne.n	8003564 <read_field_data+0x25e>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6852      	ldr	r2, [r2, #4]
 800355c:	4611      	mov	r1, r2
 800355e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8003562:	4798      	blx	r3
        }

        tries--;
 8003564:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003568:	3b01      	subs	r3, #1
 800356a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    while ((tries) && (rslt == BME68X_OK))
 800356e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003572:	2b00      	cmp	r3, #0
 8003574:	d004      	beq.n	8003580 <read_field_data+0x27a>
 8003576:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800357a:	2b00      	cmp	r3, #0
 800357c:	f43f aed9 	beq.w	8003332 <read_field_data+0x2c>
    }

    return rslt;
 8003580:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8003584:	4618      	mov	r0, r3
 8003586:	3738      	adds	r7, #56	@ 0x38
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 800358c:	b590      	push	{r4, r7, lr}
 800358e:	b09d      	sub	sp, #116	@ 0x74
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 800359c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80035a0:	2233      	movs	r2, #51	@ 0x33
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f007 f983 	bl	800a8b0 <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 80035aa:	f107 0308 	add.w	r3, r7, #8
 80035ae:	221e      	movs	r2, #30
 80035b0:	2100      	movs	r1, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f007 f97c 	bl	800a8b0 <memset>
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10c      	bne.n	80035da <read_all_field_data+0x4e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3304      	adds	r3, #4
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d107      	bne.n	80035da <read_all_field_data+0x4e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3308      	adds	r3, #8
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d102      	bne.n	80035da <read_all_field_data+0x4e>
    {
        rslt = BME68X_E_NULL_PTR;
 80035d4:	23ff      	movs	r3, #255	@ 0xff
 80035d6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (rslt == BME68X_OK)
 80035da:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <read_all_field_data+0x6a>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 80035e2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2233      	movs	r2, #51	@ 0x33
 80035ea:	201d      	movs	r0, #29
 80035ec:	f7fe feaa 	bl	8002344 <bme68x_get_regs>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (rslt == BME68X_OK)
 80035f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <read_all_field_data+0x86>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 80035fe:	f107 0108 	add.w	r1, r7, #8
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	221e      	movs	r2, #30
 8003606:	2050      	movs	r0, #80	@ 0x50
 8003608:	f7fe fe9c 	bl	8002344 <bme68x_get_regs>
 800360c:	4603      	mov	r3, r0
 800360e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8003612:	2300      	movs	r3, #0
 8003614:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8003618:	e1ce      	b.n	80039b8 <read_all_field_data+0x42c>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 800361a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800361e:	461a      	mov	r2, r3
 8003620:	0112      	lsls	r2, r2, #4
 8003622:	4413      	add	r3, r2
 8003624:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8003628:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800362c:	3370      	adds	r3, #112	@ 0x70
 800362e:	443b      	add	r3, r7
 8003630:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8003634:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	440b      	add	r3, r1
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8003648:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800364c:	3370      	adds	r3, #112	@ 0x70
 800364e:	443b      	add	r3, r7
 8003650:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8003654:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	440b      	add	r3, r1
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f002 020f 	and.w	r2, r2, #15
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 8003668:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	440b      	add	r3, r1
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3270      	adds	r2, #112	@ 0x70
 800367c:	443a      	add	r2, r7
 800367e:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8003682:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 8003684:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003688:	3302      	adds	r3, #2
 800368a:	3370      	adds	r3, #112	@ 0x70
 800368c:	443b      	add	r3, r7
 800368e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003692:	031a      	lsls	r2, r3, #12
 8003694:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003698:	3303      	adds	r3, #3
 800369a:	3370      	adds	r3, #112	@ 0x70
 800369c:	443b      	add	r3, r7
 800369e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 80036a6:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80036aa:	3204      	adds	r2, #4
 80036ac:	3270      	adds	r2, #112	@ 0x70
 80036ae:	443a      	add	r2, r7
 80036b0:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80036b4:	0912      	lsrs	r2, r2, #4
 80036b6:	b2d2      	uxtb	r2, r2
        adc_pres =
 80036b8:	4313      	orrs	r3, r2
 80036ba:	66bb      	str	r3, [r7, #104]	@ 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 80036bc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80036c0:	3305      	adds	r3, #5
 80036c2:	3370      	adds	r3, #112	@ 0x70
 80036c4:	443b      	add	r3, r7
 80036c6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80036ca:	031a      	lsls	r2, r3, #12
 80036cc:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80036d0:	3306      	adds	r3, #6
 80036d2:	3370      	adds	r3, #112	@ 0x70
 80036d4:	443b      	add	r3, r7
 80036d6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 80036de:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80036e2:	3207      	adds	r2, #7
 80036e4:	3270      	adds	r2, #112	@ 0x70
 80036e6:	443a      	add	r2, r7
 80036e8:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80036ec:	0912      	lsrs	r2, r2, #4
 80036ee:	b2d2      	uxtb	r2, r2
        adc_temp =
 80036f0:	4313      	orrs	r3, r2
 80036f2:	667b      	str	r3, [r7, #100]	@ 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 80036f4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80036f8:	3308      	adds	r3, #8
 80036fa:	3370      	adds	r3, #112	@ 0x70
 80036fc:	443b      	add	r3, r7
 80036fe:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003702:	021b      	lsls	r3, r3, #8
 8003704:	b29b      	uxth	r3, r3
 8003706:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800370a:	3209      	adds	r2, #9
 800370c:	3270      	adds	r2, #112	@ 0x70
 800370e:	443a      	add	r2, r7
 8003710:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8003714:	4313      	orrs	r3, r2
 8003716:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 800371a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800371e:	330d      	adds	r3, #13
 8003720:	3370      	adds	r3, #112	@ 0x70
 8003722:	443b      	add	r3, r7
 8003724:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	b29b      	uxth	r3, r3
 800372c:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003730:	320e      	adds	r2, #14
 8003732:	3270      	adds	r2, #112	@ 0x70
 8003734:	443a      	add	r2, r7
 8003736:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 800373a:	0992      	lsrs	r2, r2, #6
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	4313      	orrs	r3, r2
 8003740:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8003744:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003748:	330f      	adds	r3, #15
 800374a:	3370      	adds	r3, #112	@ 0x70
 800374c:	443b      	add	r3, r7
 800374e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	b29b      	uxth	r3, r3
 8003756:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800375a:	3210      	adds	r2, #16
 800375c:	3270      	adds	r2, #112	@ 0x70
 800375e:	443a      	add	r2, r7
 8003760:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8003764:	0992      	lsrs	r2, r2, #6
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	4313      	orrs	r3, r2
 800376a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 800376e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003772:	330e      	adds	r3, #14
 8003774:	3370      	adds	r3, #112	@ 0x70
 8003776:	443b      	add	r3, r7
 8003778:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 8003784:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003788:	3310      	adds	r3, #16
 800378a:	3370      	adds	r3, #112	@ 0x70
 800378c:	443b      	add	r3, r7
 800378e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d13a      	bne.n	8003818 <read_all_field_data+0x28c>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 80037a2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	4413      	add	r3, r2
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	b25a      	sxtb	r2, r3
 80037b2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80037b6:	3310      	adds	r3, #16
 80037b8:	3370      	adds	r3, #112	@ 0x70
 80037ba:	443b      	add	r3, r7
 80037bc:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80037c0:	b25b      	sxtb	r3, r3
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	b25b      	sxtb	r3, r3
 80037c8:	4313      	orrs	r3, r2
 80037ca:	b259      	sxtb	r1, r3
 80037cc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	4413      	add	r3, r2
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	b2ca      	uxtb	r2, r1
 80037da:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 80037dc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	b25a      	sxtb	r2, r3
 80037ec:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80037f0:	3310      	adds	r3, #16
 80037f2:	3370      	adds	r3, #112	@ 0x70
 80037f4:	443b      	add	r3, r7
 80037f6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80037fa:	b25b      	sxtb	r3, r3
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	b25b      	sxtb	r3, r3
 8003802:	4313      	orrs	r3, r2
 8003804:	b259      	sxtb	r1, r3
 8003806:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	4413      	add	r3, r2
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	b2ca      	uxtb	r2, r1
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	e039      	b.n	800388c <read_all_field_data+0x300>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8003818:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	4413      	add	r3, r2
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	b25a      	sxtb	r2, r3
 8003828:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800382c:	330e      	adds	r3, #14
 800382e:	3370      	adds	r3, #112	@ 0x70
 8003830:	443b      	add	r3, r7
 8003832:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003836:	b25b      	sxtb	r3, r3
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	b25b      	sxtb	r3, r3
 800383e:	4313      	orrs	r3, r2
 8003840:	b259      	sxtb	r1, r3
 8003842:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	4413      	add	r3, r2
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	b2ca      	uxtb	r2, r1
 8003850:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 8003852:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	4413      	add	r3, r2
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	b25a      	sxtb	r2, r3
 8003862:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003866:	330e      	adds	r3, #14
 8003868:	3370      	adds	r3, #112	@ 0x70
 800386a:	443b      	add	r3, r7
 800386c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003870:	b25b      	sxtb	r3, r3
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	b25b      	sxtb	r3, r3
 8003878:	4313      	orrs	r3, r2
 800387a:	b259      	sxtb	r1, r3
 800387c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	b2ca      	uxtb	r2, r1
 800388a:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 800388c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	4413      	add	r3, r2
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	785b      	ldrb	r3, [r3, #1]
 800389a:	4619      	mov	r1, r3
 800389c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	4413      	add	r3, r2
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f101 0270 	add.w	r2, r1, #112	@ 0x70
 80038ac:	443a      	add	r2, r7
 80038ae:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80038b2:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 80038b4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	4413      	add	r3, r2
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	785b      	ldrb	r3, [r3, #1]
 80038c2:	f103 020a 	add.w	r2, r3, #10
 80038c6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	440b      	add	r3, r1
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3270      	adds	r2, #112	@ 0x70
 80038d4:	443a      	add	r2, r7
 80038d6:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80038da:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 80038dc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	4413      	add	r3, r2
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	785b      	ldrb	r3, [r3, #1]
 80038ea:	f103 0214 	add.w	r2, r3, #20
 80038ee:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	440b      	add	r3, r1
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3270      	adds	r2, #112	@ 0x70
 80038fc:	443a      	add	r2, r7
 80038fe:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8003902:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8003904:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	4413      	add	r3, r2
 800390e:	681c      	ldr	r4, [r3, #0]
 8003910:	6839      	ldr	r1, [r7, #0]
 8003912:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003914:	f7ff f8b2 	bl	8002a7c <calc_temperature>
 8003918:	eef0 7a40 	vmov.f32	s15, s0
 800391c:	edc4 7a02 	vstr	s15, [r4, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 8003920:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	4413      	add	r3, r2
 800392a:	681c      	ldr	r4, [r3, #0]
 800392c:	6839      	ldr	r1, [r7, #0]
 800392e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003930:	f7ff f92a 	bl	8002b88 <calc_pressure>
 8003934:	eef0 7a40 	vmov.f32	s15, s0
 8003938:	edc4 7a03 	vstr	s15, [r4, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 800393c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	681c      	ldr	r4, [r3, #0]
 8003948:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800394c:	6839      	ldr	r1, [r7, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff fa5c 	bl	8002e0c <calc_humidity>
 8003954:	eef0 7a40 	vmov.f32	s15, s0
 8003958:	edc4 7a04 	vstr	s15, [r4, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d112      	bne.n	800398a <read_all_field_data+0x3fe>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8003964:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	4413      	add	r3, r2
 800396e:	681c      	ldr	r4, [r3, #0]
 8003970:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8003974:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003978:	4611      	mov	r1, r2
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff fbb4 	bl	80030e8 <calc_gas_resistance_high>
 8003980:	eef0 7a40 	vmov.f32	s15, s0
 8003984:	edc4 7a05 	vstr	s15, [r4, #20]
 8003988:	e011      	b.n	80039ae <read_all_field_data+0x422>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 800398a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	4413      	add	r3, r2
 8003994:	681c      	ldr	r4, [r3, #0]
 8003996:	f897 105d 	ldrb.w	r1, [r7, #93]	@ 0x5d
 800399a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff faff 	bl	8002fa4 <calc_gas_resistance_low>
 80039a6:	eef0 7a40 	vmov.f32	s15, s0
 80039aa:	edc4 7a05 	vstr	s15, [r4, #20]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80039ae:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80039b2:	3301      	adds	r3, #1
 80039b4:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80039b8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d804      	bhi.n	80039ca <read_all_field_data+0x43e>
 80039c0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f43f ae28 	beq.w	800361a <read_all_field_data+0x8e>
        }
    }

    return rslt;
 80039ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3774      	adds	r7, #116	@ 0x74
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd90      	pop	{r4, r7, pc}

080039d6 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 80039d6:	b590      	push	{r4, r7, lr}
 80039d8:	b085      	sub	sp, #20
 80039da:	af00      	add	r7, sp, #0
 80039dc:	4603      	mov	r3, r0
 80039de:	6039      	str	r1, [r7, #0]
 80039e0:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 80039e2:	6838      	ldr	r0, [r7, #0]
 80039e4:	f000 f8b8 	bl	8003b58 <null_ptr_check>
 80039e8:	4603      	mov	r3, r0
 80039ea:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 80039ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d14f      	bne.n	8003a94 <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 80039f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	da02      	bge.n	8003a02 <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 80039fc:	2300      	movs	r3, #0
 80039fe:	73bb      	strb	r3, [r7, #14]
 8003a00:	e001      	b.n	8003a06 <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 8003a02:	2310      	movs	r3, #16
 8003a04:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	7b5b      	ldrb	r3, [r3, #13]
 8003a0a:	7bba      	ldrb	r2, [r7, #14]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d041      	beq.n	8003a94 <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	7bba      	ldrb	r2, [r7, #14]
 8003a14:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f107 010d 	add.w	r1, r7, #13
 8003a22:	2201      	movs	r2, #1
 8003a24:	20f3      	movs	r0, #243	@ 0xf3
 8003a26:	47a0      	blx	r4
 8003a28:	4603      	mov	r3, r0
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 8003a3c:	23fe      	movs	r3, #254	@ 0xfe
 8003a3e:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 8003a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d125      	bne.n	8003a94 <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8003a48:	7b7b      	ldrb	r3, [r7, #13]
 8003a4a:	f023 0310 	bic.w	r3, r3, #16
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	7b5b      	ldrb	r3, [r3, #13]
 8003a56:	b25b      	sxtb	r3, r3
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	b25a      	sxtb	r2, r3
 8003a5e:	7b7b      	ldrb	r3, [r7, #13]
 8003a60:	b25b      	sxtb	r3, r3
 8003a62:	4313      	orrs	r3, r2
 8003a64:	b25b      	sxtb	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f107 010d 	add.w	r1, r7, #13
 8003a76:	2201      	movs	r2, #1
 8003a78:	2073      	movs	r0, #115	@ 0x73
 8003a7a:	47a0      	blx	r4
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	461a      	mov	r2, r3
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 8003a90:	23fe      	movs	r3, #254	@ 0xfe
 8003a92:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8003a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd90      	pop	{r4, r7, pc}

08003aa0 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 8003aa0:	b590      	push	{r4, r7, lr}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f855 	bl	8003b58 <null_ptr_check>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8003ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d11b      	bne.n	8003af2 <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f107 010e 	add.w	r1, r7, #14
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	20f3      	movs	r0, #243	@ 0xf3
 8003aca:	47a0      	blx	r4
 8003acc:	4603      	mov	r3, r0
 8003ace:	461a      	mov	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <get_mem_page+0x46>
        {
            rslt = BME68X_E_COM_FAIL;
 8003ae0:	23fe      	movs	r3, #254	@ 0xfe
 8003ae2:	73fb      	strb	r3, [r7, #15]
 8003ae4:	e005      	b.n	8003af2 <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 8003ae6:	7bbb      	ldrb	r3, [r7, #14]
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 8003af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd90      	pop	{r4, r7, pc}

08003afe <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b086      	sub	sp, #24
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	460b      	mov	r3, r1
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f823 	bl	8003b58 <null_ptr_check>
 8003b12:	4603      	mov	r3, r0
 8003b14:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME68X_OK))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d015      	beq.n	8003b48 <boundary_check+0x4a>
 8003b1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d111      	bne.n	8003b48 <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	7afa      	ldrb	r2, [r7, #11]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d20e      	bcs.n	8003b4c <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	7afa      	ldrb	r2, [r7, #11]
 8003b32:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (*value > max)
 8003b46:	e001      	b.n	8003b4c <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8003b48:	23ff      	movs	r3, #255	@ 0xff
 8003b4a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003b4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00b      	beq.n	8003b82 <null_ptr_check+0x2a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d007      	beq.n	8003b82 <null_ptr_check+0x2a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <null_ptr_check+0x2a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 8003b82:	23ff      	movs	r3, #255	@ 0xff
 8003b84:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 8003b96:	b590      	push	{r4, r7, lr}
 8003b98:	b093      	sub	sp, #76	@ 0x4c
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME68X_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8003bb2:	236e      	movs	r3, #110	@ 0x6e
 8003bb4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8003bb8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	605a      	str	r2, [r3, #4]
 8003bc2:	811a      	strh	r2, [r3, #8]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8003bc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	811a      	strh	r2, [r3, #8]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8003bd0:	f107 0320 	add.w	r3, r7, #32
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	605a      	str	r2, [r3, #4]
 8003bda:	811a      	strh	r2, [r3, #8]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8003bdc:	f107 0314 	add.w	r3, r7, #20
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	811a      	strh	r2, [r3, #8]

    switch (op_mode)
 8003be8:	7afb      	ldrb	r3, [r7, #11]
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d024      	beq.n	8003c38 <set_conf+0xa2>
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	f300 80f9 	bgt.w	8003de6 <set_conf+0x250>
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d002      	beq.n	8003bfe <set_conf+0x68>
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d07c      	beq.n	8003cf6 <set_conf+0x160>
 8003bfc:	e0f3      	b.n	8003de6 <set_conf+0x250>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 8003bfe:	235a      	movs	r3, #90	@ 0x5a
 8003c00:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	885b      	ldrh	r3, [r3, #2]
 8003c08:	6839      	ldr	r1, [r7, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff faa6 	bl	800315c <calc_res_heat>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8003c16:	2364      	movs	r3, #100	@ 0x64
 8003c18:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	889b      	ldrh	r3, [r3, #4]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fb4b 	bl	80032bc <calc_gas_wait>
 8003c26:	4603      	mov	r3, r0
 8003c28:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 8003c30:	2301      	movs	r3, #1
 8003c32:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8003c36:	e0db      	b.n	8003df0 <set_conf+0x25a>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <set_conf+0xb2>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d103      	bne.n	8003c50 <set_conf+0xba>
            {
                rslt = BME68X_E_NULL_PTR;
 8003c48:	23ff      	movs	r3, #255	@ 0xff
 8003c4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 8003c4e:	e0cf      	b.n	8003df0 <set_conf+0x25a>
            }

            for (i = 0; i < conf->profile_len; i++)
 8003c50:	2300      	movs	r3, #0
 8003c52:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8003c56:	e03f      	b.n	8003cd8 <set_conf+0x142>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8003c58:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003c5c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8003c60:	325a      	adds	r2, #90	@ 0x5a
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	3348      	adds	r3, #72	@ 0x48
 8003c66:	443b      	add	r3, r7
 8003c68:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	4413      	add	r3, r2
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8003c7e:	6839      	ldr	r1, [r7, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff fa6b 	bl	800315c <calc_res_heat>
 8003c86:	4603      	mov	r3, r0
 8003c88:	461a      	mov	r2, r3
 8003c8a:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8003c8e:	443b      	add	r3, r7
 8003c90:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8003c94:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003c98:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8003c9c:	3264      	adds	r2, #100	@ 0x64
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	3348      	adds	r3, #72	@ 0x48
 8003ca2:	443b      	add	r3, r7
 8003ca4:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4413      	add	r3, r2
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fafe 	bl	80032bc <calc_gas_wait>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8003cc8:	443b      	add	r3, r7
 8003cca:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8003cce:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	7c1b      	ldrb	r3, [r3, #16]
 8003cdc:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d3b9      	bcc.n	8003c58 <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	7c1a      	ldrb	r2, [r3, #16]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	7c1b      	ldrb	r3, [r3, #16]
 8003cf0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8003cf4:	e07c      	b.n	8003df0 <set_conf+0x25a>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <set_conf+0x170>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d103      	bne.n	8003d0e <set_conf+0x178>
            {
                rslt = BME68X_E_NULL_PTR;
 8003d06:	23ff      	movs	r3, #255	@ 0xff
 8003d08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 8003d0c:	e070      	b.n	8003df0 <set_conf+0x25a>
            }

            if (conf->shared_heatr_dur == 0)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8a5b      	ldrh	r3, [r3, #18]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d102      	bne.n	8003d1c <set_conf+0x186>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8003d16:	2303      	movs	r3, #3
 8003d18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8003d22:	e03a      	b.n	8003d9a <set_conf+0x204>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8003d24:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003d28:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8003d2c:	325a      	adds	r2, #90	@ 0x5a
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	3348      	adds	r3, #72	@ 0x48
 8003d32:	443b      	add	r3, r7
 8003d34:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	4413      	add	r3, r2
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8003d4a:	6839      	ldr	r1, [r7, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff fa05 	bl	800315c <calc_res_heat>
 8003d52:	4603      	mov	r3, r0
 8003d54:	461a      	mov	r2, r3
 8003d56:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8003d5a:	443b      	add	r3, r7
 8003d5c:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8003d60:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003d64:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8003d68:	3264      	adds	r2, #100	@ 0x64
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	3348      	adds	r3, #72	@ 0x48
 8003d6e:	443b      	add	r3, r7
 8003d70:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	4413      	add	r3, r2
 8003d80:	881a      	ldrh	r2, [r3, #0]
 8003d82:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	3348      	adds	r3, #72	@ 0x48
 8003d8a:	443b      	add	r3, r7
 8003d8c:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8003d90:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003d94:	3301      	adds	r3, #1
 8003d96:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	7c1b      	ldrb	r3, [r3, #16]
 8003d9e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d3be      	bcc.n	8003d24 <set_conf+0x18e>
            }

            (*nb_conv) = conf->profile_len;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	7c1a      	ldrb	r2, [r3, #16]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	7c1b      	ldrb	r3, [r3, #16]
 8003db2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8a5b      	ldrh	r3, [r3, #18]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 f83e 	bl	8003e3c <calc_heatr_dur_shared>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            if (rslt == BME68X_OK)
 8003dc6:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10f      	bne.n	8003dee <set_conf+0x258>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8003dce:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8003dd2:	f107 0043 	add.w	r0, r7, #67	@ 0x43
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f7fe fa24 	bl	8002226 <bme68x_set_regs>
 8003dde:	4603      	mov	r3, r0
 8003de0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            break;
 8003de4:	e003      	b.n	8003dee <set_conf+0x258>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8003de6:	2301      	movs	r3, #1
 8003de8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003dec:	e000      	b.n	8003df0 <set_conf+0x25a>
            break;
 8003dee:	bf00      	nop
    }

    if (rslt == BME68X_OK)
 8003df0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10b      	bne.n	8003e10 <set_conf+0x27a>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8003df8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003dfc:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8003e00:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	f7fe fa0e 	bl	8002226 <bme68x_set_regs>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    if (rslt == BME68X_OK)
 8003e10:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10b      	bne.n	8003e30 <set_conf+0x29a>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8003e18:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003e1c:	f107 0114 	add.w	r1, r7, #20
 8003e20:	f107 0020 	add.w	r0, r7, #32
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	f7fe f9fe 	bl	8002226 <bme68x_set_regs>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 8003e30:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	374c      	adds	r7, #76	@ 0x4c
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd90      	pop	{r4, r7, pc}

08003e3c <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8003e46:	2300      	movs	r3, #0
 8003e48:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 8003e4a:	88fb      	ldrh	r3, [r7, #6]
 8003e4c:	f240 7282 	movw	r2, #1922	@ 0x782
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d902      	bls.n	8003e5a <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 8003e54:	23ff      	movs	r3, #255	@ 0xff
 8003e56:	73bb      	strb	r3, [r7, #14]
 8003e58:	e01d      	b.n	8003e96 <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003e60:	fb03 f202 	mul.w	r2, r3, r2
 8003e64:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea4 <calc_heatr_dur_shared+0x68>)
 8003e66:	fba3 1302 	umull	r1, r3, r3, r2
 8003e6a:	1ad2      	subs	r2, r2, r3
 8003e6c:	0852      	lsrs	r2, r2, #1
 8003e6e:	4413      	add	r3, r2
 8003e70:	0a1b      	lsrs	r3, r3, #8
 8003e72:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 8003e74:	e005      	b.n	8003e82 <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 8003e76:	88fb      	ldrh	r3, [r7, #6]
 8003e78:	089b      	lsrs	r3, r3, #2
 8003e7a:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8003e82:	88fb      	ldrh	r3, [r7, #6]
 8003e84:	2b3f      	cmp	r3, #63	@ 0x3f
 8003e86:	d8f6      	bhi.n	8003e76 <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8003e88:	88fb      	ldrh	r3, [r7, #6]
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	019b      	lsls	r3, r3, #6
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 8003e96:	7bbb      	ldrb	r3, [r7, #14]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	12c8b89f 	.word	0x12c8b89f

08003ea8 <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	603a      	str	r2, [r7, #0]
 8003eb2:	71fb      	strb	r3, [r7, #7]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	71bb      	strb	r3, [r7, #6]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	789b      	ldrb	r3, [r3, #2]
 8003ec4:	81fb      	strh	r3, [r7, #14]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8003ec6:	79bb      	ldrb	r3, [r7, #6]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	4413      	add	r3, r2
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	789b      	ldrb	r3, [r3, #2]
 8003ed2:	81bb      	strh	r3, [r7, #12]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	4413      	add	r3, r2
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	b25b      	sxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	da21      	bge.n	8003f2a <sort_sensor_data+0x82>
 8003ee6:	79bb      	ldrb	r3, [r7, #6]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	4413      	add	r3, r2
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	b25b      	sxtb	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	da18      	bge.n	8003f2a <sort_sensor_data+0x82>
    {
        int16_t diff = meas_index2 - meas_index1;
 8003ef8:	89ba      	ldrh	r2, [r7, #12]
 8003efa:	89fb      	ldrh	r3, [r7, #14]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	817b      	strh	r3, [r7, #10]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8003f02:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003f06:	f113 0f02 	cmn.w	r3, #2
 8003f0a:	db03      	blt.n	8003f14 <sort_sensor_data+0x6c>
 8003f0c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	db03      	blt.n	8003f1c <sort_sensor_data+0x74>
 8003f14:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	dd16      	ble.n	8003f4a <sort_sensor_data+0xa2>
        {
            swap_fields(low_index, high_index, field);
 8003f1c:	79b9      	ldrb	r1, [r7, #6]
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 f816 	bl	8003f54 <swap_fields>
    {
 8003f28:	e00f      	b.n	8003f4a <sort_sensor_data+0xa2>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 8003f2a:	79bb      	ldrb	r3, [r7, #6]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	4413      	add	r3, r2
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	b25b      	sxtb	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	da07      	bge.n	8003f4c <sort_sensor_data+0xa4>
    {
        swap_fields(low_index, high_index, field);
 8003f3c:	79b9      	ldrb	r1, [r7, #6]
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 f806 	bl	8003f54 <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 8003f48:	e000      	b.n	8003f4c <sort_sensor_data+0xa4>
    {
 8003f4a:	bf00      	nop
}
 8003f4c:	bf00      	nop
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	603a      	str	r2, [r7, #0]
 8003f5e:	71fb      	strb	r3, [r7, #7]
 8003f60:	460b      	mov	r3, r1
 8003f62:	71bb      	strb	r3, [r7, #6]
    struct bme68x_data *temp;

    temp = field[index1];
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 8003f70:	79bb      	ldrb	r3, [r7, #6]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	441a      	add	r2, r3
 8003f78:	79fb      	ldrb	r3, [r7, #7]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	6839      	ldr	r1, [r7, #0]
 8003f7e:	440b      	add	r3, r1
 8003f80:	6812      	ldr	r2, [r2, #0]
 8003f82:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 8003f84:	79bb      	ldrb	r3, [r7, #6]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	601a      	str	r2, [r3, #0]
}
 8003f90:	bf00      	nop
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08e      	sub	sp, #56	@ 0x38
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8003fa4:	f107 010c 	add.w	r1, r7, #12
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2217      	movs	r2, #23
 8003fac:	208a      	movs	r0, #138	@ 0x8a
 8003fae:	f7fe f9c9 	bl	8002344 <bme68x_get_regs>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (rslt == BME68X_OK)
 8003fb8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <get_calib_data+0x3c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8003fc0:	f107 030c 	add.w	r3, r7, #12
 8003fc4:	f103 0117 	add.w	r1, r3, #23
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	220e      	movs	r2, #14
 8003fcc:	20e1      	movs	r0, #225	@ 0xe1
 8003fce:	f7fe f9b9 	bl	8002344 <bme68x_get_regs>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    if (rslt == BME68X_OK)
 8003fd8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10b      	bne.n	8003ff8 <get_calib_data+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8003fe0:	f107 030c 	add.w	r3, r7, #12
 8003fe4:	f103 0125 	add.w	r1, r3, #37	@ 0x25
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2205      	movs	r2, #5
 8003fec:	2000      	movs	r0, #0
 8003fee:	f7fe f9a9 	bl	8002344 <bme68x_get_regs>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 8003ff8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f040 80d6 	bne.w	80041ae <get_calib_data+0x212>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8004002:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004006:	b21b      	sxth	r3, r3
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	b21a      	sxth	r2, r3
 800400c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004010:	b21b      	sxth	r3, r3
 8004012:	4313      	orrs	r3, r2
 8004014:	b21b      	sxth	r3, r3
 8004016:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 800401c:	7b7b      	ldrb	r3, [r7, #13]
 800401e:	b21b      	sxth	r3, r3
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	b21a      	sxth	r2, r3
 8004024:	7b3b      	ldrb	r3, [r7, #12]
 8004026:	b21b      	sxth	r3, r3
 8004028:	4313      	orrs	r3, r2
 800402a:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8004030:	7bbb      	ldrb	r3, [r7, #14]
 8004032:	b25a      	sxtb	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 800403a:	7c7b      	ldrb	r3, [r7, #17]
 800403c:	b21b      	sxth	r3, r3
 800403e:	021b      	lsls	r3, r3, #8
 8004040:	b21a      	sxth	r2, r3
 8004042:	7c3b      	ldrb	r3, [r7, #16]
 8004044:	b21b      	sxth	r3, r3
 8004046:	4313      	orrs	r3, r2
 8004048:	b21b      	sxth	r3, r3
 800404a:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 8004050:	7cfb      	ldrb	r3, [r7, #19]
 8004052:	b21b      	sxth	r3, r3
 8004054:	021b      	lsls	r3, r3, #8
 8004056:	b21a      	sxth	r2, r3
 8004058:	7cbb      	ldrb	r3, [r7, #18]
 800405a:	b21b      	sxth	r3, r3
 800405c:	4313      	orrs	r3, r2
 800405e:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8004064:	7d3b      	ldrb	r3, [r7, #20]
 8004066:	b25a      	sxtb	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 800406e:	7dfb      	ldrb	r3, [r7, #23]
 8004070:	b21b      	sxth	r3, r3
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	b21a      	sxth	r2, r3
 8004076:	7dbb      	ldrb	r3, [r7, #22]
 8004078:	b21b      	sxth	r3, r3
 800407a:	4313      	orrs	r3, r2
 800407c:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8004082:	7e7b      	ldrb	r3, [r7, #25]
 8004084:	b21b      	sxth	r3, r3
 8004086:	021b      	lsls	r3, r3, #8
 8004088:	b21a      	sxth	r2, r3
 800408a:	7e3b      	ldrb	r3, [r7, #24]
 800408c:	b21b      	sxth	r3, r3
 800408e:	4313      	orrs	r3, r2
 8004090:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8004096:	7efb      	ldrb	r3, [r7, #27]
 8004098:	b25a      	sxtb	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 80040a0:	7ebb      	ldrb	r3, [r7, #26]
 80040a2:	b25a      	sxtb	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 80040aa:	7ffb      	ldrb	r3, [r7, #31]
 80040ac:	b21b      	sxth	r3, r3
 80040ae:	021b      	lsls	r3, r3, #8
 80040b0:	b21a      	sxth	r2, r3
 80040b2:	7fbb      	ldrb	r3, [r7, #30]
 80040b4:	b21b      	sxth	r3, r3
 80040b6:	4313      	orrs	r3, r2
 80040b8:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 80040be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80040c2:	b21b      	sxth	r3, r3
 80040c4:	021b      	lsls	r3, r3, #8
 80040c6:	b21a      	sxth	r2, r3
 80040c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80040cc:	b21b      	sxth	r3, r3
 80040ce:	4313      	orrs	r3, r2
 80040d0:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 80040d6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 80040e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80040e4:	b21b      	sxth	r3, r3
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 80040ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80040ee:	b21b      	sxth	r3, r3
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 80040f6:	4313      	orrs	r3, r2
 80040f8:	b21b      	sxth	r3, r3
 80040fa:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8004100:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004104:	b21b      	sxth	r3, r3
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	b21a      	sxth	r2, r3
 800410a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800410e:	091b      	lsrs	r3, r3, #4
 8004110:	b2db      	uxtb	r3, r3
 8004112:	b21b      	sxth	r3, r3
 8004114:	4313      	orrs	r3, r2
 8004116:	b21b      	sxth	r3, r3
 8004118:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 800411e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004122:	b25a      	sxtb	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8004128:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800412c:	b25a      	sxtb	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8004132:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004136:	b25a      	sxtb	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 800413c:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8004144:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004148:	b25a      	sxtb	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 800414e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004152:	b25a      	sxtb	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8004158:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800415c:	b21b      	sxth	r3, r3
 800415e:	021b      	lsls	r3, r3, #8
 8004160:	b21a      	sxth	r2, r3
 8004162:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8004166:	b21b      	sxth	r3, r3
 8004168:	4313      	orrs	r3, r2
 800416a:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8004170:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004174:	b25a      	sxtb	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 800417a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800417e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004182:	2b00      	cmp	r3, #0
 8004184:	da00      	bge.n	8004188 <get_calib_data+0x1ec>
 8004186:	330f      	adds	r3, #15
 8004188:	111b      	asrs	r3, r3, #4
 800418a:	b2da      	uxtb	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8004192:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8004196:	b25a      	sxtb	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 800419e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80041a2:	b25b      	sxtb	r3, r3
 80041a4:	111b      	asrs	r3, r3, #4
 80041a6:	b25a      	sxtb	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }

    return rslt;
 80041ae:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3738      	adds	r7, #56	@ 0x38
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 80041c6:	f107 010e 	add.w	r1, r7, #14
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	20f0      	movs	r0, #240	@ 0xf0
 80041d0:	f7fe f8b8 	bl	8002344 <bme68x_get_regs>
 80041d4:	4603      	mov	r3, r0
 80041d6:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 80041d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d103      	bne.n	80041e8 <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 80041e0:	7bbb      	ldrb	r3, [r7, #14]
 80041e2:	461a      	mov	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 80041e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041fa:	2003      	movs	r0, #3
 80041fc:	f000 f96e 	bl	80044dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004200:	f002 fbaa 	bl	8006958 <HAL_RCC_GetSysClockFreq>
 8004204:	4602      	mov	r2, r0
 8004206:	4b15      	ldr	r3, [pc, #84]	@ (800425c <HAL_Init+0x68>)
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	0a1b      	lsrs	r3, r3, #8
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	4913      	ldr	r1, [pc, #76]	@ (8004260 <HAL_Init+0x6c>)
 8004212:	5ccb      	ldrb	r3, [r1, r3]
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
 800421c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800421e:	4b0f      	ldr	r3, [pc, #60]	@ (800425c <HAL_Init+0x68>)
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	4a0e      	ldr	r2, [pc, #56]	@ (8004260 <HAL_Init+0x6c>)
 8004228:	5cd3      	ldrb	r3, [r2, r3]
 800422a:	f003 031f 	and.w	r3, r3, #31
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	fa22 f303 	lsr.w	r3, r2, r3
 8004234:	4a0b      	ldr	r2, [pc, #44]	@ (8004264 <HAL_Init+0x70>)
 8004236:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004238:	4a0b      	ldr	r2, [pc, #44]	@ (8004268 <HAL_Init+0x74>)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800423e:	200f      	movs	r0, #15
 8004240:	f000 f814 	bl	800426c <HAL_InitTick>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e002      	b.n	8004254 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800424e:	f7fc ff6f 	bl	8001130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	58024400 	.word	0x58024400
 8004260:	0800d2c4 	.word	0x0800d2c4
 8004264:	24000004 	.word	0x24000004
 8004268:	24000000 	.word	0x24000000

0800426c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004274:	4b15      	ldr	r3, [pc, #84]	@ (80042cc <HAL_InitTick+0x60>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e021      	b.n	80042c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004280:	4b13      	ldr	r3, [pc, #76]	@ (80042d0 <HAL_InitTick+0x64>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	4b11      	ldr	r3, [pc, #68]	@ (80042cc <HAL_InitTick+0x60>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	4619      	mov	r1, r3
 800428a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800428e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004292:	fbb2 f3f3 	udiv	r3, r2, r3
 8004296:	4618      	mov	r0, r3
 8004298:	f000 f945 	bl	8004526 <HAL_SYSTICK_Config>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e00e      	b.n	80042c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b0f      	cmp	r3, #15
 80042aa:	d80a      	bhi.n	80042c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042ac:	2200      	movs	r2, #0
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	f04f 30ff 	mov.w	r0, #4294967295
 80042b4:	f000 f91d 	bl	80044f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042b8:	4a06      	ldr	r2, [pc, #24]	@ (80042d4 <HAL_InitTick+0x68>)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	e000      	b.n	80042c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	2400000c 	.word	0x2400000c
 80042d0:	24000000 	.word	0x24000000
 80042d4:	24000008 	.word	0x24000008

080042d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80042dc:	4b06      	ldr	r3, [pc, #24]	@ (80042f8 <HAL_IncTick+0x20>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	461a      	mov	r2, r3
 80042e2:	4b06      	ldr	r3, [pc, #24]	@ (80042fc <HAL_IncTick+0x24>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4413      	add	r3, r2
 80042e8:	4a04      	ldr	r2, [pc, #16]	@ (80042fc <HAL_IncTick+0x24>)
 80042ea:	6013      	str	r3, [r2, #0]
}
 80042ec:	bf00      	nop
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	2400000c 	.word	0x2400000c
 80042fc:	24000388 	.word	0x24000388

08004300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  return uwTick;
 8004304:	4b03      	ldr	r3, [pc, #12]	@ (8004314 <HAL_GetTick+0x14>)
 8004306:	681b      	ldr	r3, [r3, #0]
}
 8004308:	4618      	mov	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	24000388 	.word	0x24000388

08004318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004320:	f7ff ffee 	bl	8004300 <HAL_GetTick>
 8004324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d005      	beq.n	800433e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004332:	4b0a      	ldr	r3, [pc, #40]	@ (800435c <HAL_Delay+0x44>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4413      	add	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800433e:	bf00      	nop
 8004340:	f7ff ffde 	bl	8004300 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	429a      	cmp	r2, r3
 800434e:	d8f7      	bhi.n	8004340 <HAL_Delay+0x28>
  {
  }
}
 8004350:	bf00      	nop
 8004352:	bf00      	nop
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	2400000c 	.word	0x2400000c

08004360 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004364:	4b03      	ldr	r3, [pc, #12]	@ (8004374 <HAL_GetREVID+0x14>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	0c1b      	lsrs	r3, r3, #16
}
 800436a:	4618      	mov	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	5c001000 	.word	0x5c001000

08004378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004388:	4b0b      	ldr	r3, [pc, #44]	@ (80043b8 <__NVIC_SetPriorityGrouping+0x40>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004394:	4013      	ands	r3, r2
 8004396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80043a0:	4b06      	ldr	r3, [pc, #24]	@ (80043bc <__NVIC_SetPriorityGrouping+0x44>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043a6:	4a04      	ldr	r2, [pc, #16]	@ (80043b8 <__NVIC_SetPriorityGrouping+0x40>)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	60d3      	str	r3, [r2, #12]
}
 80043ac:	bf00      	nop
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	e000ed00 	.word	0xe000ed00
 80043bc:	05fa0000 	.word	0x05fa0000

080043c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043c4:	4b04      	ldr	r3, [pc, #16]	@ (80043d8 <__NVIC_GetPriorityGrouping+0x18>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	0a1b      	lsrs	r3, r3, #8
 80043ca:	f003 0307 	and.w	r3, r3, #7
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	e000ed00 	.word	0xe000ed00

080043dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	6039      	str	r1, [r7, #0]
 80043e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80043e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	db0a      	blt.n	8004406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	490c      	ldr	r1, [pc, #48]	@ (8004428 <__NVIC_SetPriority+0x4c>)
 80043f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043fa:	0112      	lsls	r2, r2, #4
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	440b      	add	r3, r1
 8004400:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004404:	e00a      	b.n	800441c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	b2da      	uxtb	r2, r3
 800440a:	4908      	ldr	r1, [pc, #32]	@ (800442c <__NVIC_SetPriority+0x50>)
 800440c:	88fb      	ldrh	r3, [r7, #6]
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	3b04      	subs	r3, #4
 8004414:	0112      	lsls	r2, r2, #4
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	440b      	add	r3, r1
 800441a:	761a      	strb	r2, [r3, #24]
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	e000e100 	.word	0xe000e100
 800442c:	e000ed00 	.word	0xe000ed00

08004430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004430:	b480      	push	{r7}
 8004432:	b089      	sub	sp, #36	@ 0x24
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f1c3 0307 	rsb	r3, r3, #7
 800444a:	2b04      	cmp	r3, #4
 800444c:	bf28      	it	cs
 800444e:	2304      	movcs	r3, #4
 8004450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	3304      	adds	r3, #4
 8004456:	2b06      	cmp	r3, #6
 8004458:	d902      	bls.n	8004460 <NVIC_EncodePriority+0x30>
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	3b03      	subs	r3, #3
 800445e:	e000      	b.n	8004462 <NVIC_EncodePriority+0x32>
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004464:	f04f 32ff 	mov.w	r2, #4294967295
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43da      	mvns	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	401a      	ands	r2, r3
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004478:	f04f 31ff 	mov.w	r1, #4294967295
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	fa01 f303 	lsl.w	r3, r1, r3
 8004482:	43d9      	mvns	r1, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004488:	4313      	orrs	r3, r2
         );
}
 800448a:	4618      	mov	r0, r3
 800448c:	3724      	adds	r7, #36	@ 0x24
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
	...

08004498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044a8:	d301      	bcc.n	80044ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044aa:	2301      	movs	r3, #1
 80044ac:	e00f      	b.n	80044ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044ae:	4a0a      	ldr	r2, [pc, #40]	@ (80044d8 <SysTick_Config+0x40>)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044b6:	210f      	movs	r1, #15
 80044b8:	f04f 30ff 	mov.w	r0, #4294967295
 80044bc:	f7ff ff8e 	bl	80043dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044c0:	4b05      	ldr	r3, [pc, #20]	@ (80044d8 <SysTick_Config+0x40>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044c6:	4b04      	ldr	r3, [pc, #16]	@ (80044d8 <SysTick_Config+0x40>)
 80044c8:	2207      	movs	r2, #7
 80044ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	e000e010 	.word	0xe000e010

080044dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff ff47 	bl	8004378 <__NVIC_SetPriorityGrouping>
}
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b086      	sub	sp, #24
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	4603      	mov	r3, r0
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
 80044fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004500:	f7ff ff5e 	bl	80043c0 <__NVIC_GetPriorityGrouping>
 8004504:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	6978      	ldr	r0, [r7, #20]
 800450c:	f7ff ff90 	bl	8004430 <NVIC_EncodePriority>
 8004510:	4602      	mov	r2, r0
 8004512:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004516:	4611      	mov	r1, r2
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff ff5f 	bl	80043dc <__NVIC_SetPriority>
}
 800451e:	bf00      	nop
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff ffb2 	bl	8004498 <SysTick_Config>
 8004534:	4603      	mov	r3, r0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004540:	b480      	push	{r7}
 8004542:	b089      	sub	sp, #36	@ 0x24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800454a:	2300      	movs	r3, #0
 800454c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800454e:	4b89      	ldr	r3, [pc, #548]	@ (8004774 <HAL_GPIO_Init+0x234>)
 8004550:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004552:	e194      	b.n	800487e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	2101      	movs	r1, #1
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	fa01 f303 	lsl.w	r3, r1, r3
 8004560:	4013      	ands	r3, r2
 8004562:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8186 	beq.w	8004878 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f003 0303 	and.w	r3, r3, #3
 8004574:	2b01      	cmp	r3, #1
 8004576:	d005      	beq.n	8004584 <HAL_GPIO_Init+0x44>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d130      	bne.n	80045e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	2203      	movs	r2, #3
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	43db      	mvns	r3, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4013      	ands	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045ba:	2201      	movs	r2, #1
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4013      	ands	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	091b      	lsrs	r3, r3, #4
 80045d0:	f003 0201 	and.w	r2, r3, #1
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4313      	orrs	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d017      	beq.n	8004622 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	2203      	movs	r2, #3
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	43db      	mvns	r3, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4013      	ands	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4313      	orrs	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d123      	bne.n	8004676 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	08da      	lsrs	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3208      	adds	r2, #8
 8004636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800463a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	220f      	movs	r2, #15
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4013      	ands	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	4313      	orrs	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	08da      	lsrs	r2, r3, #3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3208      	adds	r2, #8
 8004670:	69b9      	ldr	r1, [r7, #24]
 8004672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	2203      	movs	r2, #3
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 0203 	and.w	r2, r3, #3
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 80e0 	beq.w	8004878 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004778 <HAL_GPIO_Init+0x238>)
 80046ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046be:	4a2e      	ldr	r2, [pc, #184]	@ (8004778 <HAL_GPIO_Init+0x238>)
 80046c0:	f043 0302 	orr.w	r3, r3, #2
 80046c4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80046c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004778 <HAL_GPIO_Init+0x238>)
 80046ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046d6:	4a29      	ldr	r2, [pc, #164]	@ (800477c <HAL_GPIO_Init+0x23c>)
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	089b      	lsrs	r3, r3, #2
 80046dc:	3302      	adds	r3, #2
 80046de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	220f      	movs	r2, #15
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4013      	ands	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a20      	ldr	r2, [pc, #128]	@ (8004780 <HAL_GPIO_Init+0x240>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d052      	beq.n	80047a8 <HAL_GPIO_Init+0x268>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a1f      	ldr	r2, [pc, #124]	@ (8004784 <HAL_GPIO_Init+0x244>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d031      	beq.n	800476e <HAL_GPIO_Init+0x22e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a1e      	ldr	r2, [pc, #120]	@ (8004788 <HAL_GPIO_Init+0x248>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d02b      	beq.n	800476a <HAL_GPIO_Init+0x22a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a1d      	ldr	r2, [pc, #116]	@ (800478c <HAL_GPIO_Init+0x24c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d025      	beq.n	8004766 <HAL_GPIO_Init+0x226>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a1c      	ldr	r2, [pc, #112]	@ (8004790 <HAL_GPIO_Init+0x250>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d01f      	beq.n	8004762 <HAL_GPIO_Init+0x222>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a1b      	ldr	r2, [pc, #108]	@ (8004794 <HAL_GPIO_Init+0x254>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d019      	beq.n	800475e <HAL_GPIO_Init+0x21e>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a1a      	ldr	r2, [pc, #104]	@ (8004798 <HAL_GPIO_Init+0x258>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d013      	beq.n	800475a <HAL_GPIO_Init+0x21a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a19      	ldr	r2, [pc, #100]	@ (800479c <HAL_GPIO_Init+0x25c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00d      	beq.n	8004756 <HAL_GPIO_Init+0x216>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a18      	ldr	r2, [pc, #96]	@ (80047a0 <HAL_GPIO_Init+0x260>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d007      	beq.n	8004752 <HAL_GPIO_Init+0x212>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a17      	ldr	r2, [pc, #92]	@ (80047a4 <HAL_GPIO_Init+0x264>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d101      	bne.n	800474e <HAL_GPIO_Init+0x20e>
 800474a:	2309      	movs	r3, #9
 800474c:	e02d      	b.n	80047aa <HAL_GPIO_Init+0x26a>
 800474e:	230a      	movs	r3, #10
 8004750:	e02b      	b.n	80047aa <HAL_GPIO_Init+0x26a>
 8004752:	2308      	movs	r3, #8
 8004754:	e029      	b.n	80047aa <HAL_GPIO_Init+0x26a>
 8004756:	2307      	movs	r3, #7
 8004758:	e027      	b.n	80047aa <HAL_GPIO_Init+0x26a>
 800475a:	2306      	movs	r3, #6
 800475c:	e025      	b.n	80047aa <HAL_GPIO_Init+0x26a>
 800475e:	2305      	movs	r3, #5
 8004760:	e023      	b.n	80047aa <HAL_GPIO_Init+0x26a>
 8004762:	2304      	movs	r3, #4
 8004764:	e021      	b.n	80047aa <HAL_GPIO_Init+0x26a>
 8004766:	2303      	movs	r3, #3
 8004768:	e01f      	b.n	80047aa <HAL_GPIO_Init+0x26a>
 800476a:	2302      	movs	r3, #2
 800476c:	e01d      	b.n	80047aa <HAL_GPIO_Init+0x26a>
 800476e:	2301      	movs	r3, #1
 8004770:	e01b      	b.n	80047aa <HAL_GPIO_Init+0x26a>
 8004772:	bf00      	nop
 8004774:	58000080 	.word	0x58000080
 8004778:	58024400 	.word	0x58024400
 800477c:	58000400 	.word	0x58000400
 8004780:	58020000 	.word	0x58020000
 8004784:	58020400 	.word	0x58020400
 8004788:	58020800 	.word	0x58020800
 800478c:	58020c00 	.word	0x58020c00
 8004790:	58021000 	.word	0x58021000
 8004794:	58021400 	.word	0x58021400
 8004798:	58021800 	.word	0x58021800
 800479c:	58021c00 	.word	0x58021c00
 80047a0:	58022000 	.word	0x58022000
 80047a4:	58022400 	.word	0x58022400
 80047a8:	2300      	movs	r3, #0
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	f002 0203 	and.w	r2, r2, #3
 80047b0:	0092      	lsls	r2, r2, #2
 80047b2:	4093      	lsls	r3, r2
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047ba:	4938      	ldr	r1, [pc, #224]	@ (800489c <HAL_GPIO_Init+0x35c>)
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	089b      	lsrs	r3, r3, #2
 80047c0:	3302      	adds	r3, #2
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	43db      	mvns	r3, r3
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	4013      	ands	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80047ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80047f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800481c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	43db      	mvns	r3, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4013      	ands	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	43db      	mvns	r3, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4013      	ands	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	3301      	adds	r3, #1
 800487c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	f47f ae63 	bne.w	8004554 <HAL_GPIO_Init+0x14>
  }
}
 800488e:	bf00      	nop
 8004890:	bf00      	nop
 8004892:	3724      	adds	r7, #36	@ 0x24
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	58000400 	.word	0x58000400

080048a0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80048a8:	4a08      	ldr	r2, [pc, #32]	@ (80048cc <HAL_HSEM_FastTake+0x2c>)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3320      	adds	r3, #32
 80048ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b2:	4a07      	ldr	r2, [pc, #28]	@ (80048d0 <HAL_HSEM_FastTake+0x30>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d101      	bne.n	80048bc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	e000      	b.n	80048be <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
}
 80048be:	4618      	mov	r0, r3
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	58026400 	.word	0x58026400
 80048d0:	80000300 	.word	0x80000300

080048d4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80048de:	4906      	ldr	r1, [pc, #24]	@ (80048f8 <HAL_HSEM_Release+0x24>)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	58026400 	.word	0x58026400

080048fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e08b      	b.n	8004a26 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fc fc1e 	bl	8001164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2224      	movs	r2, #36	@ 0x24
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0201 	bic.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800494c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800495c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d107      	bne.n	8004976 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004972:	609a      	str	r2, [r3, #8]
 8004974:	e006      	b.n	8004984 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004982:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d108      	bne.n	800499e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800499a:	605a      	str	r2, [r3, #4]
 800499c:	e007      	b.n	80049ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6859      	ldr	r1, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004a30 <HAL_I2C_Init+0x134>)
 80049ba:	430b      	orrs	r3, r1
 80049bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691a      	ldr	r2, [r3, #16]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69d9      	ldr	r1, [r3, #28]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a1a      	ldr	r2, [r3, #32]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	02008000 	.word	0x02008000

08004a34 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	607a      	str	r2, [r7, #4]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	460b      	mov	r3, r1
 8004a42:	817b      	strh	r3, [r7, #10]
 8004a44:	4613      	mov	r3, r2
 8004a46:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	f040 80fd 	bne.w	8004c50 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <HAL_I2C_Master_Transmit+0x30>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e0f6      	b.n	8004c52 <HAL_I2C_Master_Transmit+0x21e>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a6c:	f7ff fc48 	bl	8004300 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	2319      	movs	r3, #25
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 fde6 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e0e1      	b.n	8004c52 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2221      	movs	r2, #33	@ 0x21
 8004a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2210      	movs	r2, #16
 8004a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	893a      	ldrh	r2, [r7, #8]
 8004aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2bff      	cmp	r3, #255	@ 0xff
 8004abe:	d906      	bls.n	8004ace <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	22ff      	movs	r2, #255	@ 0xff
 8004ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004ac6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	e007      	b.n	8004ade <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004ad8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004adc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d024      	beq.n	8004b30 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aea:	781a      	ldrb	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	8979      	ldrh	r1, [r7, #10]
 8004b22:	4b4e      	ldr	r3, [pc, #312]	@ (8004c5c <HAL_I2C_Master_Transmit+0x228>)
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 ffe1 	bl	8005af0 <I2C_TransferConfig>
 8004b2e:	e066      	b.n	8004bfe <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	8979      	ldrh	r1, [r7, #10]
 8004b38:	4b48      	ldr	r3, [pc, #288]	@ (8004c5c <HAL_I2C_Master_Transmit+0x228>)
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 ffd6 	bl	8005af0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004b44:	e05b      	b.n	8004bfe <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	6a39      	ldr	r1, [r7, #32]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 fdd9 	bl	8005702 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e07b      	b.n	8004c52 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5e:	781a      	ldrb	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d034      	beq.n	8004bfe <HAL_I2C_Master_Transmit+0x1ca>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d130      	bne.n	8004bfe <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2180      	movs	r1, #128	@ 0x80
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 fd52 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e04d      	b.n	8004c52 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2bff      	cmp	r3, #255	@ 0xff
 8004bbe:	d90e      	bls.n	8004bde <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	22ff      	movs	r2, #255	@ 0xff
 8004bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	8979      	ldrh	r1, [r7, #10]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 ff8a 	bl	8005af0 <I2C_TransferConfig>
 8004bdc:	e00f      	b.n	8004bfe <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	8979      	ldrh	r1, [r7, #10]
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 ff79 	bl	8005af0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d19e      	bne.n	8004b46 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	6a39      	ldr	r1, [r7, #32]
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 fdbf 	bl	8005790 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e01a      	b.n	8004c52 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2220      	movs	r2, #32
 8004c22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6859      	ldr	r1, [r3, #4]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c60 <HAL_I2C_Master_Transmit+0x22c>)
 8004c30:	400b      	ands	r3, r1
 8004c32:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	e000      	b.n	8004c52 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004c50:	2302      	movs	r3, #2
  }
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	80002000 	.word	0x80002000
 8004c60:	fe00e800 	.word	0xfe00e800

08004c64 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	607a      	str	r2, [r7, #4]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	460b      	mov	r3, r1
 8004c72:	817b      	strh	r3, [r7, #10]
 8004c74:	4613      	mov	r3, r2
 8004c76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	f040 80db 	bne.w	8004e3c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <HAL_I2C_Master_Receive+0x30>
 8004c90:	2302      	movs	r3, #2
 8004c92:	e0d4      	b.n	8004e3e <HAL_I2C_Master_Receive+0x1da>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c9c:	f7ff fb30 	bl	8004300 <HAL_GetTick>
 8004ca0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	2319      	movs	r3, #25
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 fcce 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e0bf      	b.n	8004e3e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2222      	movs	r2, #34	@ 0x22
 8004cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2210      	movs	r2, #16
 8004cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	893a      	ldrh	r2, [r7, #8]
 8004cde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2bff      	cmp	r3, #255	@ 0xff
 8004cee:	d90e      	bls.n	8004d0e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	22ff      	movs	r2, #255	@ 0xff
 8004cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	8979      	ldrh	r1, [r7, #10]
 8004cfe:	4b52      	ldr	r3, [pc, #328]	@ (8004e48 <HAL_I2C_Master_Receive+0x1e4>)
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 fef2 	bl	8005af0 <I2C_TransferConfig>
 8004d0c:	e06d      	b.n	8004dea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	8979      	ldrh	r1, [r7, #10]
 8004d20:	4b49      	ldr	r3, [pc, #292]	@ (8004e48 <HAL_I2C_Master_Receive+0x1e4>)
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 fee1 	bl	8005af0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004d2e:	e05c      	b.n	8004dea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	6a39      	ldr	r1, [r7, #32]
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 fd6f 	bl	8005818 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e07c      	b.n	8004e3e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d034      	beq.n	8004dea <HAL_I2C_Master_Receive+0x186>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d130      	bne.n	8004dea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	2180      	movs	r1, #128	@ 0x80
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 fc5c 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e04d      	b.n	8004e3e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2bff      	cmp	r3, #255	@ 0xff
 8004daa:	d90e      	bls.n	8004dca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	22ff      	movs	r2, #255	@ 0xff
 8004db0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	8979      	ldrh	r1, [r7, #10]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 fe94 	bl	8005af0 <I2C_TransferConfig>
 8004dc8:	e00f      	b.n	8004dea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	8979      	ldrh	r1, [r7, #10]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 fe83 	bl	8005af0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d19d      	bne.n	8004d30 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	6a39      	ldr	r1, [r7, #32]
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 fcc9 	bl	8005790 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e01a      	b.n	8004e3e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6859      	ldr	r1, [r3, #4]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e4c <HAL_I2C_Master_Receive+0x1e8>)
 8004e1c:	400b      	ands	r3, r1
 8004e1e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	e000      	b.n	8004e3e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004e3c:	2302      	movs	r3, #2
  }
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	80002400 	.word	0x80002400
 8004e4c:	fe00e800 	.word	0xfe00e800

08004e50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	4608      	mov	r0, r1
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4603      	mov	r3, r0
 8004e60:	817b      	strh	r3, [r7, #10]
 8004e62:	460b      	mov	r3, r1
 8004e64:	813b      	strh	r3, [r7, #8]
 8004e66:	4613      	mov	r3, r2
 8004e68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	f040 80f9 	bne.w	800506a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <HAL_I2C_Mem_Write+0x34>
 8004e7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d105      	bne.n	8004e90 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e8a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e0ed      	b.n	800506c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_I2C_Mem_Write+0x4e>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e0e6      	b.n	800506c <HAL_I2C_Mem_Write+0x21c>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ea6:	f7ff fa2b 	bl	8004300 <HAL_GetTick>
 8004eaa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	2319      	movs	r3, #25
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 fbc9 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e0d1      	b.n	800506c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2221      	movs	r2, #33	@ 0x21
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2240      	movs	r2, #64	@ 0x40
 8004ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a3a      	ldr	r2, [r7, #32]
 8004ee2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ef0:	88f8      	ldrh	r0, [r7, #6]
 8004ef2:	893a      	ldrh	r2, [r7, #8]
 8004ef4:	8979      	ldrh	r1, [r7, #10]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	9301      	str	r3, [sp, #4]
 8004efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	4603      	mov	r3, r0
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 fad9 	bl	80054b8 <I2C_RequestMemoryWrite>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0a9      	b.n	800506c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2bff      	cmp	r3, #255	@ 0xff
 8004f20:	d90e      	bls.n	8004f40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	22ff      	movs	r2, #255	@ 0xff
 8004f26:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	8979      	ldrh	r1, [r7, #10]
 8004f30:	2300      	movs	r3, #0
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 fdd9 	bl	8005af0 <I2C_TransferConfig>
 8004f3e:	e00f      	b.n	8004f60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	8979      	ldrh	r1, [r7, #10]
 8004f52:	2300      	movs	r3, #0
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fdc8 	bl	8005af0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 fbcc 	bl	8005702 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e07b      	b.n	800506c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	781a      	ldrb	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d034      	beq.n	8005018 <HAL_I2C_Mem_Write+0x1c8>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d130      	bne.n	8005018 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2180      	movs	r1, #128	@ 0x80
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 fb45 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e04d      	b.n	800506c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	2bff      	cmp	r3, #255	@ 0xff
 8004fd8:	d90e      	bls.n	8004ff8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	22ff      	movs	r2, #255	@ 0xff
 8004fde:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	8979      	ldrh	r1, [r7, #10]
 8004fe8:	2300      	movs	r3, #0
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 fd7d 	bl	8005af0 <I2C_TransferConfig>
 8004ff6:	e00f      	b.n	8005018 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005006:	b2da      	uxtb	r2, r3
 8005008:	8979      	ldrh	r1, [r7, #10]
 800500a:	2300      	movs	r3, #0
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 fd6c 	bl	8005af0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d19e      	bne.n	8004f60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 fbb2 	bl	8005790 <I2C_WaitOnSTOPFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e01a      	b.n	800506c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2220      	movs	r2, #32
 800503c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6859      	ldr	r1, [r3, #4]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	4b0a      	ldr	r3, [pc, #40]	@ (8005074 <HAL_I2C_Mem_Write+0x224>)
 800504a:	400b      	ands	r3, r1
 800504c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	e000      	b.n	800506c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800506a:	2302      	movs	r3, #2
  }
}
 800506c:	4618      	mov	r0, r3
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	fe00e800 	.word	0xfe00e800

08005078 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	4608      	mov	r0, r1
 8005082:	4611      	mov	r1, r2
 8005084:	461a      	mov	r2, r3
 8005086:	4603      	mov	r3, r0
 8005088:	817b      	strh	r3, [r7, #10]
 800508a:	460b      	mov	r3, r1
 800508c:	813b      	strh	r3, [r7, #8]
 800508e:	4613      	mov	r3, r2
 8005090:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b20      	cmp	r3, #32
 800509c:	f040 80fd 	bne.w	800529a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <HAL_I2C_Mem_Read+0x34>
 80050a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d105      	bne.n	80050b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050b2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0f1      	b.n	800529c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_I2C_Mem_Read+0x4e>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e0ea      	b.n	800529c <HAL_I2C_Mem_Read+0x224>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050ce:	f7ff f917 	bl	8004300 <HAL_GetTick>
 80050d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	2319      	movs	r3, #25
 80050da:	2201      	movs	r2, #1
 80050dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 fab5 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0d5      	b.n	800529c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2222      	movs	r2, #34	@ 0x22
 80050f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2240      	movs	r2, #64	@ 0x40
 80050fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a3a      	ldr	r2, [r7, #32]
 800510a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005110:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005118:	88f8      	ldrh	r0, [r7, #6]
 800511a:	893a      	ldrh	r2, [r7, #8]
 800511c:	8979      	ldrh	r1, [r7, #10]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	9301      	str	r3, [sp, #4]
 8005122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	4603      	mov	r3, r0
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 fa19 	bl	8005560 <I2C_RequestMemoryRead>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0ad      	b.n	800529c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005144:	b29b      	uxth	r3, r3
 8005146:	2bff      	cmp	r3, #255	@ 0xff
 8005148:	d90e      	bls.n	8005168 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	22ff      	movs	r2, #255	@ 0xff
 800514e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005154:	b2da      	uxtb	r2, r3
 8005156:	8979      	ldrh	r1, [r7, #10]
 8005158:	4b52      	ldr	r3, [pc, #328]	@ (80052a4 <HAL_I2C_Mem_Read+0x22c>)
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 fcc5 	bl	8005af0 <I2C_TransferConfig>
 8005166:	e00f      	b.n	8005188 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800516c:	b29a      	uxth	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005176:	b2da      	uxtb	r2, r3
 8005178:	8979      	ldrh	r1, [r7, #10]
 800517a:	4b4a      	ldr	r3, [pc, #296]	@ (80052a4 <HAL_I2C_Mem_Read+0x22c>)
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 fcb4 	bl	8005af0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518e:	2200      	movs	r2, #0
 8005190:	2104      	movs	r1, #4
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 fa5c 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e07c      	b.n	800529c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d034      	beq.n	8005248 <HAL_I2C_Mem_Read+0x1d0>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d130      	bne.n	8005248 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ec:	2200      	movs	r2, #0
 80051ee:	2180      	movs	r1, #128	@ 0x80
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 fa2d 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e04d      	b.n	800529c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005204:	b29b      	uxth	r3, r3
 8005206:	2bff      	cmp	r3, #255	@ 0xff
 8005208:	d90e      	bls.n	8005228 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	22ff      	movs	r2, #255	@ 0xff
 800520e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005214:	b2da      	uxtb	r2, r3
 8005216:	8979      	ldrh	r1, [r7, #10]
 8005218:	2300      	movs	r3, #0
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 fc65 	bl	8005af0 <I2C_TransferConfig>
 8005226:	e00f      	b.n	8005248 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005236:	b2da      	uxtb	r2, r3
 8005238:	8979      	ldrh	r1, [r7, #10]
 800523a:	2300      	movs	r3, #0
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 fc54 	bl	8005af0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d19a      	bne.n	8005188 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fa9a 	bl	8005790 <I2C_WaitOnSTOPFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e01a      	b.n	800529c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2220      	movs	r2, #32
 800526c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6859      	ldr	r1, [r3, #4]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4b0b      	ldr	r3, [pc, #44]	@ (80052a8 <HAL_I2C_Mem_Read+0x230>)
 800527a:	400b      	ands	r3, r1
 800527c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	e000      	b.n	800529c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800529a:	2302      	movs	r3, #2
  }
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	80002400 	.word	0x80002400
 80052a8:	fe00e800 	.word	0xfe00e800

080052ac <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08a      	sub	sp, #40	@ 0x28
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	607a      	str	r2, [r7, #4]
 80052b6:	603b      	str	r3, [r7, #0]
 80052b8:	460b      	mov	r3, r1
 80052ba:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80052bc:	2300      	movs	r3, #0
 80052be:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b20      	cmp	r3, #32
 80052ce:	f040 80e9 	bne.w	80054a4 <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052e0:	d101      	bne.n	80052e6 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 80052e2:	2302      	movs	r3, #2
 80052e4:	e0df      	b.n	80054a6 <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d101      	bne.n	80052f4 <HAL_I2C_IsDeviceReady+0x48>
 80052f0:	2302      	movs	r3, #2
 80052f2:	e0d8      	b.n	80054a6 <HAL_I2C_IsDeviceReady+0x1fa>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2224      	movs	r2, #36	@ 0x24
 8005300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d105      	bne.n	800531e <HAL_I2C_IsDeviceReady+0x72>
 8005312:	897b      	ldrh	r3, [r7, #10]
 8005314:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005318:	4b65      	ldr	r3, [pc, #404]	@ (80054b0 <HAL_I2C_IsDeviceReady+0x204>)
 800531a:	4313      	orrs	r3, r2
 800531c:	e004      	b.n	8005328 <HAL_I2C_IsDeviceReady+0x7c>
 800531e:	897b      	ldrh	r3, [r7, #10]
 8005320:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005324:	4b63      	ldr	r3, [pc, #396]	@ (80054b4 <HAL_I2C_IsDeviceReady+0x208>)
 8005326:	4313      	orrs	r3, r2
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	6812      	ldr	r2, [r2, #0]
 800532c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800532e:	f7fe ffe7 	bl	8004300 <HAL_GetTick>
 8005332:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	2b20      	cmp	r3, #32
 8005340:	bf0c      	ite	eq
 8005342:	2301      	moveq	r3, #1
 8005344:	2300      	movne	r3, #0
 8005346:	b2db      	uxtb	r3, r3
 8005348:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	f003 0310 	and.w	r3, r3, #16
 8005354:	2b10      	cmp	r3, #16
 8005356:	bf0c      	ite	eq
 8005358:	2301      	moveq	r3, #1
 800535a:	2300      	movne	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005360:	e034      	b.n	80053cc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005368:	d01a      	beq.n	80053a0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800536a:	f7fe ffc9 	bl	8004300 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d302      	bcc.n	8005380 <HAL_I2C_IsDeviceReady+0xd4>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10f      	bne.n	80053a0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538c:	f043 0220 	orr.w	r2, r3, #32
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e082      	b.n	80054a6 <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	bf0c      	ite	eq
 80053ae:	2301      	moveq	r3, #1
 80053b0:	2300      	movne	r3, #0
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	bf0c      	ite	eq
 80053c4:	2301      	moveq	r3, #1
 80053c6:	2300      	movne	r3, #0
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80053cc:	7fbb      	ldrb	r3, [r7, #30]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d102      	bne.n	80053d8 <HAL_I2C_IsDeviceReady+0x12c>
 80053d2:	7f7b      	ldrb	r3, [r7, #29]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0c4      	beq.n	8005362 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	f003 0310 	and.w	r3, r3, #16
 80053e2:	2b10      	cmp	r3, #16
 80053e4:	d027      	beq.n	8005436 <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2200      	movs	r2, #0
 80053ee:	2120      	movs	r1, #32
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 f92d 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00e      	beq.n	800541a <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005400:	2b04      	cmp	r3, #4
 8005402:	d107      	bne.n	8005414 <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2220      	movs	r2, #32
 800540a:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	645a      	str	r2, [r3, #68]	@ 0x44
 8005412:	e026      	b.n	8005462 <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	77fb      	strb	r3, [r7, #31]
 8005418:	e023      	b.n	8005462 <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2220      	movs	r2, #32
 8005420:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2220      	movs	r2, #32
 8005426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	e037      	b.n	80054a6 <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2210      	movs	r2, #16
 800543c:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2200      	movs	r2, #0
 8005446:	2120      	movs	r1, #32
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 f901 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	77fb      	strb	r3, [r7, #31]
 8005458:	e003      	b.n	8005462 <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2220      	movs	r2, #32
 8005460:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	3301      	adds	r3, #1
 8005466:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	429a      	cmp	r2, r3
 800546e:	d904      	bls.n	800547a <HAL_I2C_IsDeviceReady+0x1ce>
 8005470:	7ffb      	ldrb	r3, [r7, #31]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d101      	bne.n	800547a <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	429a      	cmp	r2, r3
 8005480:	f63f af43 	bhi.w	800530a <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005490:	f043 0220 	orr.w	r2, r3, #32
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 80054a4:	2302      	movs	r3, #2
  }
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3720      	adds	r7, #32
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	02002000 	.word	0x02002000
 80054b4:	02002800 	.word	0x02002800

080054b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	4608      	mov	r0, r1
 80054c2:	4611      	mov	r1, r2
 80054c4:	461a      	mov	r2, r3
 80054c6:	4603      	mov	r3, r0
 80054c8:	817b      	strh	r3, [r7, #10]
 80054ca:	460b      	mov	r3, r1
 80054cc:	813b      	strh	r3, [r7, #8]
 80054ce:	4613      	mov	r3, r2
 80054d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	8979      	ldrh	r1, [r7, #10]
 80054d8:	4b20      	ldr	r3, [pc, #128]	@ (800555c <I2C_RequestMemoryWrite+0xa4>)
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 fb05 	bl	8005af0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054e6:	69fa      	ldr	r2, [r7, #28]
 80054e8:	69b9      	ldr	r1, [r7, #24]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 f909 	bl	8005702 <I2C_WaitOnTXISFlagUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e02c      	b.n	8005554 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054fa:	88fb      	ldrh	r3, [r7, #6]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d105      	bne.n	800550c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005500:	893b      	ldrh	r3, [r7, #8]
 8005502:	b2da      	uxtb	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	629a      	str	r2, [r3, #40]	@ 0x28
 800550a:	e015      	b.n	8005538 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800550c:	893b      	ldrh	r3, [r7, #8]
 800550e:	0a1b      	lsrs	r3, r3, #8
 8005510:	b29b      	uxth	r3, r3
 8005512:	b2da      	uxtb	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800551a:	69fa      	ldr	r2, [r7, #28]
 800551c:	69b9      	ldr	r1, [r7, #24]
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 f8ef 	bl	8005702 <I2C_WaitOnTXISFlagUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e012      	b.n	8005554 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800552e:	893b      	ldrh	r3, [r7, #8]
 8005530:	b2da      	uxtb	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	2200      	movs	r2, #0
 8005540:	2180      	movs	r1, #128	@ 0x80
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 f884 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e000      	b.n	8005554 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	80002000 	.word	0x80002000

08005560 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af02      	add	r7, sp, #8
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	4608      	mov	r0, r1
 800556a:	4611      	mov	r1, r2
 800556c:	461a      	mov	r2, r3
 800556e:	4603      	mov	r3, r0
 8005570:	817b      	strh	r3, [r7, #10]
 8005572:	460b      	mov	r3, r1
 8005574:	813b      	strh	r3, [r7, #8]
 8005576:	4613      	mov	r3, r2
 8005578:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	b2da      	uxtb	r2, r3
 800557e:	8979      	ldrh	r1, [r7, #10]
 8005580:	4b20      	ldr	r3, [pc, #128]	@ (8005604 <I2C_RequestMemoryRead+0xa4>)
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	2300      	movs	r3, #0
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 fab2 	bl	8005af0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	69b9      	ldr	r1, [r7, #24]
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 f8b6 	bl	8005702 <I2C_WaitOnTXISFlagUntilTimeout>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e02c      	b.n	80055fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055a0:	88fb      	ldrh	r3, [r7, #6]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d105      	bne.n	80055b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055a6:	893b      	ldrh	r3, [r7, #8]
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80055b0:	e015      	b.n	80055de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80055b2:	893b      	ldrh	r3, [r7, #8]
 80055b4:	0a1b      	lsrs	r3, r3, #8
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055c0:	69fa      	ldr	r2, [r7, #28]
 80055c2:	69b9      	ldr	r1, [r7, #24]
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f89c 	bl	8005702 <I2C_WaitOnTXISFlagUntilTimeout>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e012      	b.n	80055fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055d4:	893b      	ldrh	r3, [r7, #8]
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	2200      	movs	r2, #0
 80055e6:	2140      	movs	r1, #64	@ 0x40
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 f831 	bl	8005650 <I2C_WaitOnFlagUntilTimeout>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	80002000 	.word	0x80002000

08005608 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b02      	cmp	r3, #2
 800561c:	d103      	bne.n	8005626 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2200      	movs	r2, #0
 8005624:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b01      	cmp	r3, #1
 8005632:	d007      	beq.n	8005644 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0201 	orr.w	r2, r2, #1
 8005642:	619a      	str	r2, [r3, #24]
  }
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	4613      	mov	r3, r2
 800565e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005660:	e03b      	b.n	80056da <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	6839      	ldr	r1, [r7, #0]
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 f962 	bl	8005930 <I2C_IsErrorOccurred>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e041      	b.n	80056fa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567c:	d02d      	beq.n	80056da <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567e:	f7fe fe3f 	bl	8004300 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d302      	bcc.n	8005694 <I2C_WaitOnFlagUntilTimeout+0x44>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d122      	bne.n	80056da <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	4013      	ands	r3, r2
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	bf0c      	ite	eq
 80056a4:	2301      	moveq	r3, #1
 80056a6:	2300      	movne	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	461a      	mov	r2, r3
 80056ac:	79fb      	ldrb	r3, [r7, #7]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d113      	bne.n	80056da <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b6:	f043 0220 	orr.w	r2, r3, #32
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e00f      	b.n	80056fa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	699a      	ldr	r2, [r3, #24]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4013      	ands	r3, r2
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	bf0c      	ite	eq
 80056ea:	2301      	moveq	r3, #1
 80056ec:	2300      	movne	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d0b4      	beq.n	8005662 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800570e:	e033      	b.n	8005778 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f90b 	bl	8005930 <I2C_IsErrorOccurred>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e031      	b.n	8005788 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572a:	d025      	beq.n	8005778 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800572c:	f7fe fde8 	bl	8004300 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	429a      	cmp	r2, r3
 800573a:	d302      	bcc.n	8005742 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d11a      	bne.n	8005778 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b02      	cmp	r3, #2
 800574e:	d013      	beq.n	8005778 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005754:	f043 0220 	orr.w	r2, r3, #32
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e007      	b.n	8005788 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b02      	cmp	r3, #2
 8005784:	d1c4      	bne.n	8005710 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800579c:	e02f      	b.n	80057fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 f8c4 	bl	8005930 <I2C_IsErrorOccurred>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e02d      	b.n	800580e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b2:	f7fe fda5 	bl	8004300 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d302      	bcc.n	80057c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d11a      	bne.n	80057fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f003 0320 	and.w	r3, r3, #32
 80057d2:	2b20      	cmp	r3, #32
 80057d4:	d013      	beq.n	80057fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057da:	f043 0220 	orr.w	r2, r3, #32
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e007      	b.n	800580e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	f003 0320 	and.w	r3, r3, #32
 8005808:	2b20      	cmp	r3, #32
 800580a:	d1c8      	bne.n	800579e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005824:	2300      	movs	r3, #0
 8005826:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005828:	e071      	b.n	800590e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	68b9      	ldr	r1, [r7, #8]
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 f87e 	bl	8005930 <I2C_IsErrorOccurred>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b20      	cmp	r3, #32
 800584a:	d13b      	bne.n	80058c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800584c:	7dfb      	ldrb	r3, [r7, #23]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d138      	bne.n	80058c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b04      	cmp	r3, #4
 800585e:	d105      	bne.n	800586c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f003 0310 	and.w	r3, r3, #16
 8005876:	2b10      	cmp	r3, #16
 8005878:	d121      	bne.n	80058be <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2210      	movs	r2, #16
 8005880:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2204      	movs	r2, #4
 8005886:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2220      	movs	r2, #32
 800588e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6859      	ldr	r1, [r3, #4]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	4b24      	ldr	r3, [pc, #144]	@ (800592c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800589c:	400b      	ands	r3, r1
 800589e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	75fb      	strb	r3, [r7, #23]
 80058bc:	e002      	b.n	80058c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80058c4:	f7fe fd1c 	bl	8004300 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d302      	bcc.n	80058da <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d119      	bne.n	800590e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80058da:	7dfb      	ldrb	r3, [r7, #23]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d116      	bne.n	800590e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f003 0304 	and.w	r3, r3, #4
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d00f      	beq.n	800590e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f2:	f043 0220 	orr.w	r2, r3, #32
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b04      	cmp	r3, #4
 800591a:	d002      	beq.n	8005922 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800591c:	7dfb      	ldrb	r3, [r7, #23]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d083      	beq.n	800582a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005922:	7dfb      	ldrb	r3, [r7, #23]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	fe00e800 	.word	0xfe00e800

08005930 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08a      	sub	sp, #40	@ 0x28
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	f003 0310 	and.w	r3, r3, #16
 8005958:	2b00      	cmp	r3, #0
 800595a:	d068      	beq.n	8005a2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2210      	movs	r2, #16
 8005962:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005964:	e049      	b.n	80059fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596c:	d045      	beq.n	80059fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800596e:	f7fe fcc7 	bl	8004300 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	429a      	cmp	r2, r3
 800597c:	d302      	bcc.n	8005984 <I2C_IsErrorOccurred+0x54>
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d13a      	bne.n	80059fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800598e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005996:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059a6:	d121      	bne.n	80059ec <I2C_IsErrorOccurred+0xbc>
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059ae:	d01d      	beq.n	80059ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80059b0:	7cfb      	ldrb	r3, [r7, #19]
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	d01a      	beq.n	80059ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80059c6:	f7fe fc9b 	bl	8004300 <HAL_GetTick>
 80059ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059cc:	e00e      	b.n	80059ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80059ce:	f7fe fc97 	bl	8004300 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b19      	cmp	r3, #25
 80059da:	d907      	bls.n	80059ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	f043 0320 	orr.w	r3, r3, #32
 80059e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80059ea:	e006      	b.n	80059fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	f003 0320 	and.w	r3, r3, #32
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d1e9      	bne.n	80059ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	f003 0320 	and.w	r3, r3, #32
 8005a04:	2b20      	cmp	r3, #32
 8005a06:	d003      	beq.n	8005a10 <I2C_IsErrorOccurred+0xe0>
 8005a08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0aa      	beq.n	8005966 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005a10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d103      	bne.n	8005a20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	f043 0304 	orr.w	r3, r3, #4
 8005a26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00b      	beq.n	8005a58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	f043 0301 	orr.w	r3, r3, #1
 8005a46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00b      	beq.n	8005a7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	f043 0308 	orr.w	r3, r3, #8
 8005a68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00b      	beq.n	8005a9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	f043 0302 	orr.w	r3, r3, #2
 8005a8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d01c      	beq.n	8005ade <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f7ff fdaf 	bl	8005608 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6859      	ldr	r1, [r3, #4]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8005aec <I2C_IsErrorOccurred+0x1bc>)
 8005ab6:	400b      	ands	r3, r1
 8005ab8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005ade:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3728      	adds	r7, #40	@ 0x28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	fe00e800 	.word	0xfe00e800

08005af0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	607b      	str	r3, [r7, #4]
 8005afa:	460b      	mov	r3, r1
 8005afc:	817b      	strh	r3, [r7, #10]
 8005afe:	4613      	mov	r3, r2
 8005b00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b02:	897b      	ldrh	r3, [r7, #10]
 8005b04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b08:	7a7b      	ldrb	r3, [r7, #9]
 8005b0a:	041b      	lsls	r3, r3, #16
 8005b0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b10:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b1e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	0d5b      	lsrs	r3, r3, #21
 8005b2a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005b2e:	4b08      	ldr	r3, [pc, #32]	@ (8005b50 <I2C_TransferConfig+0x60>)
 8005b30:	430b      	orrs	r3, r1
 8005b32:	43db      	mvns	r3, r3
 8005b34:	ea02 0103 	and.w	r1, r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	03ff63ff 	.word	0x03ff63ff

08005b54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b20      	cmp	r3, #32
 8005b68:	d138      	bne.n	8005bdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e032      	b.n	8005bde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2224      	movs	r2, #36	@ 0x24
 8005b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0201 	bic.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ba6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6819      	ldr	r1, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0201 	orr.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	e000      	b.n	8005bde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005bdc:	2302      	movs	r3, #2
  }
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b085      	sub	sp, #20
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b20      	cmp	r3, #32
 8005bfe:	d139      	bne.n	8005c74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e033      	b.n	8005c76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2224      	movs	r2, #36	@ 0x24
 8005c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0201 	bic.w	r2, r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005c3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	021b      	lsls	r3, r3, #8
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2220      	movs	r2, #32
 8005c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	e000      	b.n	8005c76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c74:	2302      	movs	r3, #2
  }
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
	...

08005c84 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005c8c:	4b29      	ldr	r3, [pc, #164]	@ (8005d34 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	2b06      	cmp	r3, #6
 8005c96:	d00a      	beq.n	8005cae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005c98:	4b26      	ldr	r3, [pc, #152]	@ (8005d34 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d001      	beq.n	8005caa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e040      	b.n	8005d2c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e03e      	b.n	8005d2c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005cae:	4b21      	ldr	r3, [pc, #132]	@ (8005d34 <HAL_PWREx_ConfigSupply+0xb0>)
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005cb6:	491f      	ldr	r1, [pc, #124]	@ (8005d34 <HAL_PWREx_ConfigSupply+0xb0>)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005cbe:	f7fe fb1f 	bl	8004300 <HAL_GetTick>
 8005cc2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cc4:	e009      	b.n	8005cda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005cc6:	f7fe fb1b 	bl	8004300 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cd4:	d901      	bls.n	8005cda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e028      	b.n	8005d2c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cda:	4b16      	ldr	r3, [pc, #88]	@ (8005d34 <HAL_PWREx_ConfigSupply+0xb0>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ce6:	d1ee      	bne.n	8005cc6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b1e      	cmp	r3, #30
 8005cec:	d008      	beq.n	8005d00 <HAL_PWREx_ConfigSupply+0x7c>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cf2:	d005      	beq.n	8005d00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b1d      	cmp	r3, #29
 8005cf8:	d002      	beq.n	8005d00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b2d      	cmp	r3, #45	@ 0x2d
 8005cfe:	d114      	bne.n	8005d2a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005d00:	f7fe fafe 	bl	8004300 <HAL_GetTick>
 8005d04:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005d06:	e009      	b.n	8005d1c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d08:	f7fe fafa 	bl	8004300 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d16:	d901      	bls.n	8005d1c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e007      	b.n	8005d2c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005d1c:	4b05      	ldr	r3, [pc, #20]	@ (8005d34 <HAL_PWREx_ConfigSupply+0xb0>)
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d28:	d1ee      	bne.n	8005d08 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	58024800 	.word	0x58024800

08005d38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08c      	sub	sp, #48	@ 0x30
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d102      	bne.n	8005d4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	f000 bc48 	b.w	80065dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 8088 	beq.w	8005e6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d5a:	4b99      	ldr	r3, [pc, #612]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d64:	4b96      	ldr	r3, [pc, #600]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d68:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d6c:	2b10      	cmp	r3, #16
 8005d6e:	d007      	beq.n	8005d80 <HAL_RCC_OscConfig+0x48>
 8005d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d72:	2b18      	cmp	r3, #24
 8005d74:	d111      	bne.n	8005d9a <HAL_RCC_OscConfig+0x62>
 8005d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d78:	f003 0303 	and.w	r3, r3, #3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d10c      	bne.n	8005d9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d80:	4b8f      	ldr	r3, [pc, #572]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d06d      	beq.n	8005e68 <HAL_RCC_OscConfig+0x130>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d169      	bne.n	8005e68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	f000 bc21 	b.w	80065dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005da2:	d106      	bne.n	8005db2 <HAL_RCC_OscConfig+0x7a>
 8005da4:	4b86      	ldr	r3, [pc, #536]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a85      	ldr	r2, [pc, #532]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	e02e      	b.n	8005e10 <HAL_RCC_OscConfig+0xd8>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10c      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x9c>
 8005dba:	4b81      	ldr	r3, [pc, #516]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a80      	ldr	r2, [pc, #512]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005dc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	4b7e      	ldr	r3, [pc, #504]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a7d      	ldr	r2, [pc, #500]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005dcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dd0:	6013      	str	r3, [r2, #0]
 8005dd2:	e01d      	b.n	8005e10 <HAL_RCC_OscConfig+0xd8>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ddc:	d10c      	bne.n	8005df8 <HAL_RCC_OscConfig+0xc0>
 8005dde:	4b78      	ldr	r3, [pc, #480]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a77      	ldr	r2, [pc, #476]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	4b75      	ldr	r3, [pc, #468]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a74      	ldr	r2, [pc, #464]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	e00b      	b.n	8005e10 <HAL_RCC_OscConfig+0xd8>
 8005df8:	4b71      	ldr	r3, [pc, #452]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a70      	ldr	r2, [pc, #448]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005dfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	4b6e      	ldr	r3, [pc, #440]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a6d      	ldr	r2, [pc, #436]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005e0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d013      	beq.n	8005e40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e18:	f7fe fa72 	bl	8004300 <HAL_GetTick>
 8005e1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e20:	f7fe fa6e 	bl	8004300 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b64      	cmp	r3, #100	@ 0x64
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e3d4      	b.n	80065dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e32:	4b63      	ldr	r3, [pc, #396]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0f0      	beq.n	8005e20 <HAL_RCC_OscConfig+0xe8>
 8005e3e:	e014      	b.n	8005e6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e40:	f7fe fa5e 	bl	8004300 <HAL_GetTick>
 8005e44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e48:	f7fe fa5a 	bl	8004300 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b64      	cmp	r3, #100	@ 0x64
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e3c0      	b.n	80065dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e5a:	4b59      	ldr	r3, [pc, #356]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1f0      	bne.n	8005e48 <HAL_RCC_OscConfig+0x110>
 8005e66:	e000      	b.n	8005e6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 80ca 	beq.w	800600c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e78:	4b51      	ldr	r3, [pc, #324]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e82:	4b4f      	ldr	r3, [pc, #316]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e86:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d007      	beq.n	8005e9e <HAL_RCC_OscConfig+0x166>
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	2b18      	cmp	r3, #24
 8005e92:	d156      	bne.n	8005f42 <HAL_RCC_OscConfig+0x20a>
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d151      	bne.n	8005f42 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e9e:	4b48      	ldr	r3, [pc, #288]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d005      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x17e>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e392      	b.n	80065dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005eb6:	4b42      	ldr	r3, [pc, #264]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f023 0219 	bic.w	r2, r3, #25
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	493f      	ldr	r1, [pc, #252]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec8:	f7fe fa1a 	bl	8004300 <HAL_GetTick>
 8005ecc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ed0:	f7fe fa16 	bl	8004300 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e37c      	b.n	80065dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ee2:	4b37      	ldr	r3, [pc, #220]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0304 	and.w	r3, r3, #4
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0f0      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eee:	f7fe fa37 	bl	8004360 <HAL_GetREVID>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d817      	bhi.n	8005f2c <HAL_RCC_OscConfig+0x1f4>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	2b40      	cmp	r3, #64	@ 0x40
 8005f02:	d108      	bne.n	8005f16 <HAL_RCC_OscConfig+0x1de>
 8005f04:	4b2e      	ldr	r3, [pc, #184]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005f0c:	4a2c      	ldr	r2, [pc, #176]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f12:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f14:	e07a      	b.n	800600c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f16:	4b2a      	ldr	r3, [pc, #168]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	031b      	lsls	r3, r3, #12
 8005f24:	4926      	ldr	r1, [pc, #152]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f2a:	e06f      	b.n	800600c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f2c:	4b24      	ldr	r3, [pc, #144]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	061b      	lsls	r3, r3, #24
 8005f3a:	4921      	ldr	r1, [pc, #132]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f40:	e064      	b.n	800600c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d047      	beq.n	8005fda <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f023 0219 	bic.w	r2, r3, #25
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	491a      	ldr	r1, [pc, #104]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5c:	f7fe f9d0 	bl	8004300 <HAL_GetTick>
 8005f60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f64:	f7fe f9cc 	bl	8004300 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e332      	b.n	80065dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f76:	4b12      	ldr	r3, [pc, #72]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0304 	and.w	r3, r3, #4
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0f0      	beq.n	8005f64 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f82:	f7fe f9ed 	bl	8004360 <HAL_GetREVID>
 8005f86:	4603      	mov	r3, r0
 8005f88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d819      	bhi.n	8005fc4 <HAL_RCC_OscConfig+0x28c>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	2b40      	cmp	r3, #64	@ 0x40
 8005f96:	d108      	bne.n	8005faa <HAL_RCC_OscConfig+0x272>
 8005f98:	4b09      	ldr	r3, [pc, #36]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005fa0:	4a07      	ldr	r2, [pc, #28]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005fa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fa6:	6053      	str	r3, [r2, #4]
 8005fa8:	e030      	b.n	800600c <HAL_RCC_OscConfig+0x2d4>
 8005faa:	4b05      	ldr	r3, [pc, #20]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	031b      	lsls	r3, r3, #12
 8005fb8:	4901      	ldr	r1, [pc, #4]	@ (8005fc0 <HAL_RCC_OscConfig+0x288>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	604b      	str	r3, [r1, #4]
 8005fbe:	e025      	b.n	800600c <HAL_RCC_OscConfig+0x2d4>
 8005fc0:	58024400 	.word	0x58024400
 8005fc4:	4b9a      	ldr	r3, [pc, #616]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	061b      	lsls	r3, r3, #24
 8005fd2:	4997      	ldr	r1, [pc, #604]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	604b      	str	r3, [r1, #4]
 8005fd8:	e018      	b.n	800600c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fda:	4b95      	ldr	r3, [pc, #596]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a94      	ldr	r2, [pc, #592]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8005fe0:	f023 0301 	bic.w	r3, r3, #1
 8005fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe6:	f7fe f98b 	bl	8004300 <HAL_GetTick>
 8005fea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fec:	e008      	b.n	8006000 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fee:	f7fe f987 	bl	8004300 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d901      	bls.n	8006000 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e2ed      	b.n	80065dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006000:	4b8b      	ldr	r3, [pc, #556]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1f0      	bne.n	8005fee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0310 	and.w	r3, r3, #16
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 80a9 	beq.w	800616c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800601a:	4b85      	ldr	r3, [pc, #532]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006022:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006024:	4b82      	ldr	r3, [pc, #520]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8006026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006028:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	2b08      	cmp	r3, #8
 800602e:	d007      	beq.n	8006040 <HAL_RCC_OscConfig+0x308>
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	2b18      	cmp	r3, #24
 8006034:	d13a      	bne.n	80060ac <HAL_RCC_OscConfig+0x374>
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f003 0303 	and.w	r3, r3, #3
 800603c:	2b01      	cmp	r3, #1
 800603e:	d135      	bne.n	80060ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006040:	4b7b      	ldr	r3, [pc, #492]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006048:	2b00      	cmp	r3, #0
 800604a:	d005      	beq.n	8006058 <HAL_RCC_OscConfig+0x320>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	2b80      	cmp	r3, #128	@ 0x80
 8006052:	d001      	beq.n	8006058 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e2c1      	b.n	80065dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006058:	f7fe f982 	bl	8004360 <HAL_GetREVID>
 800605c:	4603      	mov	r3, r0
 800605e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006062:	4293      	cmp	r3, r2
 8006064:	d817      	bhi.n	8006096 <HAL_RCC_OscConfig+0x35e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	2b20      	cmp	r3, #32
 800606c:	d108      	bne.n	8006080 <HAL_RCC_OscConfig+0x348>
 800606e:	4b70      	ldr	r3, [pc, #448]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006076:	4a6e      	ldr	r2, [pc, #440]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8006078:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800607c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800607e:	e075      	b.n	800616c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006080:	4b6b      	ldr	r3, [pc, #428]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	069b      	lsls	r3, r3, #26
 800608e:	4968      	ldr	r1, [pc, #416]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8006090:	4313      	orrs	r3, r2
 8006092:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006094:	e06a      	b.n	800616c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006096:	4b66      	ldr	r3, [pc, #408]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	061b      	lsls	r3, r3, #24
 80060a4:	4962      	ldr	r1, [pc, #392]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060aa:	e05f      	b.n	800616c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d042      	beq.n	800613a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80060b4:	4b5e      	ldr	r3, [pc, #376]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a5d      	ldr	r2, [pc, #372]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 80060ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c0:	f7fe f91e 	bl	8004300 <HAL_GetTick>
 80060c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060c6:	e008      	b.n	80060da <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80060c8:	f7fe f91a 	bl	8004300 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e280      	b.n	80065dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060da:	4b55      	ldr	r3, [pc, #340]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0f0      	beq.n	80060c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060e6:	f7fe f93b 	bl	8004360 <HAL_GetREVID>
 80060ea:	4603      	mov	r3, r0
 80060ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d817      	bhi.n	8006124 <HAL_RCC_OscConfig+0x3ec>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	2b20      	cmp	r3, #32
 80060fa:	d108      	bne.n	800610e <HAL_RCC_OscConfig+0x3d6>
 80060fc:	4b4c      	ldr	r3, [pc, #304]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006104:	4a4a      	ldr	r2, [pc, #296]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8006106:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800610a:	6053      	str	r3, [r2, #4]
 800610c:	e02e      	b.n	800616c <HAL_RCC_OscConfig+0x434>
 800610e:	4b48      	ldr	r3, [pc, #288]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	069b      	lsls	r3, r3, #26
 800611c:	4944      	ldr	r1, [pc, #272]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 800611e:	4313      	orrs	r3, r2
 8006120:	604b      	str	r3, [r1, #4]
 8006122:	e023      	b.n	800616c <HAL_RCC_OscConfig+0x434>
 8006124:	4b42      	ldr	r3, [pc, #264]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	061b      	lsls	r3, r3, #24
 8006132:	493f      	ldr	r1, [pc, #252]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8006134:	4313      	orrs	r3, r2
 8006136:	60cb      	str	r3, [r1, #12]
 8006138:	e018      	b.n	800616c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800613a:	4b3d      	ldr	r3, [pc, #244]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a3c      	ldr	r2, [pc, #240]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8006140:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006146:	f7fe f8db 	bl	8004300 <HAL_GetTick>
 800614a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800614c:	e008      	b.n	8006160 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800614e:	f7fe f8d7 	bl	8004300 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d901      	bls.n	8006160 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e23d      	b.n	80065dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006160:	4b33      	ldr	r3, [pc, #204]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1f0      	bne.n	800614e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0308 	and.w	r3, r3, #8
 8006174:	2b00      	cmp	r3, #0
 8006176:	d036      	beq.n	80061e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d019      	beq.n	80061b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006180:	4b2b      	ldr	r3, [pc, #172]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8006182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006184:	4a2a      	ldr	r2, [pc, #168]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8006186:	f043 0301 	orr.w	r3, r3, #1
 800618a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800618c:	f7fe f8b8 	bl	8004300 <HAL_GetTick>
 8006190:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006194:	f7fe f8b4 	bl	8004300 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e21a      	b.n	80065dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061a6:	4b22      	ldr	r3, [pc, #136]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 80061a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0f0      	beq.n	8006194 <HAL_RCC_OscConfig+0x45c>
 80061b2:	e018      	b.n	80061e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061b4:	4b1e      	ldr	r3, [pc, #120]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 80061b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 80061ba:	f023 0301 	bic.w	r3, r3, #1
 80061be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c0:	f7fe f89e 	bl	8004300 <HAL_GetTick>
 80061c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061c6:	e008      	b.n	80061da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061c8:	f7fe f89a 	bl	8004300 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d901      	bls.n	80061da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e200      	b.n	80065dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061da:	4b15      	ldr	r3, [pc, #84]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 80061dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1f0      	bne.n	80061c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d039      	beq.n	8006266 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d01c      	beq.n	8006234 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8006200:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006204:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006206:	f7fe f87b 	bl	8004300 <HAL_GetTick>
 800620a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800620c:	e008      	b.n	8006220 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800620e:	f7fe f877 	bl	8004300 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e1dd      	b.n	80065dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006220:	4b03      	ldr	r3, [pc, #12]	@ (8006230 <HAL_RCC_OscConfig+0x4f8>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0f0      	beq.n	800620e <HAL_RCC_OscConfig+0x4d6>
 800622c:	e01b      	b.n	8006266 <HAL_RCC_OscConfig+0x52e>
 800622e:	bf00      	nop
 8006230:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006234:	4b9b      	ldr	r3, [pc, #620]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a9a      	ldr	r2, [pc, #616]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 800623a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800623e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006240:	f7fe f85e 	bl	8004300 <HAL_GetTick>
 8006244:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006246:	e008      	b.n	800625a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006248:	f7fe f85a 	bl	8004300 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e1c0      	b.n	80065dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800625a:	4b92      	ldr	r3, [pc, #584]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1f0      	bne.n	8006248 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0304 	and.w	r3, r3, #4
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 8081 	beq.w	8006376 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006274:	4b8c      	ldr	r3, [pc, #560]	@ (80064a8 <HAL_RCC_OscConfig+0x770>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a8b      	ldr	r2, [pc, #556]	@ (80064a8 <HAL_RCC_OscConfig+0x770>)
 800627a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800627e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006280:	f7fe f83e 	bl	8004300 <HAL_GetTick>
 8006284:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006286:	e008      	b.n	800629a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006288:	f7fe f83a 	bl	8004300 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b64      	cmp	r3, #100	@ 0x64
 8006294:	d901      	bls.n	800629a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e1a0      	b.n	80065dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800629a:	4b83      	ldr	r3, [pc, #524]	@ (80064a8 <HAL_RCC_OscConfig+0x770>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0f0      	beq.n	8006288 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d106      	bne.n	80062bc <HAL_RCC_OscConfig+0x584>
 80062ae:	4b7d      	ldr	r3, [pc, #500]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 80062b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b2:	4a7c      	ldr	r2, [pc, #496]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 80062b4:	f043 0301 	orr.w	r3, r3, #1
 80062b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80062ba:	e02d      	b.n	8006318 <HAL_RCC_OscConfig+0x5e0>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10c      	bne.n	80062de <HAL_RCC_OscConfig+0x5a6>
 80062c4:	4b77      	ldr	r3, [pc, #476]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 80062c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c8:	4a76      	ldr	r2, [pc, #472]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 80062ca:	f023 0301 	bic.w	r3, r3, #1
 80062ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80062d0:	4b74      	ldr	r3, [pc, #464]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 80062d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d4:	4a73      	ldr	r2, [pc, #460]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 80062d6:	f023 0304 	bic.w	r3, r3, #4
 80062da:	6713      	str	r3, [r2, #112]	@ 0x70
 80062dc:	e01c      	b.n	8006318 <HAL_RCC_OscConfig+0x5e0>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	2b05      	cmp	r3, #5
 80062e4:	d10c      	bne.n	8006300 <HAL_RCC_OscConfig+0x5c8>
 80062e6:	4b6f      	ldr	r3, [pc, #444]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 80062e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ea:	4a6e      	ldr	r2, [pc, #440]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 80062ec:	f043 0304 	orr.w	r3, r3, #4
 80062f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80062f2:	4b6c      	ldr	r3, [pc, #432]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 80062f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f6:	4a6b      	ldr	r2, [pc, #428]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 80062f8:	f043 0301 	orr.w	r3, r3, #1
 80062fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80062fe:	e00b      	b.n	8006318 <HAL_RCC_OscConfig+0x5e0>
 8006300:	4b68      	ldr	r3, [pc, #416]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 8006302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006304:	4a67      	ldr	r2, [pc, #412]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 8006306:	f023 0301 	bic.w	r3, r3, #1
 800630a:	6713      	str	r3, [r2, #112]	@ 0x70
 800630c:	4b65      	ldr	r3, [pc, #404]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 800630e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006310:	4a64      	ldr	r2, [pc, #400]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 8006312:	f023 0304 	bic.w	r3, r3, #4
 8006316:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d015      	beq.n	800634c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006320:	f7fd ffee 	bl	8004300 <HAL_GetTick>
 8006324:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006326:	e00a      	b.n	800633e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006328:	f7fd ffea 	bl	8004300 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006336:	4293      	cmp	r3, r2
 8006338:	d901      	bls.n	800633e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e14e      	b.n	80065dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800633e:	4b59      	ldr	r3, [pc, #356]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0ee      	beq.n	8006328 <HAL_RCC_OscConfig+0x5f0>
 800634a:	e014      	b.n	8006376 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800634c:	f7fd ffd8 	bl	8004300 <HAL_GetTick>
 8006350:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006352:	e00a      	b.n	800636a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006354:	f7fd ffd4 	bl	8004300 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006362:	4293      	cmp	r3, r2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e138      	b.n	80065dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800636a:	4b4e      	ldr	r3, [pc, #312]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 800636c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1ee      	bne.n	8006354 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 812d 	beq.w	80065da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006380:	4b48      	ldr	r3, [pc, #288]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006388:	2b18      	cmp	r3, #24
 800638a:	f000 80bd 	beq.w	8006508 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006392:	2b02      	cmp	r3, #2
 8006394:	f040 809e 	bne.w	80064d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006398:	4b42      	ldr	r3, [pc, #264]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a41      	ldr	r2, [pc, #260]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 800639e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a4:	f7fd ffac 	bl	8004300 <HAL_GetTick>
 80063a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063aa:	e008      	b.n	80063be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ac:	f7fd ffa8 	bl	8004300 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e10e      	b.n	80065dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063be:	4b39      	ldr	r3, [pc, #228]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1f0      	bne.n	80063ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063ca:	4b36      	ldr	r3, [pc, #216]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 80063cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063ce:	4b37      	ldr	r3, [pc, #220]	@ (80064ac <HAL_RCC_OscConfig+0x774>)
 80063d0:	4013      	ands	r3, r2
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80063da:	0112      	lsls	r2, r2, #4
 80063dc:	430a      	orrs	r2, r1
 80063de:	4931      	ldr	r1, [pc, #196]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e8:	3b01      	subs	r3, #1
 80063ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063f2:	3b01      	subs	r3, #1
 80063f4:	025b      	lsls	r3, r3, #9
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	431a      	orrs	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fe:	3b01      	subs	r3, #1
 8006400:	041b      	lsls	r3, r3, #16
 8006402:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006406:	431a      	orrs	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800640c:	3b01      	subs	r3, #1
 800640e:	061b      	lsls	r3, r3, #24
 8006410:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006414:	4923      	ldr	r1, [pc, #140]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 8006416:	4313      	orrs	r3, r2
 8006418:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800641a:	4b22      	ldr	r3, [pc, #136]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 800641c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641e:	4a21      	ldr	r2, [pc, #132]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 8006420:	f023 0301 	bic.w	r3, r3, #1
 8006424:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006426:	4b1f      	ldr	r3, [pc, #124]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 8006428:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800642a:	4b21      	ldr	r3, [pc, #132]	@ (80064b0 <HAL_RCC_OscConfig+0x778>)
 800642c:	4013      	ands	r3, r2
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006432:	00d2      	lsls	r2, r2, #3
 8006434:	491b      	ldr	r1, [pc, #108]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 8006436:	4313      	orrs	r3, r2
 8006438:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800643a:	4b1a      	ldr	r3, [pc, #104]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 800643c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643e:	f023 020c 	bic.w	r2, r3, #12
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	4917      	ldr	r1, [pc, #92]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 8006448:	4313      	orrs	r3, r2
 800644a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800644c:	4b15      	ldr	r3, [pc, #84]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 800644e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006450:	f023 0202 	bic.w	r2, r3, #2
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006458:	4912      	ldr	r1, [pc, #72]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 800645a:	4313      	orrs	r3, r2
 800645c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800645e:	4b11      	ldr	r3, [pc, #68]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 8006460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006462:	4a10      	ldr	r2, [pc, #64]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 8006464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006468:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800646a:	4b0e      	ldr	r3, [pc, #56]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 800646c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800646e:	4a0d      	ldr	r2, [pc, #52]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 8006470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006474:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006476:	4b0b      	ldr	r3, [pc, #44]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 8006478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647a:	4a0a      	ldr	r2, [pc, #40]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 800647c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006480:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006482:	4b08      	ldr	r3, [pc, #32]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 8006484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006486:	4a07      	ldr	r2, [pc, #28]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 8006488:	f043 0301 	orr.w	r3, r3, #1
 800648c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800648e:	4b05      	ldr	r3, [pc, #20]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a04      	ldr	r2, [pc, #16]	@ (80064a4 <HAL_RCC_OscConfig+0x76c>)
 8006494:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800649a:	f7fd ff31 	bl	8004300 <HAL_GetTick>
 800649e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064a0:	e011      	b.n	80064c6 <HAL_RCC_OscConfig+0x78e>
 80064a2:	bf00      	nop
 80064a4:	58024400 	.word	0x58024400
 80064a8:	58024800 	.word	0x58024800
 80064ac:	fffffc0c 	.word	0xfffffc0c
 80064b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064b4:	f7fd ff24 	bl	8004300 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e08a      	b.n	80065dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064c6:	4b47      	ldr	r3, [pc, #284]	@ (80065e4 <HAL_RCC_OscConfig+0x8ac>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0f0      	beq.n	80064b4 <HAL_RCC_OscConfig+0x77c>
 80064d2:	e082      	b.n	80065da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064d4:	4b43      	ldr	r3, [pc, #268]	@ (80065e4 <HAL_RCC_OscConfig+0x8ac>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a42      	ldr	r2, [pc, #264]	@ (80065e4 <HAL_RCC_OscConfig+0x8ac>)
 80064da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e0:	f7fd ff0e 	bl	8004300 <HAL_GetTick>
 80064e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064e6:	e008      	b.n	80064fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064e8:	f7fd ff0a 	bl	8004300 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e070      	b.n	80065dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064fa:	4b3a      	ldr	r3, [pc, #232]	@ (80065e4 <HAL_RCC_OscConfig+0x8ac>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1f0      	bne.n	80064e8 <HAL_RCC_OscConfig+0x7b0>
 8006506:	e068      	b.n	80065da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006508:	4b36      	ldr	r3, [pc, #216]	@ (80065e4 <HAL_RCC_OscConfig+0x8ac>)
 800650a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800650e:	4b35      	ldr	r3, [pc, #212]	@ (80065e4 <HAL_RCC_OscConfig+0x8ac>)
 8006510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006512:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006518:	2b01      	cmp	r3, #1
 800651a:	d031      	beq.n	8006580 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f003 0203 	and.w	r2, r3, #3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006526:	429a      	cmp	r2, r3
 8006528:	d12a      	bne.n	8006580 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	091b      	lsrs	r3, r3, #4
 800652e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006536:	429a      	cmp	r2, r3
 8006538:	d122      	bne.n	8006580 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006544:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006546:	429a      	cmp	r2, r3
 8006548:	d11a      	bne.n	8006580 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	0a5b      	lsrs	r3, r3, #9
 800654e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006556:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006558:	429a      	cmp	r2, r3
 800655a:	d111      	bne.n	8006580 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	0c1b      	lsrs	r3, r3, #16
 8006560:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006568:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800656a:	429a      	cmp	r2, r3
 800656c:	d108      	bne.n	8006580 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	0e1b      	lsrs	r3, r3, #24
 8006572:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800657a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800657c:	429a      	cmp	r2, r3
 800657e:	d001      	beq.n	8006584 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e02b      	b.n	80065dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006584:	4b17      	ldr	r3, [pc, #92]	@ (80065e4 <HAL_RCC_OscConfig+0x8ac>)
 8006586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006588:	08db      	lsrs	r3, r3, #3
 800658a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800658e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	429a      	cmp	r2, r3
 8006598:	d01f      	beq.n	80065da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800659a:	4b12      	ldr	r3, [pc, #72]	@ (80065e4 <HAL_RCC_OscConfig+0x8ac>)
 800659c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659e:	4a11      	ldr	r2, [pc, #68]	@ (80065e4 <HAL_RCC_OscConfig+0x8ac>)
 80065a0:	f023 0301 	bic.w	r3, r3, #1
 80065a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80065a6:	f7fd feab 	bl	8004300 <HAL_GetTick>
 80065aa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80065ac:	bf00      	nop
 80065ae:	f7fd fea7 	bl	8004300 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d0f9      	beq.n	80065ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065ba:	4b0a      	ldr	r3, [pc, #40]	@ (80065e4 <HAL_RCC_OscConfig+0x8ac>)
 80065bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065be:	4b0a      	ldr	r3, [pc, #40]	@ (80065e8 <HAL_RCC_OscConfig+0x8b0>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80065c6:	00d2      	lsls	r2, r2, #3
 80065c8:	4906      	ldr	r1, [pc, #24]	@ (80065e4 <HAL_RCC_OscConfig+0x8ac>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80065ce:	4b05      	ldr	r3, [pc, #20]	@ (80065e4 <HAL_RCC_OscConfig+0x8ac>)
 80065d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d2:	4a04      	ldr	r2, [pc, #16]	@ (80065e4 <HAL_RCC_OscConfig+0x8ac>)
 80065d4:	f043 0301 	orr.w	r3, r3, #1
 80065d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3730      	adds	r7, #48	@ 0x30
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	58024400 	.word	0x58024400
 80065e8:	ffff0007 	.word	0xffff0007

080065ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e19c      	b.n	800693a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006600:	4b8a      	ldr	r3, [pc, #552]	@ (800682c <HAL_RCC_ClockConfig+0x240>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 030f 	and.w	r3, r3, #15
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	429a      	cmp	r2, r3
 800660c:	d910      	bls.n	8006630 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800660e:	4b87      	ldr	r3, [pc, #540]	@ (800682c <HAL_RCC_ClockConfig+0x240>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f023 020f 	bic.w	r2, r3, #15
 8006616:	4985      	ldr	r1, [pc, #532]	@ (800682c <HAL_RCC_ClockConfig+0x240>)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	4313      	orrs	r3, r2
 800661c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800661e:	4b83      	ldr	r3, [pc, #524]	@ (800682c <HAL_RCC_ClockConfig+0x240>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 030f 	and.w	r3, r3, #15
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	429a      	cmp	r2, r3
 800662a:	d001      	beq.n	8006630 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e184      	b.n	800693a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	d010      	beq.n	800665e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	4b7b      	ldr	r3, [pc, #492]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006648:	429a      	cmp	r2, r3
 800664a:	d908      	bls.n	800665e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800664c:	4b78      	ldr	r3, [pc, #480]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	4975      	ldr	r1, [pc, #468]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 800665a:	4313      	orrs	r3, r2
 800665c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0308 	and.w	r3, r3, #8
 8006666:	2b00      	cmp	r3, #0
 8006668:	d010      	beq.n	800668c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	695a      	ldr	r2, [r3, #20]
 800666e:	4b70      	ldr	r3, [pc, #448]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006676:	429a      	cmp	r2, r3
 8006678:	d908      	bls.n	800668c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800667a:	4b6d      	ldr	r3, [pc, #436]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	496a      	ldr	r1, [pc, #424]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 8006688:	4313      	orrs	r3, r2
 800668a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0310 	and.w	r3, r3, #16
 8006694:	2b00      	cmp	r3, #0
 8006696:	d010      	beq.n	80066ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	699a      	ldr	r2, [r3, #24]
 800669c:	4b64      	ldr	r3, [pc, #400]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d908      	bls.n	80066ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066a8:	4b61      	ldr	r3, [pc, #388]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	495e      	ldr	r1, [pc, #376]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d010      	beq.n	80066e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	69da      	ldr	r2, [r3, #28]
 80066ca:	4b59      	ldr	r3, [pc, #356]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d908      	bls.n	80066e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80066d6:	4b56      	ldr	r3, [pc, #344]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	4953      	ldr	r1, [pc, #332]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d010      	beq.n	8006716 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68da      	ldr	r2, [r3, #12]
 80066f8:	4b4d      	ldr	r3, [pc, #308]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	f003 030f 	and.w	r3, r3, #15
 8006700:	429a      	cmp	r2, r3
 8006702:	d908      	bls.n	8006716 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006704:	4b4a      	ldr	r3, [pc, #296]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	f023 020f 	bic.w	r2, r3, #15
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	4947      	ldr	r1, [pc, #284]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 8006712:	4313      	orrs	r3, r2
 8006714:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d055      	beq.n	80067ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006722:	4b43      	ldr	r3, [pc, #268]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	4940      	ldr	r1, [pc, #256]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 8006730:	4313      	orrs	r3, r2
 8006732:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2b02      	cmp	r3, #2
 800673a:	d107      	bne.n	800674c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800673c:	4b3c      	ldr	r3, [pc, #240]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d121      	bne.n	800678c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e0f6      	b.n	800693a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	2b03      	cmp	r3, #3
 8006752:	d107      	bne.n	8006764 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006754:	4b36      	ldr	r3, [pc, #216]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d115      	bne.n	800678c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e0ea      	b.n	800693a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d107      	bne.n	800677c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800676c:	4b30      	ldr	r3, [pc, #192]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006774:	2b00      	cmp	r3, #0
 8006776:	d109      	bne.n	800678c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e0de      	b.n	800693a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800677c:	4b2c      	ldr	r3, [pc, #176]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0304 	and.w	r3, r3, #4
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e0d6      	b.n	800693a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800678c:	4b28      	ldr	r3, [pc, #160]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f023 0207 	bic.w	r2, r3, #7
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	4925      	ldr	r1, [pc, #148]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 800679a:	4313      	orrs	r3, r2
 800679c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800679e:	f7fd fdaf 	bl	8004300 <HAL_GetTick>
 80067a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067a4:	e00a      	b.n	80067bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067a6:	f7fd fdab 	bl	8004300 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e0be      	b.n	800693a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d1eb      	bne.n	80067a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d010      	beq.n	80067fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	4b14      	ldr	r3, [pc, #80]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	f003 030f 	and.w	r3, r3, #15
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d208      	bcs.n	80067fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067ea:	4b11      	ldr	r3, [pc, #68]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	f023 020f 	bic.w	r2, r3, #15
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	490e      	ldr	r1, [pc, #56]	@ (8006830 <HAL_RCC_ClockConfig+0x244>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067fc:	4b0b      	ldr	r3, [pc, #44]	@ (800682c <HAL_RCC_ClockConfig+0x240>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 030f 	and.w	r3, r3, #15
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	429a      	cmp	r2, r3
 8006808:	d214      	bcs.n	8006834 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800680a:	4b08      	ldr	r3, [pc, #32]	@ (800682c <HAL_RCC_ClockConfig+0x240>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f023 020f 	bic.w	r2, r3, #15
 8006812:	4906      	ldr	r1, [pc, #24]	@ (800682c <HAL_RCC_ClockConfig+0x240>)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	4313      	orrs	r3, r2
 8006818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800681a:	4b04      	ldr	r3, [pc, #16]	@ (800682c <HAL_RCC_ClockConfig+0x240>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	429a      	cmp	r2, r3
 8006826:	d005      	beq.n	8006834 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e086      	b.n	800693a <HAL_RCC_ClockConfig+0x34e>
 800682c:	52002000 	.word	0x52002000
 8006830:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b00      	cmp	r3, #0
 800683e:	d010      	beq.n	8006862 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	4b3f      	ldr	r3, [pc, #252]	@ (8006944 <HAL_RCC_ClockConfig+0x358>)
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800684c:	429a      	cmp	r2, r3
 800684e:	d208      	bcs.n	8006862 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006850:	4b3c      	ldr	r3, [pc, #240]	@ (8006944 <HAL_RCC_ClockConfig+0x358>)
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	4939      	ldr	r1, [pc, #228]	@ (8006944 <HAL_RCC_ClockConfig+0x358>)
 800685e:	4313      	orrs	r3, r2
 8006860:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0308 	and.w	r3, r3, #8
 800686a:	2b00      	cmp	r3, #0
 800686c:	d010      	beq.n	8006890 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695a      	ldr	r2, [r3, #20]
 8006872:	4b34      	ldr	r3, [pc, #208]	@ (8006944 <HAL_RCC_ClockConfig+0x358>)
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800687a:	429a      	cmp	r2, r3
 800687c:	d208      	bcs.n	8006890 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800687e:	4b31      	ldr	r3, [pc, #196]	@ (8006944 <HAL_RCC_ClockConfig+0x358>)
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	492e      	ldr	r1, [pc, #184]	@ (8006944 <HAL_RCC_ClockConfig+0x358>)
 800688c:	4313      	orrs	r3, r2
 800688e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0310 	and.w	r3, r3, #16
 8006898:	2b00      	cmp	r3, #0
 800689a:	d010      	beq.n	80068be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699a      	ldr	r2, [r3, #24]
 80068a0:	4b28      	ldr	r3, [pc, #160]	@ (8006944 <HAL_RCC_ClockConfig+0x358>)
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d208      	bcs.n	80068be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068ac:	4b25      	ldr	r3, [pc, #148]	@ (8006944 <HAL_RCC_ClockConfig+0x358>)
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	4922      	ldr	r1, [pc, #136]	@ (8006944 <HAL_RCC_ClockConfig+0x358>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d010      	beq.n	80068ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69da      	ldr	r2, [r3, #28]
 80068ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006944 <HAL_RCC_ClockConfig+0x358>)
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d208      	bcs.n	80068ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80068da:	4b1a      	ldr	r3, [pc, #104]	@ (8006944 <HAL_RCC_ClockConfig+0x358>)
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	4917      	ldr	r1, [pc, #92]	@ (8006944 <HAL_RCC_ClockConfig+0x358>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80068ec:	f000 f834 	bl	8006958 <HAL_RCC_GetSysClockFreq>
 80068f0:	4602      	mov	r2, r0
 80068f2:	4b14      	ldr	r3, [pc, #80]	@ (8006944 <HAL_RCC_ClockConfig+0x358>)
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	0a1b      	lsrs	r3, r3, #8
 80068f8:	f003 030f 	and.w	r3, r3, #15
 80068fc:	4912      	ldr	r1, [pc, #72]	@ (8006948 <HAL_RCC_ClockConfig+0x35c>)
 80068fe:	5ccb      	ldrb	r3, [r1, r3]
 8006900:	f003 031f 	and.w	r3, r3, #31
 8006904:	fa22 f303 	lsr.w	r3, r2, r3
 8006908:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800690a:	4b0e      	ldr	r3, [pc, #56]	@ (8006944 <HAL_RCC_ClockConfig+0x358>)
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	4a0d      	ldr	r2, [pc, #52]	@ (8006948 <HAL_RCC_ClockConfig+0x35c>)
 8006914:	5cd3      	ldrb	r3, [r2, r3]
 8006916:	f003 031f 	and.w	r3, r3, #31
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	fa22 f303 	lsr.w	r3, r2, r3
 8006920:	4a0a      	ldr	r2, [pc, #40]	@ (800694c <HAL_RCC_ClockConfig+0x360>)
 8006922:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006924:	4a0a      	ldr	r2, [pc, #40]	@ (8006950 <HAL_RCC_ClockConfig+0x364>)
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800692a:	4b0a      	ldr	r3, [pc, #40]	@ (8006954 <HAL_RCC_ClockConfig+0x368>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f7fd fc9c 	bl	800426c <HAL_InitTick>
 8006934:	4603      	mov	r3, r0
 8006936:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006938:	7bfb      	ldrb	r3, [r7, #15]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	58024400 	.word	0x58024400
 8006948:	0800d2c4 	.word	0x0800d2c4
 800694c:	24000004 	.word	0x24000004
 8006950:	24000000 	.word	0x24000000
 8006954:	24000008 	.word	0x24000008

08006958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006958:	b480      	push	{r7}
 800695a:	b089      	sub	sp, #36	@ 0x24
 800695c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800695e:	4bb3      	ldr	r3, [pc, #716]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006966:	2b18      	cmp	r3, #24
 8006968:	f200 8155 	bhi.w	8006c16 <HAL_RCC_GetSysClockFreq+0x2be>
 800696c:	a201      	add	r2, pc, #4	@ (adr r2, 8006974 <HAL_RCC_GetSysClockFreq+0x1c>)
 800696e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006972:	bf00      	nop
 8006974:	080069d9 	.word	0x080069d9
 8006978:	08006c17 	.word	0x08006c17
 800697c:	08006c17 	.word	0x08006c17
 8006980:	08006c17 	.word	0x08006c17
 8006984:	08006c17 	.word	0x08006c17
 8006988:	08006c17 	.word	0x08006c17
 800698c:	08006c17 	.word	0x08006c17
 8006990:	08006c17 	.word	0x08006c17
 8006994:	080069ff 	.word	0x080069ff
 8006998:	08006c17 	.word	0x08006c17
 800699c:	08006c17 	.word	0x08006c17
 80069a0:	08006c17 	.word	0x08006c17
 80069a4:	08006c17 	.word	0x08006c17
 80069a8:	08006c17 	.word	0x08006c17
 80069ac:	08006c17 	.word	0x08006c17
 80069b0:	08006c17 	.word	0x08006c17
 80069b4:	08006a05 	.word	0x08006a05
 80069b8:	08006c17 	.word	0x08006c17
 80069bc:	08006c17 	.word	0x08006c17
 80069c0:	08006c17 	.word	0x08006c17
 80069c4:	08006c17 	.word	0x08006c17
 80069c8:	08006c17 	.word	0x08006c17
 80069cc:	08006c17 	.word	0x08006c17
 80069d0:	08006c17 	.word	0x08006c17
 80069d4:	08006a0b 	.word	0x08006a0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069d8:	4b94      	ldr	r3, [pc, #592]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0320 	and.w	r3, r3, #32
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d009      	beq.n	80069f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069e4:	4b91      	ldr	r3, [pc, #580]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	08db      	lsrs	r3, r3, #3
 80069ea:	f003 0303 	and.w	r3, r3, #3
 80069ee:	4a90      	ldr	r2, [pc, #576]	@ (8006c30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069f0:	fa22 f303 	lsr.w	r3, r2, r3
 80069f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80069f6:	e111      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80069f8:	4b8d      	ldr	r3, [pc, #564]	@ (8006c30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069fa:	61bb      	str	r3, [r7, #24]
      break;
 80069fc:	e10e      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80069fe:	4b8d      	ldr	r3, [pc, #564]	@ (8006c34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a00:	61bb      	str	r3, [r7, #24]
      break;
 8006a02:	e10b      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006a04:	4b8c      	ldr	r3, [pc, #560]	@ (8006c38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006a06:	61bb      	str	r3, [r7, #24]
      break;
 8006a08:	e108      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a0a:	4b88      	ldr	r3, [pc, #544]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0e:	f003 0303 	and.w	r3, r3, #3
 8006a12:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006a14:	4b85      	ldr	r3, [pc, #532]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a18:	091b      	lsrs	r3, r3, #4
 8006a1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a1e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a20:	4b82      	ldr	r3, [pc, #520]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006a2a:	4b80      	ldr	r3, [pc, #512]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a2e:	08db      	lsrs	r3, r3, #3
 8006a30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	fb02 f303 	mul.w	r3, r2, r3
 8006a3a:	ee07 3a90 	vmov	s15, r3
 8006a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a42:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 80e1 	beq.w	8006c10 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	f000 8083 	beq.w	8006b5c <HAL_RCC_GetSysClockFreq+0x204>
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	f200 80a1 	bhi.w	8006ba0 <HAL_RCC_GetSysClockFreq+0x248>
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d003      	beq.n	8006a6c <HAL_RCC_GetSysClockFreq+0x114>
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d056      	beq.n	8006b18 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006a6a:	e099      	b.n	8006ba0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0320 	and.w	r3, r3, #32
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d02d      	beq.n	8006ad4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a78:	4b6c      	ldr	r3, [pc, #432]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	08db      	lsrs	r3, r3, #3
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	4a6b      	ldr	r2, [pc, #428]	@ (8006c30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a84:	fa22 f303 	lsr.w	r3, r2, r3
 8006a88:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	ee07 3a90 	vmov	s15, r3
 8006a90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aa2:	4b62      	ldr	r3, [pc, #392]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aaa:	ee07 3a90 	vmov	s15, r3
 8006aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ab2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ab6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006c3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ace:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006ad2:	e087      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ade:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006c40 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ae6:	4b51      	ldr	r3, [pc, #324]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aee:	ee07 3a90 	vmov	s15, r3
 8006af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006af6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006afa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006c3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b16:	e065      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	ee07 3a90 	vmov	s15, r3
 8006b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b22:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006c44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b2a:	4b40      	ldr	r3, [pc, #256]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b32:	ee07 3a90 	vmov	s15, r3
 8006b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b3e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006c3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b5a:	e043      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b66:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006c48 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b76:	ee07 3a90 	vmov	s15, r3
 8006b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b82:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006c3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b9e:	e021      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006baa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006c44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bc6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006c3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006be2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006be4:	4b11      	ldr	r3, [pc, #68]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be8:	0a5b      	lsrs	r3, r3, #9
 8006bea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bee:	3301      	adds	r3, #1
 8006bf0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	ee07 3a90 	vmov	s15, r3
 8006bf8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c08:	ee17 3a90 	vmov	r3, s15
 8006c0c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006c0e:	e005      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	61bb      	str	r3, [r7, #24]
      break;
 8006c14:	e002      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006c16:	4b07      	ldr	r3, [pc, #28]	@ (8006c34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c18:	61bb      	str	r3, [r7, #24]
      break;
 8006c1a:	bf00      	nop
  }

  return sysclockfreq;
 8006c1c:	69bb      	ldr	r3, [r7, #24]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3724      	adds	r7, #36	@ 0x24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	58024400 	.word	0x58024400
 8006c30:	03d09000 	.word	0x03d09000
 8006c34:	003d0900 	.word	0x003d0900
 8006c38:	017d7840 	.word	0x017d7840
 8006c3c:	46000000 	.word	0x46000000
 8006c40:	4c742400 	.word	0x4c742400
 8006c44:	4a742400 	.word	0x4a742400
 8006c48:	4bbebc20 	.word	0x4bbebc20

08006c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c52:	f7ff fe81 	bl	8006958 <HAL_RCC_GetSysClockFreq>
 8006c56:	4602      	mov	r2, r0
 8006c58:	4b10      	ldr	r3, [pc, #64]	@ (8006c9c <HAL_RCC_GetHCLKFreq+0x50>)
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	0a1b      	lsrs	r3, r3, #8
 8006c5e:	f003 030f 	and.w	r3, r3, #15
 8006c62:	490f      	ldr	r1, [pc, #60]	@ (8006ca0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c64:	5ccb      	ldrb	r3, [r1, r3]
 8006c66:	f003 031f 	and.w	r3, r3, #31
 8006c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c70:	4b0a      	ldr	r3, [pc, #40]	@ (8006c9c <HAL_RCC_GetHCLKFreq+0x50>)
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	f003 030f 	and.w	r3, r3, #15
 8006c78:	4a09      	ldr	r2, [pc, #36]	@ (8006ca0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c7a:	5cd3      	ldrb	r3, [r2, r3]
 8006c7c:	f003 031f 	and.w	r3, r3, #31
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	fa22 f303 	lsr.w	r3, r2, r3
 8006c86:	4a07      	ldr	r2, [pc, #28]	@ (8006ca4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c8a:	4a07      	ldr	r2, [pc, #28]	@ (8006ca8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006c90:	4b04      	ldr	r3, [pc, #16]	@ (8006ca4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c92:	681b      	ldr	r3, [r3, #0]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	58024400 	.word	0x58024400
 8006ca0:	0800d2c4 	.word	0x0800d2c4
 8006ca4:	24000004 	.word	0x24000004
 8006ca8:	24000000 	.word	0x24000000

08006cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006cb0:	f7ff ffcc 	bl	8006c4c <HAL_RCC_GetHCLKFreq>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	4b06      	ldr	r3, [pc, #24]	@ (8006cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	091b      	lsrs	r3, r3, #4
 8006cbc:	f003 0307 	and.w	r3, r3, #7
 8006cc0:	4904      	ldr	r1, [pc, #16]	@ (8006cd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cc2:	5ccb      	ldrb	r3, [r1, r3]
 8006cc4:	f003 031f 	and.w	r3, r3, #31
 8006cc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	58024400 	.word	0x58024400
 8006cd4:	0800d2c4 	.word	0x0800d2c4

08006cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006cdc:	f7ff ffb6 	bl	8006c4c <HAL_RCC_GetHCLKFreq>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	4b06      	ldr	r3, [pc, #24]	@ (8006cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	0a1b      	lsrs	r3, r3, #8
 8006ce8:	f003 0307 	and.w	r3, r3, #7
 8006cec:	4904      	ldr	r1, [pc, #16]	@ (8006d00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006cee:	5ccb      	ldrb	r3, [r1, r3]
 8006cf0:	f003 031f 	and.w	r3, r3, #31
 8006cf4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	58024400 	.word	0x58024400
 8006d00:	0800d2c4 	.word	0x0800d2c4

08006d04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d08:	b0ca      	sub	sp, #296	@ 0x128
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d10:	2300      	movs	r3, #0
 8006d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d16:	2300      	movs	r3, #0
 8006d18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006d28:	2500      	movs	r5, #0
 8006d2a:	ea54 0305 	orrs.w	r3, r4, r5
 8006d2e:	d049      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d3a:	d02f      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006d3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d40:	d828      	bhi.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d46:	d01a      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006d48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d4c:	d822      	bhi.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006d52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d56:	d007      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d58:	e01c      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d5a:	4bb8      	ldr	r3, [pc, #736]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5e:	4ab7      	ldr	r2, [pc, #732]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d66:	e01a      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	2102      	movs	r1, #2
 8006d70:	4618      	mov	r0, r3
 8006d72:	f001 fc8f 	bl	8008694 <RCCEx_PLL2_Config>
 8006d76:	4603      	mov	r3, r0
 8006d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d7c:	e00f      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d82:	3328      	adds	r3, #40	@ 0x28
 8006d84:	2102      	movs	r1, #2
 8006d86:	4618      	mov	r0, r3
 8006d88:	f001 fd36 	bl	80087f8 <RCCEx_PLL3_Config>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d92:	e004      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d9a:	e000      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10a      	bne.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006da6:	4ba5      	ldr	r3, [pc, #660]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006daa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006db4:	4aa1      	ldr	r2, [pc, #644]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006db6:	430b      	orrs	r3, r1
 8006db8:	6513      	str	r3, [r2, #80]	@ 0x50
 8006dba:	e003      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dcc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006dd0:	f04f 0900 	mov.w	r9, #0
 8006dd4:	ea58 0309 	orrs.w	r3, r8, r9
 8006dd8:	d047      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de0:	2b04      	cmp	r3, #4
 8006de2:	d82a      	bhi.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006de4:	a201      	add	r2, pc, #4	@ (adr r2, 8006dec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dea:	bf00      	nop
 8006dec:	08006e01 	.word	0x08006e01
 8006df0:	08006e0f 	.word	0x08006e0f
 8006df4:	08006e25 	.word	0x08006e25
 8006df8:	08006e43 	.word	0x08006e43
 8006dfc:	08006e43 	.word	0x08006e43
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e00:	4b8e      	ldr	r3, [pc, #568]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e04:	4a8d      	ldr	r2, [pc, #564]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e0c:	e01a      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e12:	3308      	adds	r3, #8
 8006e14:	2100      	movs	r1, #0
 8006e16:	4618      	mov	r0, r3
 8006e18:	f001 fc3c 	bl	8008694 <RCCEx_PLL2_Config>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e22:	e00f      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e28:	3328      	adds	r3, #40	@ 0x28
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f001 fce3 	bl	80087f8 <RCCEx_PLL3_Config>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e38:	e004      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e40:	e000      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10a      	bne.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e4c:	4b7b      	ldr	r3, [pc, #492]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e50:	f023 0107 	bic.w	r1, r3, #7
 8006e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e5a:	4a78      	ldr	r2, [pc, #480]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e60:	e003      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e72:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006e76:	f04f 0b00 	mov.w	fp, #0
 8006e7a:	ea5a 030b 	orrs.w	r3, sl, fp
 8006e7e:	d04c      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e8a:	d030      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e90:	d829      	bhi.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e92:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e94:	d02d      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006e96:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e98:	d825      	bhi.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e9a:	2b80      	cmp	r3, #128	@ 0x80
 8006e9c:	d018      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006e9e:	2b80      	cmp	r3, #128	@ 0x80
 8006ea0:	d821      	bhi.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006ea6:	2b40      	cmp	r3, #64	@ 0x40
 8006ea8:	d007      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006eaa:	e01c      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eac:	4b63      	ldr	r3, [pc, #396]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb0:	4a62      	ldr	r2, [pc, #392]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006eb8:	e01c      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f001 fbe6 	bl	8008694 <RCCEx_PLL2_Config>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ece:	e011      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed4:	3328      	adds	r3, #40	@ 0x28
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f001 fc8d 	bl	80087f8 <RCCEx_PLL3_Config>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ee4:	e006      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006eec:	e002      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006eee:	bf00      	nop
 8006ef0:	e000      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006ef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10a      	bne.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006efc:	4b4f      	ldr	r3, [pc, #316]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f00:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f0a:	4a4c      	ldr	r2, [pc, #304]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f0c:	430b      	orrs	r3, r1
 8006f0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f10:	e003      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006f26:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006f30:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006f34:	460b      	mov	r3, r1
 8006f36:	4313      	orrs	r3, r2
 8006f38:	d053      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006f42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f46:	d035      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006f48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f4c:	d82e      	bhi.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f4e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f52:	d031      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006f54:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f58:	d828      	bhi.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f5e:	d01a      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006f60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f64:	d822      	bhi.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006f6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f6e:	d007      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006f70:	e01c      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f72:	4b32      	ldr	r3, [pc, #200]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f76:	4a31      	ldr	r2, [pc, #196]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f7e:	e01c      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f84:	3308      	adds	r3, #8
 8006f86:	2100      	movs	r1, #0
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f001 fb83 	bl	8008694 <RCCEx_PLL2_Config>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f94:	e011      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f9a:	3328      	adds	r3, #40	@ 0x28
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f001 fc2a 	bl	80087f8 <RCCEx_PLL3_Config>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006faa:	e006      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fb2:	e002      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006fb4:	bf00      	nop
 8006fb6:	e000      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10b      	bne.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fd4:	430b      	orrs	r3, r1
 8006fd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fd8:	e003      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006fee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006ff8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4313      	orrs	r3, r2
 8007000:	d056      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007006:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800700a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800700e:	d038      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007010:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007014:	d831      	bhi.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007016:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800701a:	d034      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800701c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007020:	d82b      	bhi.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007022:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007026:	d01d      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007028:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800702c:	d825      	bhi.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800702e:	2b00      	cmp	r3, #0
 8007030:	d006      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007032:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007036:	d00a      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007038:	e01f      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800703a:	bf00      	nop
 800703c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007040:	4ba2      	ldr	r3, [pc, #648]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007044:	4aa1      	ldr	r2, [pc, #644]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800704a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800704c:	e01c      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800704e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007052:	3308      	adds	r3, #8
 8007054:	2100      	movs	r1, #0
 8007056:	4618      	mov	r0, r3
 8007058:	f001 fb1c 	bl	8008694 <RCCEx_PLL2_Config>
 800705c:	4603      	mov	r3, r0
 800705e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007062:	e011      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007068:	3328      	adds	r3, #40	@ 0x28
 800706a:	2100      	movs	r1, #0
 800706c:	4618      	mov	r0, r3
 800706e:	f001 fbc3 	bl	80087f8 <RCCEx_PLL3_Config>
 8007072:	4603      	mov	r3, r0
 8007074:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007078:	e006      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007080:	e002      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007082:	bf00      	nop
 8007084:	e000      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10b      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007090:	4b8e      	ldr	r3, [pc, #568]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007094:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800709c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070a0:	4a8a      	ldr	r2, [pc, #552]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070a2:	430b      	orrs	r3, r1
 80070a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80070a6:	e003      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80070bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80070c0:	2300      	movs	r3, #0
 80070c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80070c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80070ca:	460b      	mov	r3, r1
 80070cc:	4313      	orrs	r3, r2
 80070ce:	d03a      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80070d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070d6:	2b30      	cmp	r3, #48	@ 0x30
 80070d8:	d01f      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80070da:	2b30      	cmp	r3, #48	@ 0x30
 80070dc:	d819      	bhi.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80070de:	2b20      	cmp	r3, #32
 80070e0:	d00c      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80070e2:	2b20      	cmp	r3, #32
 80070e4:	d815      	bhi.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d019      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80070ea:	2b10      	cmp	r3, #16
 80070ec:	d111      	bne.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070ee:	4b77      	ldr	r3, [pc, #476]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f2:	4a76      	ldr	r2, [pc, #472]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80070fa:	e011      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007100:	3308      	adds	r3, #8
 8007102:	2102      	movs	r1, #2
 8007104:	4618      	mov	r0, r3
 8007106:	f001 fac5 	bl	8008694 <RCCEx_PLL2_Config>
 800710a:	4603      	mov	r3, r0
 800710c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007110:	e006      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007118:	e002      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800711a:	bf00      	nop
 800711c:	e000      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800711e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10a      	bne.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007128:	4b68      	ldr	r3, [pc, #416]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800712a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800712c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007136:	4a65      	ldr	r2, [pc, #404]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007138:	430b      	orrs	r3, r1
 800713a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800713c:	e003      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007142:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007152:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007156:	2300      	movs	r3, #0
 8007158:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800715c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007160:	460b      	mov	r3, r1
 8007162:	4313      	orrs	r3, r2
 8007164:	d051      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800716c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007170:	d035      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007172:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007176:	d82e      	bhi.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007178:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800717c:	d031      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800717e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007182:	d828      	bhi.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007184:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007188:	d01a      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800718a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800718e:	d822      	bhi.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007190:	2b00      	cmp	r3, #0
 8007192:	d003      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007198:	d007      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800719a:	e01c      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800719c:	4b4b      	ldr	r3, [pc, #300]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800719e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a0:	4a4a      	ldr	r2, [pc, #296]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071a8:	e01c      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ae:	3308      	adds	r3, #8
 80071b0:	2100      	movs	r1, #0
 80071b2:	4618      	mov	r0, r3
 80071b4:	f001 fa6e 	bl	8008694 <RCCEx_PLL2_Config>
 80071b8:	4603      	mov	r3, r0
 80071ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071be:	e011      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c4:	3328      	adds	r3, #40	@ 0x28
 80071c6:	2100      	movs	r1, #0
 80071c8:	4618      	mov	r0, r3
 80071ca:	f001 fb15 	bl	80087f8 <RCCEx_PLL3_Config>
 80071ce:	4603      	mov	r3, r0
 80071d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071d4:	e006      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071dc:	e002      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80071de:	bf00      	nop
 80071e0:	e000      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80071e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10a      	bne.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80071ec:	4b37      	ldr	r3, [pc, #220]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071f0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80071f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071fa:	4a34      	ldr	r2, [pc, #208]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071fc:	430b      	orrs	r3, r1
 80071fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8007200:	e003      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007206:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800720a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007216:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800721a:	2300      	movs	r3, #0
 800721c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007220:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007224:	460b      	mov	r3, r1
 8007226:	4313      	orrs	r3, r2
 8007228:	d056      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800722a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007230:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007234:	d033      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007236:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800723a:	d82c      	bhi.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800723c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007240:	d02f      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007242:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007246:	d826      	bhi.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007248:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800724c:	d02b      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800724e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007252:	d820      	bhi.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007254:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007258:	d012      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800725a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800725e:	d81a      	bhi.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007260:	2b00      	cmp	r3, #0
 8007262:	d022      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007268:	d115      	bne.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800726a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726e:	3308      	adds	r3, #8
 8007270:	2101      	movs	r1, #1
 8007272:	4618      	mov	r0, r3
 8007274:	f001 fa0e 	bl	8008694 <RCCEx_PLL2_Config>
 8007278:	4603      	mov	r3, r0
 800727a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800727e:	e015      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007284:	3328      	adds	r3, #40	@ 0x28
 8007286:	2101      	movs	r1, #1
 8007288:	4618      	mov	r0, r3
 800728a:	f001 fab5 	bl	80087f8 <RCCEx_PLL3_Config>
 800728e:	4603      	mov	r3, r0
 8007290:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007294:	e00a      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800729c:	e006      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800729e:	bf00      	nop
 80072a0:	e004      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072a2:	bf00      	nop
 80072a4:	e002      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072a6:	bf00      	nop
 80072a8:	e000      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10d      	bne.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80072b4:	4b05      	ldr	r3, [pc, #20]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80072bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072c2:	4a02      	ldr	r2, [pc, #8]	@ (80072cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072c4:	430b      	orrs	r3, r1
 80072c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80072c8:	e006      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80072ca:	bf00      	nop
 80072cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80072d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80072e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072e8:	2300      	movs	r3, #0
 80072ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072ee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80072f2:	460b      	mov	r3, r1
 80072f4:	4313      	orrs	r3, r2
 80072f6:	d055      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80072f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007300:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007304:	d033      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007306:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800730a:	d82c      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800730c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007310:	d02f      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007316:	d826      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007318:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800731c:	d02b      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800731e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007322:	d820      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007324:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007328:	d012      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800732a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800732e:	d81a      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007330:	2b00      	cmp	r3, #0
 8007332:	d022      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007334:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007338:	d115      	bne.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800733a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800733e:	3308      	adds	r3, #8
 8007340:	2101      	movs	r1, #1
 8007342:	4618      	mov	r0, r3
 8007344:	f001 f9a6 	bl	8008694 <RCCEx_PLL2_Config>
 8007348:	4603      	mov	r3, r0
 800734a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800734e:	e015      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007354:	3328      	adds	r3, #40	@ 0x28
 8007356:	2101      	movs	r1, #1
 8007358:	4618      	mov	r0, r3
 800735a:	f001 fa4d 	bl	80087f8 <RCCEx_PLL3_Config>
 800735e:	4603      	mov	r3, r0
 8007360:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007364:	e00a      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800736c:	e006      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800736e:	bf00      	nop
 8007370:	e004      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007372:	bf00      	nop
 8007374:	e002      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007376:	bf00      	nop
 8007378:	e000      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800737a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800737c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10b      	bne.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007384:	4ba3      	ldr	r3, [pc, #652]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007388:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800738c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007390:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007394:	4a9f      	ldr	r2, [pc, #636]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007396:	430b      	orrs	r3, r1
 8007398:	6593      	str	r3, [r2, #88]	@ 0x58
 800739a:	e003      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800739c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80073a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80073b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80073b4:	2300      	movs	r3, #0
 80073b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80073ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80073be:	460b      	mov	r3, r1
 80073c0:	4313      	orrs	r3, r2
 80073c2:	d037      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80073c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073ce:	d00e      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80073d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073d4:	d816      	bhi.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d018      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80073da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073de:	d111      	bne.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073e0:	4b8c      	ldr	r3, [pc, #560]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e4:	4a8b      	ldr	r2, [pc, #556]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80073ec:	e00f      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f2:	3308      	adds	r3, #8
 80073f4:	2101      	movs	r1, #1
 80073f6:	4618      	mov	r0, r3
 80073f8:	f001 f94c 	bl	8008694 <RCCEx_PLL2_Config>
 80073fc:	4603      	mov	r3, r0
 80073fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007402:	e004      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800740a:	e000      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800740c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800740e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10a      	bne.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007416:	4b7f      	ldr	r3, [pc, #508]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800741a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800741e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007424:	4a7b      	ldr	r2, [pc, #492]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007426:	430b      	orrs	r3, r1
 8007428:	6513      	str	r3, [r2, #80]	@ 0x50
 800742a:	e003      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800742c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007430:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007440:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007444:	2300      	movs	r3, #0
 8007446:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800744a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800744e:	460b      	mov	r3, r1
 8007450:	4313      	orrs	r3, r2
 8007452:	d039      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800745a:	2b03      	cmp	r3, #3
 800745c:	d81c      	bhi.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800745e:	a201      	add	r2, pc, #4	@ (adr r2, 8007464 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007464:	080074a1 	.word	0x080074a1
 8007468:	08007475 	.word	0x08007475
 800746c:	08007483 	.word	0x08007483
 8007470:	080074a1 	.word	0x080074a1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007474:	4b67      	ldr	r3, [pc, #412]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007478:	4a66      	ldr	r2, [pc, #408]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800747a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800747e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007480:	e00f      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007486:	3308      	adds	r3, #8
 8007488:	2102      	movs	r1, #2
 800748a:	4618      	mov	r0, r3
 800748c:	f001 f902 	bl	8008694 <RCCEx_PLL2_Config>
 8007490:	4603      	mov	r3, r0
 8007492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007496:	e004      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800749e:	e000      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80074a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10a      	bne.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80074aa:	4b5a      	ldr	r3, [pc, #360]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074ae:	f023 0103 	bic.w	r1, r3, #3
 80074b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074b8:	4a56      	ldr	r2, [pc, #344]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ba:	430b      	orrs	r3, r1
 80074bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074be:	e003      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80074d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074d8:	2300      	movs	r3, #0
 80074da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80074de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80074e2:	460b      	mov	r3, r1
 80074e4:	4313      	orrs	r3, r2
 80074e6:	f000 809f 	beq.w	8007628 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074ea:	4b4b      	ldr	r3, [pc, #300]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a4a      	ldr	r2, [pc, #296]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80074f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074f6:	f7fc ff03 	bl	8004300 <HAL_GetTick>
 80074fa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074fe:	e00b      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007500:	f7fc fefe 	bl	8004300 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	2b64      	cmp	r3, #100	@ 0x64
 800750e:	d903      	bls.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007516:	e005      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007518:	4b3f      	ldr	r3, [pc, #252]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007520:	2b00      	cmp	r3, #0
 8007522:	d0ed      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007528:	2b00      	cmp	r3, #0
 800752a:	d179      	bne.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800752c:	4b39      	ldr	r3, [pc, #228]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800752e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007534:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007538:	4053      	eors	r3, r2
 800753a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800753e:	2b00      	cmp	r3, #0
 8007540:	d015      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007542:	4b34      	ldr	r3, [pc, #208]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007546:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800754a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800754e:	4b31      	ldr	r3, [pc, #196]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007552:	4a30      	ldr	r2, [pc, #192]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007558:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800755a:	4b2e      	ldr	r3, [pc, #184]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800755c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800755e:	4a2d      	ldr	r2, [pc, #180]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007560:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007564:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007566:	4a2b      	ldr	r2, [pc, #172]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007568:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800756c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800756e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007572:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800757a:	d118      	bne.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800757c:	f7fc fec0 	bl	8004300 <HAL_GetTick>
 8007580:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007584:	e00d      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007586:	f7fc febb 	bl	8004300 <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007590:	1ad2      	subs	r2, r2, r3
 8007592:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007596:	429a      	cmp	r2, r3
 8007598:	d903      	bls.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80075a0:	e005      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075a2:	4b1c      	ldr	r3, [pc, #112]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0eb      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80075ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d129      	bne.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075c6:	d10e      	bne.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80075c8:	4b12      	ldr	r3, [pc, #72]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80075d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075d8:	091a      	lsrs	r2, r3, #4
 80075da:	4b10      	ldr	r3, [pc, #64]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80075dc:	4013      	ands	r3, r2
 80075de:	4a0d      	ldr	r2, [pc, #52]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075e0:	430b      	orrs	r3, r1
 80075e2:	6113      	str	r3, [r2, #16]
 80075e4:	e005      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80075e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	4a0a      	ldr	r2, [pc, #40]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80075f0:	6113      	str	r3, [r2, #16]
 80075f2:	4b08      	ldr	r3, [pc, #32]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075f4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80075f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007602:	4a04      	ldr	r2, [pc, #16]	@ (8007614 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007604:	430b      	orrs	r3, r1
 8007606:	6713      	str	r3, [r2, #112]	@ 0x70
 8007608:	e00e      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800760a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800760e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007612:	e009      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007614:	58024400 	.word	0x58024400
 8007618:	58024800 	.word	0x58024800
 800761c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007624:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f002 0301 	and.w	r3, r2, #1
 8007634:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007638:	2300      	movs	r3, #0
 800763a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800763e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007642:	460b      	mov	r3, r1
 8007644:	4313      	orrs	r3, r2
 8007646:	f000 8089 	beq.w	800775c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800764a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007650:	2b28      	cmp	r3, #40	@ 0x28
 8007652:	d86b      	bhi.n	800772c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007654:	a201      	add	r2, pc, #4	@ (adr r2, 800765c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765a:	bf00      	nop
 800765c:	08007735 	.word	0x08007735
 8007660:	0800772d 	.word	0x0800772d
 8007664:	0800772d 	.word	0x0800772d
 8007668:	0800772d 	.word	0x0800772d
 800766c:	0800772d 	.word	0x0800772d
 8007670:	0800772d 	.word	0x0800772d
 8007674:	0800772d 	.word	0x0800772d
 8007678:	0800772d 	.word	0x0800772d
 800767c:	08007701 	.word	0x08007701
 8007680:	0800772d 	.word	0x0800772d
 8007684:	0800772d 	.word	0x0800772d
 8007688:	0800772d 	.word	0x0800772d
 800768c:	0800772d 	.word	0x0800772d
 8007690:	0800772d 	.word	0x0800772d
 8007694:	0800772d 	.word	0x0800772d
 8007698:	0800772d 	.word	0x0800772d
 800769c:	08007717 	.word	0x08007717
 80076a0:	0800772d 	.word	0x0800772d
 80076a4:	0800772d 	.word	0x0800772d
 80076a8:	0800772d 	.word	0x0800772d
 80076ac:	0800772d 	.word	0x0800772d
 80076b0:	0800772d 	.word	0x0800772d
 80076b4:	0800772d 	.word	0x0800772d
 80076b8:	0800772d 	.word	0x0800772d
 80076bc:	08007735 	.word	0x08007735
 80076c0:	0800772d 	.word	0x0800772d
 80076c4:	0800772d 	.word	0x0800772d
 80076c8:	0800772d 	.word	0x0800772d
 80076cc:	0800772d 	.word	0x0800772d
 80076d0:	0800772d 	.word	0x0800772d
 80076d4:	0800772d 	.word	0x0800772d
 80076d8:	0800772d 	.word	0x0800772d
 80076dc:	08007735 	.word	0x08007735
 80076e0:	0800772d 	.word	0x0800772d
 80076e4:	0800772d 	.word	0x0800772d
 80076e8:	0800772d 	.word	0x0800772d
 80076ec:	0800772d 	.word	0x0800772d
 80076f0:	0800772d 	.word	0x0800772d
 80076f4:	0800772d 	.word	0x0800772d
 80076f8:	0800772d 	.word	0x0800772d
 80076fc:	08007735 	.word	0x08007735
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007704:	3308      	adds	r3, #8
 8007706:	2101      	movs	r1, #1
 8007708:	4618      	mov	r0, r3
 800770a:	f000 ffc3 	bl	8008694 <RCCEx_PLL2_Config>
 800770e:	4603      	mov	r3, r0
 8007710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007714:	e00f      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771a:	3328      	adds	r3, #40	@ 0x28
 800771c:	2101      	movs	r1, #1
 800771e:	4618      	mov	r0, r3
 8007720:	f001 f86a 	bl	80087f8 <RCCEx_PLL3_Config>
 8007724:	4603      	mov	r3, r0
 8007726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800772a:	e004      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007732:	e000      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10a      	bne.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800773e:	4bbf      	ldr	r3, [pc, #764]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007742:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800774a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800774c:	4abb      	ldr	r2, [pc, #748]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800774e:	430b      	orrs	r3, r1
 8007750:	6553      	str	r3, [r2, #84]	@ 0x54
 8007752:	e003      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007754:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007758:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800775c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007764:	f002 0302 	and.w	r3, r2, #2
 8007768:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800776c:	2300      	movs	r3, #0
 800776e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007772:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007776:	460b      	mov	r3, r1
 8007778:	4313      	orrs	r3, r2
 800777a:	d041      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800777c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007780:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007782:	2b05      	cmp	r3, #5
 8007784:	d824      	bhi.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007786:	a201      	add	r2, pc, #4	@ (adr r2, 800778c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778c:	080077d9 	.word	0x080077d9
 8007790:	080077a5 	.word	0x080077a5
 8007794:	080077bb 	.word	0x080077bb
 8007798:	080077d9 	.word	0x080077d9
 800779c:	080077d9 	.word	0x080077d9
 80077a0:	080077d9 	.word	0x080077d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a8:	3308      	adds	r3, #8
 80077aa:	2101      	movs	r1, #1
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 ff71 	bl	8008694 <RCCEx_PLL2_Config>
 80077b2:	4603      	mov	r3, r0
 80077b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80077b8:	e00f      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077be:	3328      	adds	r3, #40	@ 0x28
 80077c0:	2101      	movs	r1, #1
 80077c2:	4618      	mov	r0, r3
 80077c4:	f001 f818 	bl	80087f8 <RCCEx_PLL3_Config>
 80077c8:	4603      	mov	r3, r0
 80077ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80077ce:	e004      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077d6:	e000      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80077d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10a      	bne.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80077e2:	4b96      	ldr	r3, [pc, #600]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e6:	f023 0107 	bic.w	r1, r3, #7
 80077ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077f0:	4a92      	ldr	r2, [pc, #584]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077f2:	430b      	orrs	r3, r1
 80077f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80077f6:	e003      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007808:	f002 0304 	and.w	r3, r2, #4
 800780c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007810:	2300      	movs	r3, #0
 8007812:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007816:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800781a:	460b      	mov	r3, r1
 800781c:	4313      	orrs	r3, r2
 800781e:	d044      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007828:	2b05      	cmp	r3, #5
 800782a:	d825      	bhi.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800782c:	a201      	add	r2, pc, #4	@ (adr r2, 8007834 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800782e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007832:	bf00      	nop
 8007834:	08007881 	.word	0x08007881
 8007838:	0800784d 	.word	0x0800784d
 800783c:	08007863 	.word	0x08007863
 8007840:	08007881 	.word	0x08007881
 8007844:	08007881 	.word	0x08007881
 8007848:	08007881 	.word	0x08007881
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800784c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007850:	3308      	adds	r3, #8
 8007852:	2101      	movs	r1, #1
 8007854:	4618      	mov	r0, r3
 8007856:	f000 ff1d 	bl	8008694 <RCCEx_PLL2_Config>
 800785a:	4603      	mov	r3, r0
 800785c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007860:	e00f      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007866:	3328      	adds	r3, #40	@ 0x28
 8007868:	2101      	movs	r1, #1
 800786a:	4618      	mov	r0, r3
 800786c:	f000 ffc4 	bl	80087f8 <RCCEx_PLL3_Config>
 8007870:	4603      	mov	r3, r0
 8007872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007876:	e004      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800787e:	e000      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10b      	bne.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800788a:	4b6c      	ldr	r3, [pc, #432]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800788c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800788e:	f023 0107 	bic.w	r1, r3, #7
 8007892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007896:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800789a:	4a68      	ldr	r2, [pc, #416]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800789c:	430b      	orrs	r3, r1
 800789e:	6593      	str	r3, [r2, #88]	@ 0x58
 80078a0:	e003      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b2:	f002 0320 	and.w	r3, r2, #32
 80078b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80078ba:	2300      	movs	r3, #0
 80078bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80078c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80078c4:	460b      	mov	r3, r1
 80078c6:	4313      	orrs	r3, r2
 80078c8:	d055      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80078ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078d6:	d033      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80078d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078dc:	d82c      	bhi.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078e2:	d02f      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80078e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078e8:	d826      	bhi.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078ee:	d02b      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80078f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078f4:	d820      	bhi.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078fa:	d012      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80078fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007900:	d81a      	bhi.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007902:	2b00      	cmp	r3, #0
 8007904:	d022      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007906:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800790a:	d115      	bne.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800790c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007910:	3308      	adds	r3, #8
 8007912:	2100      	movs	r1, #0
 8007914:	4618      	mov	r0, r3
 8007916:	f000 febd 	bl	8008694 <RCCEx_PLL2_Config>
 800791a:	4603      	mov	r3, r0
 800791c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007920:	e015      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007926:	3328      	adds	r3, #40	@ 0x28
 8007928:	2102      	movs	r1, #2
 800792a:	4618      	mov	r0, r3
 800792c:	f000 ff64 	bl	80087f8 <RCCEx_PLL3_Config>
 8007930:	4603      	mov	r3, r0
 8007932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007936:	e00a      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800793e:	e006      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007940:	bf00      	nop
 8007942:	e004      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007944:	bf00      	nop
 8007946:	e002      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007948:	bf00      	nop
 800794a:	e000      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800794c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800794e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10b      	bne.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007956:	4b39      	ldr	r3, [pc, #228]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800795a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800795e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007966:	4a35      	ldr	r2, [pc, #212]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007968:	430b      	orrs	r3, r1
 800796a:	6553      	str	r3, [r2, #84]	@ 0x54
 800796c:	e003      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007972:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007986:	2300      	movs	r3, #0
 8007988:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800798c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007990:	460b      	mov	r3, r1
 8007992:	4313      	orrs	r3, r2
 8007994:	d058      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800799e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80079a2:	d033      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80079a4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80079a8:	d82c      	bhi.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ae:	d02f      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80079b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079b4:	d826      	bhi.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079ba:	d02b      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80079bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079c0:	d820      	bhi.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079c6:	d012      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80079c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079cc:	d81a      	bhi.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d022      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80079d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079d6:	d115      	bne.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079dc:	3308      	adds	r3, #8
 80079de:	2100      	movs	r1, #0
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 fe57 	bl	8008694 <RCCEx_PLL2_Config>
 80079e6:	4603      	mov	r3, r0
 80079e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80079ec:	e015      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f2:	3328      	adds	r3, #40	@ 0x28
 80079f4:	2102      	movs	r1, #2
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 fefe 	bl	80087f8 <RCCEx_PLL3_Config>
 80079fc:	4603      	mov	r3, r0
 80079fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007a02:	e00a      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a0a:	e006      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a0c:	bf00      	nop
 8007a0e:	e004      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a10:	bf00      	nop
 8007a12:	e002      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a14:	bf00      	nop
 8007a16:	e000      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10e      	bne.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a22:	4b06      	ldr	r3, [pc, #24]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a26:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a32:	4a02      	ldr	r2, [pc, #8]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a34:	430b      	orrs	r3, r1
 8007a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a38:	e006      	b.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007a3a:	bf00      	nop
 8007a3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007a54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a58:	2300      	movs	r3, #0
 8007a5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a5e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007a62:	460b      	mov	r3, r1
 8007a64:	4313      	orrs	r3, r2
 8007a66:	d055      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a70:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a74:	d033      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007a76:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a7a:	d82c      	bhi.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a80:	d02f      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007a82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a86:	d826      	bhi.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a88:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a8c:	d02b      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007a8e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a92:	d820      	bhi.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a98:	d012      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007a9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a9e:	d81a      	bhi.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d022      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007aa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007aa8:	d115      	bne.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aae:	3308      	adds	r3, #8
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f000 fdee 	bl	8008694 <RCCEx_PLL2_Config>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007abe:	e015      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac4:	3328      	adds	r3, #40	@ 0x28
 8007ac6:	2102      	movs	r1, #2
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 fe95 	bl	80087f8 <RCCEx_PLL3_Config>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ad4:	e00a      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007adc:	e006      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ade:	bf00      	nop
 8007ae0:	e004      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ae2:	bf00      	nop
 8007ae4:	e002      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007ae6:	bf00      	nop
 8007ae8:	e000      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10b      	bne.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007af4:	4ba1      	ldr	r3, [pc, #644]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007af8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b04:	4a9d      	ldr	r2, [pc, #628]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b06:	430b      	orrs	r3, r1
 8007b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b0a:	e003      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	f002 0308 	and.w	r3, r2, #8
 8007b20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b24:	2300      	movs	r3, #0
 8007b26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b2a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4313      	orrs	r3, r2
 8007b32:	d01e      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b40:	d10c      	bne.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b46:	3328      	adds	r3, #40	@ 0x28
 8007b48:	2102      	movs	r1, #2
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 fe54 	bl	80087f8 <RCCEx_PLL3_Config>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007b5c:	4b87      	ldr	r3, [pc, #540]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b60:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b6c:	4a83      	ldr	r2, [pc, #524]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b6e:	430b      	orrs	r3, r1
 8007b70:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7a:	f002 0310 	and.w	r3, r2, #16
 8007b7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b82:	2300      	movs	r3, #0
 8007b84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b88:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	d01e      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b9e:	d10c      	bne.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba4:	3328      	adds	r3, #40	@ 0x28
 8007ba6:	2102      	movs	r1, #2
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 fe25 	bl	80087f8 <RCCEx_PLL3_Config>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d002      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bba:	4b70      	ldr	r3, [pc, #448]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bbe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007bca:	4a6c      	ldr	r2, [pc, #432]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007bdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007be0:	2300      	movs	r3, #0
 8007be2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007be6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007bea:	460b      	mov	r3, r1
 8007bec:	4313      	orrs	r3, r2
 8007bee:	d03e      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007bf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bfc:	d022      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007bfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c02:	d81b      	bhi.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d003      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c0c:	d00b      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007c0e:	e015      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c14:	3308      	adds	r3, #8
 8007c16:	2100      	movs	r1, #0
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 fd3b 	bl	8008694 <RCCEx_PLL2_Config>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c24:	e00f      	b.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2a:	3328      	adds	r3, #40	@ 0x28
 8007c2c:	2102      	movs	r1, #2
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 fde2 	bl	80087f8 <RCCEx_PLL3_Config>
 8007c34:	4603      	mov	r3, r0
 8007c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c3a:	e004      	b.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c42:	e000      	b.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10b      	bne.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c4e:	4b4b      	ldr	r3, [pc, #300]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c52:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c5e:	4a47      	ldr	r2, [pc, #284]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c60:	430b      	orrs	r3, r1
 8007c62:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c64:	e003      	b.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c76:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007c7a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c80:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007c84:	460b      	mov	r3, r1
 8007c86:	4313      	orrs	r3, r2
 8007c88:	d03b      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c96:	d01f      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007c98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c9c:	d818      	bhi.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007c9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ca2:	d003      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007ca4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ca8:	d007      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007caa:	e011      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cac:	4b33      	ldr	r3, [pc, #204]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb0:	4a32      	ldr	r2, [pc, #200]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007cb8:	e00f      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cbe:	3328      	adds	r3, #40	@ 0x28
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 fd98 	bl	80087f8 <RCCEx_PLL3_Config>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007cce:	e004      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cd6:	e000      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10b      	bne.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ce2:	4b26      	ldr	r3, [pc, #152]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ce6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cf2:	4a22      	ldr	r2, [pc, #136]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cf4:	430b      	orrs	r3, r1
 8007cf6:	6553      	str	r3, [r2, #84]	@ 0x54
 8007cf8:	e003      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007d0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d10:	2300      	movs	r3, #0
 8007d12:	677b      	str	r3, [r7, #116]	@ 0x74
 8007d14:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	d034      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d003      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d2c:	d007      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007d2e:	e011      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d30:	4b12      	ldr	r3, [pc, #72]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d34:	4a11      	ldr	r2, [pc, #68]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d3c:	e00e      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d42:	3308      	adds	r3, #8
 8007d44:	2102      	movs	r1, #2
 8007d46:	4618      	mov	r0, r3
 8007d48:	f000 fca4 	bl	8008694 <RCCEx_PLL2_Config>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d52:	e003      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10d      	bne.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007d64:	4b05      	ldr	r3, [pc, #20]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d68:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d72:	4a02      	ldr	r2, [pc, #8]	@ (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d74:	430b      	orrs	r3, r1
 8007d76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d78:	e006      	b.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007d7a:	bf00      	nop
 8007d7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007d94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d96:	2300      	movs	r3, #0
 8007d98:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d9a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007d9e:	460b      	mov	r3, r1
 8007da0:	4313      	orrs	r3, r2
 8007da2:	d00c      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da8:	3328      	adds	r3, #40	@ 0x28
 8007daa:	2102      	movs	r1, #2
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 fd23 	bl	80087f8 <RCCEx_PLL3_Config>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d002      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007dca:	663b      	str	r3, [r7, #96]	@ 0x60
 8007dcc:	2300      	movs	r3, #0
 8007dce:	667b      	str	r3, [r7, #100]	@ 0x64
 8007dd0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	d038      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007de2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007de6:	d018      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007de8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dec:	d811      	bhi.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007dee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007df2:	d014      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007df8:	d80b      	bhi.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d011      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007dfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e02:	d106      	bne.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e04:	4bc3      	ldr	r3, [pc, #780]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e08:	4ac2      	ldr	r2, [pc, #776]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007e10:	e008      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e18:	e004      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e1a:	bf00      	nop
 8007e1c:	e002      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e1e:	bf00      	nop
 8007e20:	e000      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10b      	bne.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e2c:	4bb9      	ldr	r3, [pc, #740]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e30:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e3c:	4ab5      	ldr	r2, [pc, #724]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e3e:	430b      	orrs	r3, r1
 8007e40:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e42:	e003      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e54:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007e58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e5e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007e62:	460b      	mov	r3, r1
 8007e64:	4313      	orrs	r3, r2
 8007e66:	d009      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e68:	4baa      	ldr	r3, [pc, #680]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e6c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e76:	4aa7      	ldr	r2, [pc, #668]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e78:	430b      	orrs	r3, r1
 8007e7a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e84:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007e88:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e8e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007e92:	460b      	mov	r3, r1
 8007e94:	4313      	orrs	r3, r2
 8007e96:	d00a      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007e98:	4b9e      	ldr	r3, [pc, #632]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007ea8:	4a9a      	ldr	r2, [pc, #616]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eaa:	430b      	orrs	r3, r1
 8007eac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007eba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ec0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	d009      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007eca:	4b92      	ldr	r3, [pc, #584]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ece:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ed8:	4a8e      	ldr	r2, [pc, #568]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eda:	430b      	orrs	r3, r1
 8007edc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007eea:	643b      	str	r3, [r7, #64]	@ 0x40
 8007eec:	2300      	movs	r3, #0
 8007eee:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ef0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	d00e      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007efa:	4b86      	ldr	r3, [pc, #536]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	4a85      	ldr	r2, [pc, #532]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f00:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007f04:	6113      	str	r3, [r2, #16]
 8007f06:	4b83      	ldr	r3, [pc, #524]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f08:	6919      	ldr	r1, [r3, #16]
 8007f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007f12:	4a80      	ldr	r2, [pc, #512]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f14:	430b      	orrs	r3, r1
 8007f16:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f20:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007f24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f26:	2300      	movs	r3, #0
 8007f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f2a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4313      	orrs	r3, r2
 8007f32:	d009      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f34:	4b77      	ldr	r3, [pc, #476]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f38:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f42:	4a74      	ldr	r2, [pc, #464]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f44:	430b      	orrs	r3, r1
 8007f46:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007f54:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f56:	2300      	movs	r3, #0
 8007f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f5a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4313      	orrs	r3, r2
 8007f62:	d00a      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f64:	4b6b      	ldr	r3, [pc, #428]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f68:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f74:	4a67      	ldr	r2, [pc, #412]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f76:	430b      	orrs	r3, r1
 8007f78:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	2100      	movs	r1, #0
 8007f84:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f8c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007f90:	460b      	mov	r3, r1
 8007f92:	4313      	orrs	r3, r2
 8007f94:	d011      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f9a:	3308      	adds	r3, #8
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 fb78 	bl	8008694 <RCCEx_PLL2_Config>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	6239      	str	r1, [r7, #32]
 8007fc6:	f003 0302 	and.w	r3, r3, #2
 8007fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fcc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	d011      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fda:	3308      	adds	r3, #8
 8007fdc:	2101      	movs	r1, #1
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 fb58 	bl	8008694 <RCCEx_PLL2_Config>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	2100      	movs	r1, #0
 8008004:	61b9      	str	r1, [r7, #24]
 8008006:	f003 0304 	and.w	r3, r3, #4
 800800a:	61fb      	str	r3, [r7, #28]
 800800c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008010:	460b      	mov	r3, r1
 8008012:	4313      	orrs	r3, r2
 8008014:	d011      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800801a:	3308      	adds	r3, #8
 800801c:	2102      	movs	r1, #2
 800801e:	4618      	mov	r0, r3
 8008020:	f000 fb38 	bl	8008694 <RCCEx_PLL2_Config>
 8008024:	4603      	mov	r3, r0
 8008026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800802a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800803a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800803e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008042:	2100      	movs	r1, #0
 8008044:	6139      	str	r1, [r7, #16]
 8008046:	f003 0308 	and.w	r3, r3, #8
 800804a:	617b      	str	r3, [r7, #20]
 800804c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008050:	460b      	mov	r3, r1
 8008052:	4313      	orrs	r3, r2
 8008054:	d011      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805a:	3328      	adds	r3, #40	@ 0x28
 800805c:	2100      	movs	r1, #0
 800805e:	4618      	mov	r0, r3
 8008060:	f000 fbca 	bl	80087f8 <RCCEx_PLL3_Config>
 8008064:	4603      	mov	r3, r0
 8008066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800806a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800807a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008082:	2100      	movs	r1, #0
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	f003 0310 	and.w	r3, r3, #16
 800808a:	60fb      	str	r3, [r7, #12]
 800808c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008090:	460b      	mov	r3, r1
 8008092:	4313      	orrs	r3, r2
 8008094:	d011      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800809a:	3328      	adds	r3, #40	@ 0x28
 800809c:	2101      	movs	r1, #1
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fbaa 	bl	80087f8 <RCCEx_PLL3_Config>
 80080a4:	4603      	mov	r3, r0
 80080a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80080aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80080ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c2:	2100      	movs	r1, #0
 80080c4:	6039      	str	r1, [r7, #0]
 80080c6:	f003 0320 	and.w	r3, r3, #32
 80080ca:	607b      	str	r3, [r7, #4]
 80080cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80080d0:	460b      	mov	r3, r1
 80080d2:	4313      	orrs	r3, r2
 80080d4:	d011      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080da:	3328      	adds	r3, #40	@ 0x28
 80080dc:	2102      	movs	r1, #2
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 fb8a 	bl	80087f8 <RCCEx_PLL3_Config>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80080ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80080fa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	e000      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
}
 8008108:	4618      	mov	r0, r3
 800810a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800810e:	46bd      	mov	sp, r7
 8008110:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008114:	58024400 	.word	0x58024400

08008118 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800811c:	f7fe fd96 	bl	8006c4c <HAL_RCC_GetHCLKFreq>
 8008120:	4602      	mov	r2, r0
 8008122:	4b06      	ldr	r3, [pc, #24]	@ (800813c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	091b      	lsrs	r3, r3, #4
 8008128:	f003 0307 	and.w	r3, r3, #7
 800812c:	4904      	ldr	r1, [pc, #16]	@ (8008140 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800812e:	5ccb      	ldrb	r3, [r1, r3]
 8008130:	f003 031f 	and.w	r3, r3, #31
 8008134:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008138:	4618      	mov	r0, r3
 800813a:	bd80      	pop	{r7, pc}
 800813c:	58024400 	.word	0x58024400
 8008140:	0800d2c4 	.word	0x0800d2c4

08008144 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008144:	b480      	push	{r7}
 8008146:	b089      	sub	sp, #36	@ 0x24
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800814c:	4ba1      	ldr	r3, [pc, #644]	@ (80083d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800814e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008150:	f003 0303 	and.w	r3, r3, #3
 8008154:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008156:	4b9f      	ldr	r3, [pc, #636]	@ (80083d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815a:	0b1b      	lsrs	r3, r3, #12
 800815c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008160:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008162:	4b9c      	ldr	r3, [pc, #624]	@ (80083d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008166:	091b      	lsrs	r3, r3, #4
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800816e:	4b99      	ldr	r3, [pc, #612]	@ (80083d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008172:	08db      	lsrs	r3, r3, #3
 8008174:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	fb02 f303 	mul.w	r3, r2, r3
 800817e:	ee07 3a90 	vmov	s15, r3
 8008182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008186:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 8111 	beq.w	80083b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	2b02      	cmp	r3, #2
 8008196:	f000 8083 	beq.w	80082a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	2b02      	cmp	r3, #2
 800819e:	f200 80a1 	bhi.w	80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d003      	beq.n	80081b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d056      	beq.n	800825c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80081ae:	e099      	b.n	80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081b0:	4b88      	ldr	r3, [pc, #544]	@ (80083d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0320 	and.w	r3, r3, #32
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d02d      	beq.n	8008218 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081bc:	4b85      	ldr	r3, [pc, #532]	@ (80083d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	08db      	lsrs	r3, r3, #3
 80081c2:	f003 0303 	and.w	r3, r3, #3
 80081c6:	4a84      	ldr	r2, [pc, #528]	@ (80083d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80081c8:	fa22 f303 	lsr.w	r3, r2, r3
 80081cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	ee07 3a90 	vmov	s15, r3
 80081d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	ee07 3a90 	vmov	s15, r3
 80081de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081e6:	4b7b      	ldr	r3, [pc, #492]	@ (80083d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ee:	ee07 3a90 	vmov	s15, r3
 80081f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80081fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800820a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800820e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008212:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008216:	e087      	b.n	8008328 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	ee07 3a90 	vmov	s15, r3
 800821e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008222:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80083e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800822a:	4b6a      	ldr	r3, [pc, #424]	@ (80083d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800822c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800822e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008232:	ee07 3a90 	vmov	s15, r3
 8008236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800823a:	ed97 6a03 	vldr	s12, [r7, #12]
 800823e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800824a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800824e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800825a:	e065      	b.n	8008328 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	ee07 3a90 	vmov	s15, r3
 8008262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008266:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80083e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800826a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800826e:	4b59      	ldr	r3, [pc, #356]	@ (80083d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008276:	ee07 3a90 	vmov	s15, r3
 800827a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800827e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008282:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800828a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800828e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800829a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800829e:	e043      	b.n	8008328 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	ee07 3a90 	vmov	s15, r3
 80082a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80083e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80082ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082b2:	4b48      	ldr	r3, [pc, #288]	@ (80083d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ba:	ee07 3a90 	vmov	s15, r3
 80082be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80082c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082e2:	e021      	b.n	8008328 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	ee07 3a90 	vmov	s15, r3
 80082ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80083e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082f6:	4b37      	ldr	r3, [pc, #220]	@ (80083d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082fe:	ee07 3a90 	vmov	s15, r3
 8008302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008306:	ed97 6a03 	vldr	s12, [r7, #12]
 800830a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800830e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800831a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800831e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008326:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008328:	4b2a      	ldr	r3, [pc, #168]	@ (80083d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800832a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832c:	0a5b      	lsrs	r3, r3, #9
 800832e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008332:	ee07 3a90 	vmov	s15, r3
 8008336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800833e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008342:	edd7 6a07 	vldr	s13, [r7, #28]
 8008346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800834a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800834e:	ee17 2a90 	vmov	r2, s15
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008356:	4b1f      	ldr	r3, [pc, #124]	@ (80083d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800835a:	0c1b      	lsrs	r3, r3, #16
 800835c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008360:	ee07 3a90 	vmov	s15, r3
 8008364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008368:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800836c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008370:	edd7 6a07 	vldr	s13, [r7, #28]
 8008374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800837c:	ee17 2a90 	vmov	r2, s15
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008384:	4b13      	ldr	r3, [pc, #76]	@ (80083d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008388:	0e1b      	lsrs	r3, r3, #24
 800838a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800838e:	ee07 3a90 	vmov	s15, r3
 8008392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008396:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800839a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800839e:	edd7 6a07 	vldr	s13, [r7, #28]
 80083a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083aa:	ee17 2a90 	vmov	r2, s15
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80083b2:	e008      	b.n	80083c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	609a      	str	r2, [r3, #8]
}
 80083c6:	bf00      	nop
 80083c8:	3724      	adds	r7, #36	@ 0x24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	58024400 	.word	0x58024400
 80083d8:	03d09000 	.word	0x03d09000
 80083dc:	46000000 	.word	0x46000000
 80083e0:	4c742400 	.word	0x4c742400
 80083e4:	4a742400 	.word	0x4a742400
 80083e8:	4bbebc20 	.word	0x4bbebc20

080083ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b089      	sub	sp, #36	@ 0x24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083f4:	4ba1      	ldr	r3, [pc, #644]	@ (800867c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f8:	f003 0303 	and.w	r3, r3, #3
 80083fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80083fe:	4b9f      	ldr	r3, [pc, #636]	@ (800867c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008402:	0d1b      	lsrs	r3, r3, #20
 8008404:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008408:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800840a:	4b9c      	ldr	r3, [pc, #624]	@ (800867c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800840c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840e:	0a1b      	lsrs	r3, r3, #8
 8008410:	f003 0301 	and.w	r3, r3, #1
 8008414:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008416:	4b99      	ldr	r3, [pc, #612]	@ (800867c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800841a:	08db      	lsrs	r3, r3, #3
 800841c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	fb02 f303 	mul.w	r3, r2, r3
 8008426:	ee07 3a90 	vmov	s15, r3
 800842a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800842e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	2b00      	cmp	r3, #0
 8008436:	f000 8111 	beq.w	800865c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	2b02      	cmp	r3, #2
 800843e:	f000 8083 	beq.w	8008548 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	2b02      	cmp	r3, #2
 8008446:	f200 80a1 	bhi.w	800858c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d003      	beq.n	8008458 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d056      	beq.n	8008504 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008456:	e099      	b.n	800858c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008458:	4b88      	ldr	r3, [pc, #544]	@ (800867c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0320 	and.w	r3, r3, #32
 8008460:	2b00      	cmp	r3, #0
 8008462:	d02d      	beq.n	80084c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008464:	4b85      	ldr	r3, [pc, #532]	@ (800867c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	08db      	lsrs	r3, r3, #3
 800846a:	f003 0303 	and.w	r3, r3, #3
 800846e:	4a84      	ldr	r2, [pc, #528]	@ (8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008470:	fa22 f303 	lsr.w	r3, r2, r3
 8008474:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	ee07 3a90 	vmov	s15, r3
 800847c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	ee07 3a90 	vmov	s15, r3
 8008486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800848e:	4b7b      	ldr	r3, [pc, #492]	@ (800867c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008496:	ee07 3a90 	vmov	s15, r3
 800849a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800849e:	ed97 6a03 	vldr	s12, [r7, #12]
 80084a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008684 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80084be:	e087      	b.n	80085d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	ee07 3a90 	vmov	s15, r3
 80084c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008688 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80084ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084d2:	4b6a      	ldr	r3, [pc, #424]	@ (800867c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084da:	ee07 3a90 	vmov	s15, r3
 80084de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80084e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008684 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008502:	e065      	b.n	80085d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	ee07 3a90 	vmov	s15, r3
 800850a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800868c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008516:	4b59      	ldr	r3, [pc, #356]	@ (800867c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800851a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800851e:	ee07 3a90 	vmov	s15, r3
 8008522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008526:	ed97 6a03 	vldr	s12, [r7, #12]
 800852a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008684 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800852e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800853a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800853e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008546:	e043      	b.n	80085d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	ee07 3a90 	vmov	s15, r3
 800854e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008552:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800855a:	4b48      	ldr	r3, [pc, #288]	@ (800867c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800855c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008562:	ee07 3a90 	vmov	s15, r3
 8008566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800856a:	ed97 6a03 	vldr	s12, [r7, #12]
 800856e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008684 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800857a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800857e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800858a:	e021      	b.n	80085d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	ee07 3a90 	vmov	s15, r3
 8008592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008596:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800868c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800859a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800859e:	4b37      	ldr	r3, [pc, #220]	@ (800867c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085a6:	ee07 3a90 	vmov	s15, r3
 80085aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80085b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008684 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80085d0:	4b2a      	ldr	r3, [pc, #168]	@ (800867c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085d4:	0a5b      	lsrs	r3, r3, #9
 80085d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085da:	ee07 3a90 	vmov	s15, r3
 80085de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80085ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085f6:	ee17 2a90 	vmov	r2, s15
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80085fe:	4b1f      	ldr	r3, [pc, #124]	@ (800867c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008602:	0c1b      	lsrs	r3, r3, #16
 8008604:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008608:	ee07 3a90 	vmov	s15, r3
 800860c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008610:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008614:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008618:	edd7 6a07 	vldr	s13, [r7, #28]
 800861c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008624:	ee17 2a90 	vmov	r2, s15
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800862c:	4b13      	ldr	r3, [pc, #76]	@ (800867c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800862e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008630:	0e1b      	lsrs	r3, r3, #24
 8008632:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008636:	ee07 3a90 	vmov	s15, r3
 800863a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800863e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008642:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008646:	edd7 6a07 	vldr	s13, [r7, #28]
 800864a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800864e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008652:	ee17 2a90 	vmov	r2, s15
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800865a:	e008      	b.n	800866e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	609a      	str	r2, [r3, #8]
}
 800866e:	bf00      	nop
 8008670:	3724      	adds	r7, #36	@ 0x24
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	58024400 	.word	0x58024400
 8008680:	03d09000 	.word	0x03d09000
 8008684:	46000000 	.word	0x46000000
 8008688:	4c742400 	.word	0x4c742400
 800868c:	4a742400 	.word	0x4a742400
 8008690:	4bbebc20 	.word	0x4bbebc20

08008694 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80086a2:	4b53      	ldr	r3, [pc, #332]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 80086a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086a6:	f003 0303 	and.w	r3, r3, #3
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d101      	bne.n	80086b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e099      	b.n	80087e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80086b2:	4b4f      	ldr	r3, [pc, #316]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a4e      	ldr	r2, [pc, #312]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 80086b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80086bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086be:	f7fb fe1f 	bl	8004300 <HAL_GetTick>
 80086c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80086c4:	e008      	b.n	80086d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80086c6:	f7fb fe1b 	bl	8004300 <HAL_GetTick>
 80086ca:	4602      	mov	r2, r0
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d901      	bls.n	80086d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e086      	b.n	80087e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80086d8:	4b45      	ldr	r3, [pc, #276]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1f0      	bne.n	80086c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80086e4:	4b42      	ldr	r3, [pc, #264]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 80086e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	031b      	lsls	r3, r3, #12
 80086f2:	493f      	ldr	r1, [pc, #252]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 80086f4:	4313      	orrs	r3, r2
 80086f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	3b01      	subs	r3, #1
 80086fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	3b01      	subs	r3, #1
 8008708:	025b      	lsls	r3, r3, #9
 800870a:	b29b      	uxth	r3, r3
 800870c:	431a      	orrs	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	3b01      	subs	r3, #1
 8008714:	041b      	lsls	r3, r3, #16
 8008716:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800871a:	431a      	orrs	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	3b01      	subs	r3, #1
 8008722:	061b      	lsls	r3, r3, #24
 8008724:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008728:	4931      	ldr	r1, [pc, #196]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 800872a:	4313      	orrs	r3, r2
 800872c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800872e:	4b30      	ldr	r3, [pc, #192]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 8008730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008732:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	492d      	ldr	r1, [pc, #180]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 800873c:	4313      	orrs	r3, r2
 800873e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008740:	4b2b      	ldr	r3, [pc, #172]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 8008742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008744:	f023 0220 	bic.w	r2, r3, #32
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	4928      	ldr	r1, [pc, #160]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 800874e:	4313      	orrs	r3, r2
 8008750:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008752:	4b27      	ldr	r3, [pc, #156]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 8008754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008756:	4a26      	ldr	r2, [pc, #152]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 8008758:	f023 0310 	bic.w	r3, r3, #16
 800875c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800875e:	4b24      	ldr	r3, [pc, #144]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 8008760:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008762:	4b24      	ldr	r3, [pc, #144]	@ (80087f4 <RCCEx_PLL2_Config+0x160>)
 8008764:	4013      	ands	r3, r2
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	69d2      	ldr	r2, [r2, #28]
 800876a:	00d2      	lsls	r2, r2, #3
 800876c:	4920      	ldr	r1, [pc, #128]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 800876e:	4313      	orrs	r3, r2
 8008770:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008772:	4b1f      	ldr	r3, [pc, #124]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 8008774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008776:	4a1e      	ldr	r2, [pc, #120]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 8008778:	f043 0310 	orr.w	r3, r3, #16
 800877c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d106      	bne.n	8008792 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008784:	4b1a      	ldr	r3, [pc, #104]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 8008786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008788:	4a19      	ldr	r2, [pc, #100]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 800878a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800878e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008790:	e00f      	b.n	80087b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d106      	bne.n	80087a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008798:	4b15      	ldr	r3, [pc, #84]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 800879a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879c:	4a14      	ldr	r2, [pc, #80]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 800879e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80087a4:	e005      	b.n	80087b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80087a6:	4b12      	ldr	r3, [pc, #72]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 80087a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087aa:	4a11      	ldr	r2, [pc, #68]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 80087ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80087b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80087b2:	4b0f      	ldr	r3, [pc, #60]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a0e      	ldr	r2, [pc, #56]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 80087b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80087bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087be:	f7fb fd9f 	bl	8004300 <HAL_GetTick>
 80087c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80087c4:	e008      	b.n	80087d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80087c6:	f7fb fd9b 	bl	8004300 <HAL_GetTick>
 80087ca:	4602      	mov	r2, r0
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d901      	bls.n	80087d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80087d4:	2303      	movs	r3, #3
 80087d6:	e006      	b.n	80087e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80087d8:	4b05      	ldr	r3, [pc, #20]	@ (80087f0 <RCCEx_PLL2_Config+0x15c>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d0f0      	beq.n	80087c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	58024400 	.word	0x58024400
 80087f4:	ffff0007 	.word	0xffff0007

080087f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008806:	4b53      	ldr	r3, [pc, #332]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 8008808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800880a:	f003 0303 	and.w	r3, r3, #3
 800880e:	2b03      	cmp	r3, #3
 8008810:	d101      	bne.n	8008816 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e099      	b.n	800894a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008816:	4b4f      	ldr	r3, [pc, #316]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a4e      	ldr	r2, [pc, #312]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 800881c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008822:	f7fb fd6d 	bl	8004300 <HAL_GetTick>
 8008826:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008828:	e008      	b.n	800883c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800882a:	f7fb fd69 	bl	8004300 <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	2b02      	cmp	r3, #2
 8008836:	d901      	bls.n	800883c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e086      	b.n	800894a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800883c:	4b45      	ldr	r3, [pc, #276]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1f0      	bne.n	800882a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008848:	4b42      	ldr	r3, [pc, #264]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 800884a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800884c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	051b      	lsls	r3, r3, #20
 8008856:	493f      	ldr	r1, [pc, #252]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 8008858:	4313      	orrs	r3, r2
 800885a:	628b      	str	r3, [r1, #40]	@ 0x28
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	3b01      	subs	r3, #1
 8008862:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	3b01      	subs	r3, #1
 800886c:	025b      	lsls	r3, r3, #9
 800886e:	b29b      	uxth	r3, r3
 8008870:	431a      	orrs	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	3b01      	subs	r3, #1
 8008878:	041b      	lsls	r3, r3, #16
 800887a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800887e:	431a      	orrs	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	3b01      	subs	r3, #1
 8008886:	061b      	lsls	r3, r3, #24
 8008888:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800888c:	4931      	ldr	r1, [pc, #196]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 800888e:	4313      	orrs	r3, r2
 8008890:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008892:	4b30      	ldr	r3, [pc, #192]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 8008894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008896:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	492d      	ldr	r1, [pc, #180]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 80088a0:	4313      	orrs	r3, r2
 80088a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80088a4:	4b2b      	ldr	r3, [pc, #172]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 80088a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	4928      	ldr	r1, [pc, #160]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 80088b2:	4313      	orrs	r3, r2
 80088b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80088b6:	4b27      	ldr	r3, [pc, #156]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 80088b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ba:	4a26      	ldr	r2, [pc, #152]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 80088bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80088c2:	4b24      	ldr	r3, [pc, #144]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 80088c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088c6:	4b24      	ldr	r3, [pc, #144]	@ (8008958 <RCCEx_PLL3_Config+0x160>)
 80088c8:	4013      	ands	r3, r2
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	69d2      	ldr	r2, [r2, #28]
 80088ce:	00d2      	lsls	r2, r2, #3
 80088d0:	4920      	ldr	r1, [pc, #128]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 80088d2:	4313      	orrs	r3, r2
 80088d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80088d6:	4b1f      	ldr	r3, [pc, #124]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 80088d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088da:	4a1e      	ldr	r2, [pc, #120]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 80088dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d106      	bne.n	80088f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80088e8:	4b1a      	ldr	r3, [pc, #104]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 80088ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ec:	4a19      	ldr	r2, [pc, #100]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 80088ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80088f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80088f4:	e00f      	b.n	8008916 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d106      	bne.n	800890a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80088fc:	4b15      	ldr	r3, [pc, #84]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 80088fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008900:	4a14      	ldr	r2, [pc, #80]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 8008902:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008906:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008908:	e005      	b.n	8008916 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800890a:	4b12      	ldr	r3, [pc, #72]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 800890c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890e:	4a11      	ldr	r2, [pc, #68]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 8008910:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008914:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008916:	4b0f      	ldr	r3, [pc, #60]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a0e      	ldr	r2, [pc, #56]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 800891c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008922:	f7fb fced 	bl	8004300 <HAL_GetTick>
 8008926:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008928:	e008      	b.n	800893c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800892a:	f7fb fce9 	bl	8004300 <HAL_GetTick>
 800892e:	4602      	mov	r2, r0
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	2b02      	cmp	r3, #2
 8008936:	d901      	bls.n	800893c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e006      	b.n	800894a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800893c:	4b05      	ldr	r3, [pc, #20]	@ (8008954 <RCCEx_PLL3_Config+0x15c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d0f0      	beq.n	800892a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008948:	7bfb      	ldrb	r3, [r7, #15]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	58024400 	.word	0x58024400
 8008958:	ffff0007 	.word	0xffff0007

0800895c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e042      	b.n	80089f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008974:	2b00      	cmp	r3, #0
 8008976:	d106      	bne.n	8008986 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7f8 fcd1 	bl	8001328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2224      	movs	r2, #36	@ 0x24
 800898a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f022 0201 	bic.w	r2, r2, #1
 800899c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d002      	beq.n	80089ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fe1e 	bl	80095e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f8b3 	bl	8008b18 <UART_SetConfig>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d101      	bne.n	80089bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e01b      	b.n	80089f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	689a      	ldr	r2, [r3, #8]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f042 0201 	orr.w	r2, r2, #1
 80089ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fe9d 	bl	800972c <UART_CheckIdleState>
 80089f2:	4603      	mov	r3, r0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b08a      	sub	sp, #40	@ 0x28
 8008a00:	af02      	add	r7, sp, #8
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	603b      	str	r3, [r7, #0]
 8008a08:	4613      	mov	r3, r2
 8008a0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a12:	2b20      	cmp	r3, #32
 8008a14:	d17b      	bne.n	8008b0e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <HAL_UART_Transmit+0x26>
 8008a1c:	88fb      	ldrh	r3, [r7, #6]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d101      	bne.n	8008a26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e074      	b.n	8008b10 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2221      	movs	r2, #33	@ 0x21
 8008a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a36:	f7fb fc63 	bl	8004300 <HAL_GetTick>
 8008a3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	88fa      	ldrh	r2, [r7, #6]
 8008a40:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	88fa      	ldrh	r2, [r7, #6]
 8008a48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a54:	d108      	bne.n	8008a68 <HAL_UART_Transmit+0x6c>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d104      	bne.n	8008a68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	61bb      	str	r3, [r7, #24]
 8008a66:	e003      	b.n	8008a70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a70:	e030      	b.n	8008ad4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	2180      	movs	r1, #128	@ 0x80
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f000 feff 	bl	8009880 <UART_WaitOnFlagUntilTimeout>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d005      	beq.n	8008a94 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	e03d      	b.n	8008b10 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10b      	bne.n	8008ab2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008aa8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	3302      	adds	r3, #2
 8008aae:	61bb      	str	r3, [r7, #24]
 8008ab0:	e007      	b.n	8008ac2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	781a      	ldrb	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	3b01      	subs	r3, #1
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1c8      	bne.n	8008a72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	2140      	movs	r1, #64	@ 0x40
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f000 fec8 	bl	8009880 <UART_WaitOnFlagUntilTimeout>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d005      	beq.n	8008b02 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2220      	movs	r2, #32
 8008afa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e006      	b.n	8008b10 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2220      	movs	r2, #32
 8008b06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	e000      	b.n	8008b10 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008b0e:	2302      	movs	r3, #2
  }
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3720      	adds	r7, #32
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b1c:	b092      	sub	sp, #72	@ 0x48
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	689a      	ldr	r2, [r3, #8]
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	431a      	orrs	r2, r3
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	431a      	orrs	r2, r3
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	4bbe      	ldr	r3, [pc, #760]	@ (8008e40 <UART_SetConfig+0x328>)
 8008b48:	4013      	ands	r3, r2
 8008b4a:	697a      	ldr	r2, [r7, #20]
 8008b4c:	6812      	ldr	r2, [r2, #0]
 8008b4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008b50:	430b      	orrs	r3, r1
 8008b52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	68da      	ldr	r2, [r3, #12]
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	430a      	orrs	r2, r1
 8008b68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	699b      	ldr	r3, [r3, #24]
 8008b6e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4ab3      	ldr	r2, [pc, #716]	@ (8008e44 <UART_SetConfig+0x32c>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d004      	beq.n	8008b84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b80:	4313      	orrs	r3, r2
 8008b82:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	689a      	ldr	r2, [r3, #8]
 8008b8a:	4baf      	ldr	r3, [pc, #700]	@ (8008e48 <UART_SetConfig+0x330>)
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	6812      	ldr	r2, [r2, #0]
 8008b92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008b94:	430b      	orrs	r3, r1
 8008b96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b9e:	f023 010f 	bic.w	r1, r3, #15
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	430a      	orrs	r2, r1
 8008bac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4aa6      	ldr	r2, [pc, #664]	@ (8008e4c <UART_SetConfig+0x334>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d177      	bne.n	8008ca8 <UART_SetConfig+0x190>
 8008bb8:	4ba5      	ldr	r3, [pc, #660]	@ (8008e50 <UART_SetConfig+0x338>)
 8008bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008bc0:	2b28      	cmp	r3, #40	@ 0x28
 8008bc2:	d86d      	bhi.n	8008ca0 <UART_SetConfig+0x188>
 8008bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8008bcc <UART_SetConfig+0xb4>)
 8008bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bca:	bf00      	nop
 8008bcc:	08008c71 	.word	0x08008c71
 8008bd0:	08008ca1 	.word	0x08008ca1
 8008bd4:	08008ca1 	.word	0x08008ca1
 8008bd8:	08008ca1 	.word	0x08008ca1
 8008bdc:	08008ca1 	.word	0x08008ca1
 8008be0:	08008ca1 	.word	0x08008ca1
 8008be4:	08008ca1 	.word	0x08008ca1
 8008be8:	08008ca1 	.word	0x08008ca1
 8008bec:	08008c79 	.word	0x08008c79
 8008bf0:	08008ca1 	.word	0x08008ca1
 8008bf4:	08008ca1 	.word	0x08008ca1
 8008bf8:	08008ca1 	.word	0x08008ca1
 8008bfc:	08008ca1 	.word	0x08008ca1
 8008c00:	08008ca1 	.word	0x08008ca1
 8008c04:	08008ca1 	.word	0x08008ca1
 8008c08:	08008ca1 	.word	0x08008ca1
 8008c0c:	08008c81 	.word	0x08008c81
 8008c10:	08008ca1 	.word	0x08008ca1
 8008c14:	08008ca1 	.word	0x08008ca1
 8008c18:	08008ca1 	.word	0x08008ca1
 8008c1c:	08008ca1 	.word	0x08008ca1
 8008c20:	08008ca1 	.word	0x08008ca1
 8008c24:	08008ca1 	.word	0x08008ca1
 8008c28:	08008ca1 	.word	0x08008ca1
 8008c2c:	08008c89 	.word	0x08008c89
 8008c30:	08008ca1 	.word	0x08008ca1
 8008c34:	08008ca1 	.word	0x08008ca1
 8008c38:	08008ca1 	.word	0x08008ca1
 8008c3c:	08008ca1 	.word	0x08008ca1
 8008c40:	08008ca1 	.word	0x08008ca1
 8008c44:	08008ca1 	.word	0x08008ca1
 8008c48:	08008ca1 	.word	0x08008ca1
 8008c4c:	08008c91 	.word	0x08008c91
 8008c50:	08008ca1 	.word	0x08008ca1
 8008c54:	08008ca1 	.word	0x08008ca1
 8008c58:	08008ca1 	.word	0x08008ca1
 8008c5c:	08008ca1 	.word	0x08008ca1
 8008c60:	08008ca1 	.word	0x08008ca1
 8008c64:	08008ca1 	.word	0x08008ca1
 8008c68:	08008ca1 	.word	0x08008ca1
 8008c6c:	08008c99 	.word	0x08008c99
 8008c70:	2301      	movs	r3, #1
 8008c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c76:	e222      	b.n	80090be <UART_SetConfig+0x5a6>
 8008c78:	2304      	movs	r3, #4
 8008c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7e:	e21e      	b.n	80090be <UART_SetConfig+0x5a6>
 8008c80:	2308      	movs	r3, #8
 8008c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c86:	e21a      	b.n	80090be <UART_SetConfig+0x5a6>
 8008c88:	2310      	movs	r3, #16
 8008c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8e:	e216      	b.n	80090be <UART_SetConfig+0x5a6>
 8008c90:	2320      	movs	r3, #32
 8008c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c96:	e212      	b.n	80090be <UART_SetConfig+0x5a6>
 8008c98:	2340      	movs	r3, #64	@ 0x40
 8008c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c9e:	e20e      	b.n	80090be <UART_SetConfig+0x5a6>
 8008ca0:	2380      	movs	r3, #128	@ 0x80
 8008ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca6:	e20a      	b.n	80090be <UART_SetConfig+0x5a6>
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a69      	ldr	r2, [pc, #420]	@ (8008e54 <UART_SetConfig+0x33c>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d130      	bne.n	8008d14 <UART_SetConfig+0x1fc>
 8008cb2:	4b67      	ldr	r3, [pc, #412]	@ (8008e50 <UART_SetConfig+0x338>)
 8008cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cb6:	f003 0307 	and.w	r3, r3, #7
 8008cba:	2b05      	cmp	r3, #5
 8008cbc:	d826      	bhi.n	8008d0c <UART_SetConfig+0x1f4>
 8008cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8008cc4 <UART_SetConfig+0x1ac>)
 8008cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc4:	08008cdd 	.word	0x08008cdd
 8008cc8:	08008ce5 	.word	0x08008ce5
 8008ccc:	08008ced 	.word	0x08008ced
 8008cd0:	08008cf5 	.word	0x08008cf5
 8008cd4:	08008cfd 	.word	0x08008cfd
 8008cd8:	08008d05 	.word	0x08008d05
 8008cdc:	2300      	movs	r3, #0
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce2:	e1ec      	b.n	80090be <UART_SetConfig+0x5a6>
 8008ce4:	2304      	movs	r3, #4
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cea:	e1e8      	b.n	80090be <UART_SetConfig+0x5a6>
 8008cec:	2308      	movs	r3, #8
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf2:	e1e4      	b.n	80090be <UART_SetConfig+0x5a6>
 8008cf4:	2310      	movs	r3, #16
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfa:	e1e0      	b.n	80090be <UART_SetConfig+0x5a6>
 8008cfc:	2320      	movs	r3, #32
 8008cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d02:	e1dc      	b.n	80090be <UART_SetConfig+0x5a6>
 8008d04:	2340      	movs	r3, #64	@ 0x40
 8008d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d0a:	e1d8      	b.n	80090be <UART_SetConfig+0x5a6>
 8008d0c:	2380      	movs	r3, #128	@ 0x80
 8008d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d12:	e1d4      	b.n	80090be <UART_SetConfig+0x5a6>
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a4f      	ldr	r2, [pc, #316]	@ (8008e58 <UART_SetConfig+0x340>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d130      	bne.n	8008d80 <UART_SetConfig+0x268>
 8008d1e:	4b4c      	ldr	r3, [pc, #304]	@ (8008e50 <UART_SetConfig+0x338>)
 8008d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d22:	f003 0307 	and.w	r3, r3, #7
 8008d26:	2b05      	cmp	r3, #5
 8008d28:	d826      	bhi.n	8008d78 <UART_SetConfig+0x260>
 8008d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d30 <UART_SetConfig+0x218>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008d49 	.word	0x08008d49
 8008d34:	08008d51 	.word	0x08008d51
 8008d38:	08008d59 	.word	0x08008d59
 8008d3c:	08008d61 	.word	0x08008d61
 8008d40:	08008d69 	.word	0x08008d69
 8008d44:	08008d71 	.word	0x08008d71
 8008d48:	2300      	movs	r3, #0
 8008d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d4e:	e1b6      	b.n	80090be <UART_SetConfig+0x5a6>
 8008d50:	2304      	movs	r3, #4
 8008d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d56:	e1b2      	b.n	80090be <UART_SetConfig+0x5a6>
 8008d58:	2308      	movs	r3, #8
 8008d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d5e:	e1ae      	b.n	80090be <UART_SetConfig+0x5a6>
 8008d60:	2310      	movs	r3, #16
 8008d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d66:	e1aa      	b.n	80090be <UART_SetConfig+0x5a6>
 8008d68:	2320      	movs	r3, #32
 8008d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d6e:	e1a6      	b.n	80090be <UART_SetConfig+0x5a6>
 8008d70:	2340      	movs	r3, #64	@ 0x40
 8008d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d76:	e1a2      	b.n	80090be <UART_SetConfig+0x5a6>
 8008d78:	2380      	movs	r3, #128	@ 0x80
 8008d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d7e:	e19e      	b.n	80090be <UART_SetConfig+0x5a6>
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a35      	ldr	r2, [pc, #212]	@ (8008e5c <UART_SetConfig+0x344>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d130      	bne.n	8008dec <UART_SetConfig+0x2d4>
 8008d8a:	4b31      	ldr	r3, [pc, #196]	@ (8008e50 <UART_SetConfig+0x338>)
 8008d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d8e:	f003 0307 	and.w	r3, r3, #7
 8008d92:	2b05      	cmp	r3, #5
 8008d94:	d826      	bhi.n	8008de4 <UART_SetConfig+0x2cc>
 8008d96:	a201      	add	r2, pc, #4	@ (adr r2, 8008d9c <UART_SetConfig+0x284>)
 8008d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9c:	08008db5 	.word	0x08008db5
 8008da0:	08008dbd 	.word	0x08008dbd
 8008da4:	08008dc5 	.word	0x08008dc5
 8008da8:	08008dcd 	.word	0x08008dcd
 8008dac:	08008dd5 	.word	0x08008dd5
 8008db0:	08008ddd 	.word	0x08008ddd
 8008db4:	2300      	movs	r3, #0
 8008db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dba:	e180      	b.n	80090be <UART_SetConfig+0x5a6>
 8008dbc:	2304      	movs	r3, #4
 8008dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dc2:	e17c      	b.n	80090be <UART_SetConfig+0x5a6>
 8008dc4:	2308      	movs	r3, #8
 8008dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dca:	e178      	b.n	80090be <UART_SetConfig+0x5a6>
 8008dcc:	2310      	movs	r3, #16
 8008dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dd2:	e174      	b.n	80090be <UART_SetConfig+0x5a6>
 8008dd4:	2320      	movs	r3, #32
 8008dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dda:	e170      	b.n	80090be <UART_SetConfig+0x5a6>
 8008ddc:	2340      	movs	r3, #64	@ 0x40
 8008dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008de2:	e16c      	b.n	80090be <UART_SetConfig+0x5a6>
 8008de4:	2380      	movs	r3, #128	@ 0x80
 8008de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dea:	e168      	b.n	80090be <UART_SetConfig+0x5a6>
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a1b      	ldr	r2, [pc, #108]	@ (8008e60 <UART_SetConfig+0x348>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d142      	bne.n	8008e7c <UART_SetConfig+0x364>
 8008df6:	4b16      	ldr	r3, [pc, #88]	@ (8008e50 <UART_SetConfig+0x338>)
 8008df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dfa:	f003 0307 	and.w	r3, r3, #7
 8008dfe:	2b05      	cmp	r3, #5
 8008e00:	d838      	bhi.n	8008e74 <UART_SetConfig+0x35c>
 8008e02:	a201      	add	r2, pc, #4	@ (adr r2, 8008e08 <UART_SetConfig+0x2f0>)
 8008e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e08:	08008e21 	.word	0x08008e21
 8008e0c:	08008e29 	.word	0x08008e29
 8008e10:	08008e31 	.word	0x08008e31
 8008e14:	08008e39 	.word	0x08008e39
 8008e18:	08008e65 	.word	0x08008e65
 8008e1c:	08008e6d 	.word	0x08008e6d
 8008e20:	2300      	movs	r3, #0
 8008e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e26:	e14a      	b.n	80090be <UART_SetConfig+0x5a6>
 8008e28:	2304      	movs	r3, #4
 8008e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2e:	e146      	b.n	80090be <UART_SetConfig+0x5a6>
 8008e30:	2308      	movs	r3, #8
 8008e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e36:	e142      	b.n	80090be <UART_SetConfig+0x5a6>
 8008e38:	2310      	movs	r3, #16
 8008e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3e:	e13e      	b.n	80090be <UART_SetConfig+0x5a6>
 8008e40:	cfff69f3 	.word	0xcfff69f3
 8008e44:	58000c00 	.word	0x58000c00
 8008e48:	11fff4ff 	.word	0x11fff4ff
 8008e4c:	40011000 	.word	0x40011000
 8008e50:	58024400 	.word	0x58024400
 8008e54:	40004400 	.word	0x40004400
 8008e58:	40004800 	.word	0x40004800
 8008e5c:	40004c00 	.word	0x40004c00
 8008e60:	40005000 	.word	0x40005000
 8008e64:	2320      	movs	r3, #32
 8008e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6a:	e128      	b.n	80090be <UART_SetConfig+0x5a6>
 8008e6c:	2340      	movs	r3, #64	@ 0x40
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e72:	e124      	b.n	80090be <UART_SetConfig+0x5a6>
 8008e74:	2380      	movs	r3, #128	@ 0x80
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7a:	e120      	b.n	80090be <UART_SetConfig+0x5a6>
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4acb      	ldr	r2, [pc, #812]	@ (80091b0 <UART_SetConfig+0x698>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d176      	bne.n	8008f74 <UART_SetConfig+0x45c>
 8008e86:	4bcb      	ldr	r3, [pc, #812]	@ (80091b4 <UART_SetConfig+0x69c>)
 8008e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e8e:	2b28      	cmp	r3, #40	@ 0x28
 8008e90:	d86c      	bhi.n	8008f6c <UART_SetConfig+0x454>
 8008e92:	a201      	add	r2, pc, #4	@ (adr r2, 8008e98 <UART_SetConfig+0x380>)
 8008e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e98:	08008f3d 	.word	0x08008f3d
 8008e9c:	08008f6d 	.word	0x08008f6d
 8008ea0:	08008f6d 	.word	0x08008f6d
 8008ea4:	08008f6d 	.word	0x08008f6d
 8008ea8:	08008f6d 	.word	0x08008f6d
 8008eac:	08008f6d 	.word	0x08008f6d
 8008eb0:	08008f6d 	.word	0x08008f6d
 8008eb4:	08008f6d 	.word	0x08008f6d
 8008eb8:	08008f45 	.word	0x08008f45
 8008ebc:	08008f6d 	.word	0x08008f6d
 8008ec0:	08008f6d 	.word	0x08008f6d
 8008ec4:	08008f6d 	.word	0x08008f6d
 8008ec8:	08008f6d 	.word	0x08008f6d
 8008ecc:	08008f6d 	.word	0x08008f6d
 8008ed0:	08008f6d 	.word	0x08008f6d
 8008ed4:	08008f6d 	.word	0x08008f6d
 8008ed8:	08008f4d 	.word	0x08008f4d
 8008edc:	08008f6d 	.word	0x08008f6d
 8008ee0:	08008f6d 	.word	0x08008f6d
 8008ee4:	08008f6d 	.word	0x08008f6d
 8008ee8:	08008f6d 	.word	0x08008f6d
 8008eec:	08008f6d 	.word	0x08008f6d
 8008ef0:	08008f6d 	.word	0x08008f6d
 8008ef4:	08008f6d 	.word	0x08008f6d
 8008ef8:	08008f55 	.word	0x08008f55
 8008efc:	08008f6d 	.word	0x08008f6d
 8008f00:	08008f6d 	.word	0x08008f6d
 8008f04:	08008f6d 	.word	0x08008f6d
 8008f08:	08008f6d 	.word	0x08008f6d
 8008f0c:	08008f6d 	.word	0x08008f6d
 8008f10:	08008f6d 	.word	0x08008f6d
 8008f14:	08008f6d 	.word	0x08008f6d
 8008f18:	08008f5d 	.word	0x08008f5d
 8008f1c:	08008f6d 	.word	0x08008f6d
 8008f20:	08008f6d 	.word	0x08008f6d
 8008f24:	08008f6d 	.word	0x08008f6d
 8008f28:	08008f6d 	.word	0x08008f6d
 8008f2c:	08008f6d 	.word	0x08008f6d
 8008f30:	08008f6d 	.word	0x08008f6d
 8008f34:	08008f6d 	.word	0x08008f6d
 8008f38:	08008f65 	.word	0x08008f65
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f42:	e0bc      	b.n	80090be <UART_SetConfig+0x5a6>
 8008f44:	2304      	movs	r3, #4
 8008f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4a:	e0b8      	b.n	80090be <UART_SetConfig+0x5a6>
 8008f4c:	2308      	movs	r3, #8
 8008f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f52:	e0b4      	b.n	80090be <UART_SetConfig+0x5a6>
 8008f54:	2310      	movs	r3, #16
 8008f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f5a:	e0b0      	b.n	80090be <UART_SetConfig+0x5a6>
 8008f5c:	2320      	movs	r3, #32
 8008f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f62:	e0ac      	b.n	80090be <UART_SetConfig+0x5a6>
 8008f64:	2340      	movs	r3, #64	@ 0x40
 8008f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6a:	e0a8      	b.n	80090be <UART_SetConfig+0x5a6>
 8008f6c:	2380      	movs	r3, #128	@ 0x80
 8008f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f72:	e0a4      	b.n	80090be <UART_SetConfig+0x5a6>
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a8f      	ldr	r2, [pc, #572]	@ (80091b8 <UART_SetConfig+0x6a0>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d130      	bne.n	8008fe0 <UART_SetConfig+0x4c8>
 8008f7e:	4b8d      	ldr	r3, [pc, #564]	@ (80091b4 <UART_SetConfig+0x69c>)
 8008f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f82:	f003 0307 	and.w	r3, r3, #7
 8008f86:	2b05      	cmp	r3, #5
 8008f88:	d826      	bhi.n	8008fd8 <UART_SetConfig+0x4c0>
 8008f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f90 <UART_SetConfig+0x478>)
 8008f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f90:	08008fa9 	.word	0x08008fa9
 8008f94:	08008fb1 	.word	0x08008fb1
 8008f98:	08008fb9 	.word	0x08008fb9
 8008f9c:	08008fc1 	.word	0x08008fc1
 8008fa0:	08008fc9 	.word	0x08008fc9
 8008fa4:	08008fd1 	.word	0x08008fd1
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fae:	e086      	b.n	80090be <UART_SetConfig+0x5a6>
 8008fb0:	2304      	movs	r3, #4
 8008fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb6:	e082      	b.n	80090be <UART_SetConfig+0x5a6>
 8008fb8:	2308      	movs	r3, #8
 8008fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fbe:	e07e      	b.n	80090be <UART_SetConfig+0x5a6>
 8008fc0:	2310      	movs	r3, #16
 8008fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc6:	e07a      	b.n	80090be <UART_SetConfig+0x5a6>
 8008fc8:	2320      	movs	r3, #32
 8008fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fce:	e076      	b.n	80090be <UART_SetConfig+0x5a6>
 8008fd0:	2340      	movs	r3, #64	@ 0x40
 8008fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd6:	e072      	b.n	80090be <UART_SetConfig+0x5a6>
 8008fd8:	2380      	movs	r3, #128	@ 0x80
 8008fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fde:	e06e      	b.n	80090be <UART_SetConfig+0x5a6>
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a75      	ldr	r2, [pc, #468]	@ (80091bc <UART_SetConfig+0x6a4>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d130      	bne.n	800904c <UART_SetConfig+0x534>
 8008fea:	4b72      	ldr	r3, [pc, #456]	@ (80091b4 <UART_SetConfig+0x69c>)
 8008fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fee:	f003 0307 	and.w	r3, r3, #7
 8008ff2:	2b05      	cmp	r3, #5
 8008ff4:	d826      	bhi.n	8009044 <UART_SetConfig+0x52c>
 8008ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ffc <UART_SetConfig+0x4e4>)
 8008ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffc:	08009015 	.word	0x08009015
 8009000:	0800901d 	.word	0x0800901d
 8009004:	08009025 	.word	0x08009025
 8009008:	0800902d 	.word	0x0800902d
 800900c:	08009035 	.word	0x08009035
 8009010:	0800903d 	.word	0x0800903d
 8009014:	2300      	movs	r3, #0
 8009016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901a:	e050      	b.n	80090be <UART_SetConfig+0x5a6>
 800901c:	2304      	movs	r3, #4
 800901e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009022:	e04c      	b.n	80090be <UART_SetConfig+0x5a6>
 8009024:	2308      	movs	r3, #8
 8009026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902a:	e048      	b.n	80090be <UART_SetConfig+0x5a6>
 800902c:	2310      	movs	r3, #16
 800902e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009032:	e044      	b.n	80090be <UART_SetConfig+0x5a6>
 8009034:	2320      	movs	r3, #32
 8009036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800903a:	e040      	b.n	80090be <UART_SetConfig+0x5a6>
 800903c:	2340      	movs	r3, #64	@ 0x40
 800903e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009042:	e03c      	b.n	80090be <UART_SetConfig+0x5a6>
 8009044:	2380      	movs	r3, #128	@ 0x80
 8009046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800904a:	e038      	b.n	80090be <UART_SetConfig+0x5a6>
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a5b      	ldr	r2, [pc, #364]	@ (80091c0 <UART_SetConfig+0x6a8>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d130      	bne.n	80090b8 <UART_SetConfig+0x5a0>
 8009056:	4b57      	ldr	r3, [pc, #348]	@ (80091b4 <UART_SetConfig+0x69c>)
 8009058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800905a:	f003 0307 	and.w	r3, r3, #7
 800905e:	2b05      	cmp	r3, #5
 8009060:	d826      	bhi.n	80090b0 <UART_SetConfig+0x598>
 8009062:	a201      	add	r2, pc, #4	@ (adr r2, 8009068 <UART_SetConfig+0x550>)
 8009064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009068:	08009081 	.word	0x08009081
 800906c:	08009089 	.word	0x08009089
 8009070:	08009091 	.word	0x08009091
 8009074:	08009099 	.word	0x08009099
 8009078:	080090a1 	.word	0x080090a1
 800907c:	080090a9 	.word	0x080090a9
 8009080:	2302      	movs	r3, #2
 8009082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009086:	e01a      	b.n	80090be <UART_SetConfig+0x5a6>
 8009088:	2304      	movs	r3, #4
 800908a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800908e:	e016      	b.n	80090be <UART_SetConfig+0x5a6>
 8009090:	2308      	movs	r3, #8
 8009092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009096:	e012      	b.n	80090be <UART_SetConfig+0x5a6>
 8009098:	2310      	movs	r3, #16
 800909a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800909e:	e00e      	b.n	80090be <UART_SetConfig+0x5a6>
 80090a0:	2320      	movs	r3, #32
 80090a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090a6:	e00a      	b.n	80090be <UART_SetConfig+0x5a6>
 80090a8:	2340      	movs	r3, #64	@ 0x40
 80090aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ae:	e006      	b.n	80090be <UART_SetConfig+0x5a6>
 80090b0:	2380      	movs	r3, #128	@ 0x80
 80090b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090b6:	e002      	b.n	80090be <UART_SetConfig+0x5a6>
 80090b8:	2380      	movs	r3, #128	@ 0x80
 80090ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a3f      	ldr	r2, [pc, #252]	@ (80091c0 <UART_SetConfig+0x6a8>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	f040 80f8 	bne.w	80092ba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80090ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80090ce:	2b20      	cmp	r3, #32
 80090d0:	dc46      	bgt.n	8009160 <UART_SetConfig+0x648>
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	f2c0 8082 	blt.w	80091dc <UART_SetConfig+0x6c4>
 80090d8:	3b02      	subs	r3, #2
 80090da:	2b1e      	cmp	r3, #30
 80090dc:	d87e      	bhi.n	80091dc <UART_SetConfig+0x6c4>
 80090de:	a201      	add	r2, pc, #4	@ (adr r2, 80090e4 <UART_SetConfig+0x5cc>)
 80090e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e4:	08009167 	.word	0x08009167
 80090e8:	080091dd 	.word	0x080091dd
 80090ec:	0800916f 	.word	0x0800916f
 80090f0:	080091dd 	.word	0x080091dd
 80090f4:	080091dd 	.word	0x080091dd
 80090f8:	080091dd 	.word	0x080091dd
 80090fc:	0800917f 	.word	0x0800917f
 8009100:	080091dd 	.word	0x080091dd
 8009104:	080091dd 	.word	0x080091dd
 8009108:	080091dd 	.word	0x080091dd
 800910c:	080091dd 	.word	0x080091dd
 8009110:	080091dd 	.word	0x080091dd
 8009114:	080091dd 	.word	0x080091dd
 8009118:	080091dd 	.word	0x080091dd
 800911c:	0800918f 	.word	0x0800918f
 8009120:	080091dd 	.word	0x080091dd
 8009124:	080091dd 	.word	0x080091dd
 8009128:	080091dd 	.word	0x080091dd
 800912c:	080091dd 	.word	0x080091dd
 8009130:	080091dd 	.word	0x080091dd
 8009134:	080091dd 	.word	0x080091dd
 8009138:	080091dd 	.word	0x080091dd
 800913c:	080091dd 	.word	0x080091dd
 8009140:	080091dd 	.word	0x080091dd
 8009144:	080091dd 	.word	0x080091dd
 8009148:	080091dd 	.word	0x080091dd
 800914c:	080091dd 	.word	0x080091dd
 8009150:	080091dd 	.word	0x080091dd
 8009154:	080091dd 	.word	0x080091dd
 8009158:	080091dd 	.word	0x080091dd
 800915c:	080091cf 	.word	0x080091cf
 8009160:	2b40      	cmp	r3, #64	@ 0x40
 8009162:	d037      	beq.n	80091d4 <UART_SetConfig+0x6bc>
 8009164:	e03a      	b.n	80091dc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009166:	f7fe ffd7 	bl	8008118 <HAL_RCCEx_GetD3PCLK1Freq>
 800916a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800916c:	e03c      	b.n	80091e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800916e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe ffe6 	bl	8008144 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800917c:	e034      	b.n	80091e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800917e:	f107 0318 	add.w	r3, r7, #24
 8009182:	4618      	mov	r0, r3
 8009184:	f7ff f932 	bl	80083ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800918c:	e02c      	b.n	80091e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800918e:	4b09      	ldr	r3, [pc, #36]	@ (80091b4 <UART_SetConfig+0x69c>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0320 	and.w	r3, r3, #32
 8009196:	2b00      	cmp	r3, #0
 8009198:	d016      	beq.n	80091c8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800919a:	4b06      	ldr	r3, [pc, #24]	@ (80091b4 <UART_SetConfig+0x69c>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	08db      	lsrs	r3, r3, #3
 80091a0:	f003 0303 	and.w	r3, r3, #3
 80091a4:	4a07      	ldr	r2, [pc, #28]	@ (80091c4 <UART_SetConfig+0x6ac>)
 80091a6:	fa22 f303 	lsr.w	r3, r2, r3
 80091aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091ac:	e01c      	b.n	80091e8 <UART_SetConfig+0x6d0>
 80091ae:	bf00      	nop
 80091b0:	40011400 	.word	0x40011400
 80091b4:	58024400 	.word	0x58024400
 80091b8:	40007800 	.word	0x40007800
 80091bc:	40007c00 	.word	0x40007c00
 80091c0:	58000c00 	.word	0x58000c00
 80091c4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80091c8:	4b9d      	ldr	r3, [pc, #628]	@ (8009440 <UART_SetConfig+0x928>)
 80091ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091cc:	e00c      	b.n	80091e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091ce:	4b9d      	ldr	r3, [pc, #628]	@ (8009444 <UART_SetConfig+0x92c>)
 80091d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091d2:	e009      	b.n	80091e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091da:	e005      	b.n	80091e8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80091dc:	2300      	movs	r3, #0
 80091de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80091e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f000 81de 	beq.w	80095ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091f4:	4a94      	ldr	r2, [pc, #592]	@ (8009448 <UART_SetConfig+0x930>)
 80091f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091fa:	461a      	mov	r2, r3
 80091fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009202:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	4613      	mov	r3, r2
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	4413      	add	r3, r2
 800920e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009210:	429a      	cmp	r2, r3
 8009212:	d305      	bcc.n	8009220 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800921a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800921c:	429a      	cmp	r2, r3
 800921e:	d903      	bls.n	8009228 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009226:	e1c1      	b.n	80095ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800922a:	2200      	movs	r2, #0
 800922c:	60bb      	str	r3, [r7, #8]
 800922e:	60fa      	str	r2, [r7, #12]
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009234:	4a84      	ldr	r2, [pc, #528]	@ (8009448 <UART_SetConfig+0x930>)
 8009236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800923a:	b29b      	uxth	r3, r3
 800923c:	2200      	movs	r2, #0
 800923e:	603b      	str	r3, [r7, #0]
 8009240:	607a      	str	r2, [r7, #4]
 8009242:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009246:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800924a:	f7f7 f8a1 	bl	8000390 <__aeabi_uldivmod>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	4610      	mov	r0, r2
 8009254:	4619      	mov	r1, r3
 8009256:	f04f 0200 	mov.w	r2, #0
 800925a:	f04f 0300 	mov.w	r3, #0
 800925e:	020b      	lsls	r3, r1, #8
 8009260:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009264:	0202      	lsls	r2, r0, #8
 8009266:	6979      	ldr	r1, [r7, #20]
 8009268:	6849      	ldr	r1, [r1, #4]
 800926a:	0849      	lsrs	r1, r1, #1
 800926c:	2000      	movs	r0, #0
 800926e:	460c      	mov	r4, r1
 8009270:	4605      	mov	r5, r0
 8009272:	eb12 0804 	adds.w	r8, r2, r4
 8009276:	eb43 0905 	adc.w	r9, r3, r5
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	469a      	mov	sl, r3
 8009282:	4693      	mov	fp, r2
 8009284:	4652      	mov	r2, sl
 8009286:	465b      	mov	r3, fp
 8009288:	4640      	mov	r0, r8
 800928a:	4649      	mov	r1, r9
 800928c:	f7f7 f880 	bl	8000390 <__aeabi_uldivmod>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	4613      	mov	r3, r2
 8009296:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800929a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800929e:	d308      	bcc.n	80092b2 <UART_SetConfig+0x79a>
 80092a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092a6:	d204      	bcs.n	80092b2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092ae:	60da      	str	r2, [r3, #12]
 80092b0:	e17c      	b.n	80095ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80092b8:	e178      	b.n	80095ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092c2:	f040 80c5 	bne.w	8009450 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80092c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80092ca:	2b20      	cmp	r3, #32
 80092cc:	dc48      	bgt.n	8009360 <UART_SetConfig+0x848>
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	db7b      	blt.n	80093ca <UART_SetConfig+0x8b2>
 80092d2:	2b20      	cmp	r3, #32
 80092d4:	d879      	bhi.n	80093ca <UART_SetConfig+0x8b2>
 80092d6:	a201      	add	r2, pc, #4	@ (adr r2, 80092dc <UART_SetConfig+0x7c4>)
 80092d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092dc:	08009367 	.word	0x08009367
 80092e0:	0800936f 	.word	0x0800936f
 80092e4:	080093cb 	.word	0x080093cb
 80092e8:	080093cb 	.word	0x080093cb
 80092ec:	08009377 	.word	0x08009377
 80092f0:	080093cb 	.word	0x080093cb
 80092f4:	080093cb 	.word	0x080093cb
 80092f8:	080093cb 	.word	0x080093cb
 80092fc:	08009387 	.word	0x08009387
 8009300:	080093cb 	.word	0x080093cb
 8009304:	080093cb 	.word	0x080093cb
 8009308:	080093cb 	.word	0x080093cb
 800930c:	080093cb 	.word	0x080093cb
 8009310:	080093cb 	.word	0x080093cb
 8009314:	080093cb 	.word	0x080093cb
 8009318:	080093cb 	.word	0x080093cb
 800931c:	08009397 	.word	0x08009397
 8009320:	080093cb 	.word	0x080093cb
 8009324:	080093cb 	.word	0x080093cb
 8009328:	080093cb 	.word	0x080093cb
 800932c:	080093cb 	.word	0x080093cb
 8009330:	080093cb 	.word	0x080093cb
 8009334:	080093cb 	.word	0x080093cb
 8009338:	080093cb 	.word	0x080093cb
 800933c:	080093cb 	.word	0x080093cb
 8009340:	080093cb 	.word	0x080093cb
 8009344:	080093cb 	.word	0x080093cb
 8009348:	080093cb 	.word	0x080093cb
 800934c:	080093cb 	.word	0x080093cb
 8009350:	080093cb 	.word	0x080093cb
 8009354:	080093cb 	.word	0x080093cb
 8009358:	080093cb 	.word	0x080093cb
 800935c:	080093bd 	.word	0x080093bd
 8009360:	2b40      	cmp	r3, #64	@ 0x40
 8009362:	d02e      	beq.n	80093c2 <UART_SetConfig+0x8aa>
 8009364:	e031      	b.n	80093ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009366:	f7fd fca1 	bl	8006cac <HAL_RCC_GetPCLK1Freq>
 800936a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800936c:	e033      	b.n	80093d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800936e:	f7fd fcb3 	bl	8006cd8 <HAL_RCC_GetPCLK2Freq>
 8009372:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009374:	e02f      	b.n	80093d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800937a:	4618      	mov	r0, r3
 800937c:	f7fe fee2 	bl	8008144 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009384:	e027      	b.n	80093d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009386:	f107 0318 	add.w	r3, r7, #24
 800938a:	4618      	mov	r0, r3
 800938c:	f7ff f82e 	bl	80083ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009394:	e01f      	b.n	80093d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009396:	4b2d      	ldr	r3, [pc, #180]	@ (800944c <UART_SetConfig+0x934>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 0320 	and.w	r3, r3, #32
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d009      	beq.n	80093b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093a2:	4b2a      	ldr	r3, [pc, #168]	@ (800944c <UART_SetConfig+0x934>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	08db      	lsrs	r3, r3, #3
 80093a8:	f003 0303 	and.w	r3, r3, #3
 80093ac:	4a24      	ldr	r2, [pc, #144]	@ (8009440 <UART_SetConfig+0x928>)
 80093ae:	fa22 f303 	lsr.w	r3, r2, r3
 80093b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093b4:	e00f      	b.n	80093d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80093b6:	4b22      	ldr	r3, [pc, #136]	@ (8009440 <UART_SetConfig+0x928>)
 80093b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ba:	e00c      	b.n	80093d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093bc:	4b21      	ldr	r3, [pc, #132]	@ (8009444 <UART_SetConfig+0x92c>)
 80093be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c0:	e009      	b.n	80093d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c8:	e005      	b.n	80093d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80093ca:	2300      	movs	r3, #0
 80093cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80093d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 80e7 	beq.w	80095ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e2:	4a19      	ldr	r2, [pc, #100]	@ (8009448 <UART_SetConfig+0x930>)
 80093e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093e8:	461a      	mov	r2, r3
 80093ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80093f0:	005a      	lsls	r2, r3, #1
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	085b      	lsrs	r3, r3, #1
 80093f8:	441a      	add	r2, r3
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009402:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009406:	2b0f      	cmp	r3, #15
 8009408:	d916      	bls.n	8009438 <UART_SetConfig+0x920>
 800940a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009410:	d212      	bcs.n	8009438 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009414:	b29b      	uxth	r3, r3
 8009416:	f023 030f 	bic.w	r3, r3, #15
 800941a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800941c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941e:	085b      	lsrs	r3, r3, #1
 8009420:	b29b      	uxth	r3, r3
 8009422:	f003 0307 	and.w	r3, r3, #7
 8009426:	b29a      	uxth	r2, r3
 8009428:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800942a:	4313      	orrs	r3, r2
 800942c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009434:	60da      	str	r2, [r3, #12]
 8009436:	e0b9      	b.n	80095ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800943e:	e0b5      	b.n	80095ac <UART_SetConfig+0xa94>
 8009440:	03d09000 	.word	0x03d09000
 8009444:	003d0900 	.word	0x003d0900
 8009448:	0800d2d4 	.word	0x0800d2d4
 800944c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009450:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009454:	2b20      	cmp	r3, #32
 8009456:	dc49      	bgt.n	80094ec <UART_SetConfig+0x9d4>
 8009458:	2b00      	cmp	r3, #0
 800945a:	db7c      	blt.n	8009556 <UART_SetConfig+0xa3e>
 800945c:	2b20      	cmp	r3, #32
 800945e:	d87a      	bhi.n	8009556 <UART_SetConfig+0xa3e>
 8009460:	a201      	add	r2, pc, #4	@ (adr r2, 8009468 <UART_SetConfig+0x950>)
 8009462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009466:	bf00      	nop
 8009468:	080094f3 	.word	0x080094f3
 800946c:	080094fb 	.word	0x080094fb
 8009470:	08009557 	.word	0x08009557
 8009474:	08009557 	.word	0x08009557
 8009478:	08009503 	.word	0x08009503
 800947c:	08009557 	.word	0x08009557
 8009480:	08009557 	.word	0x08009557
 8009484:	08009557 	.word	0x08009557
 8009488:	08009513 	.word	0x08009513
 800948c:	08009557 	.word	0x08009557
 8009490:	08009557 	.word	0x08009557
 8009494:	08009557 	.word	0x08009557
 8009498:	08009557 	.word	0x08009557
 800949c:	08009557 	.word	0x08009557
 80094a0:	08009557 	.word	0x08009557
 80094a4:	08009557 	.word	0x08009557
 80094a8:	08009523 	.word	0x08009523
 80094ac:	08009557 	.word	0x08009557
 80094b0:	08009557 	.word	0x08009557
 80094b4:	08009557 	.word	0x08009557
 80094b8:	08009557 	.word	0x08009557
 80094bc:	08009557 	.word	0x08009557
 80094c0:	08009557 	.word	0x08009557
 80094c4:	08009557 	.word	0x08009557
 80094c8:	08009557 	.word	0x08009557
 80094cc:	08009557 	.word	0x08009557
 80094d0:	08009557 	.word	0x08009557
 80094d4:	08009557 	.word	0x08009557
 80094d8:	08009557 	.word	0x08009557
 80094dc:	08009557 	.word	0x08009557
 80094e0:	08009557 	.word	0x08009557
 80094e4:	08009557 	.word	0x08009557
 80094e8:	08009549 	.word	0x08009549
 80094ec:	2b40      	cmp	r3, #64	@ 0x40
 80094ee:	d02e      	beq.n	800954e <UART_SetConfig+0xa36>
 80094f0:	e031      	b.n	8009556 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094f2:	f7fd fbdb 	bl	8006cac <HAL_RCC_GetPCLK1Freq>
 80094f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80094f8:	e033      	b.n	8009562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094fa:	f7fd fbed 	bl	8006cd8 <HAL_RCC_GetPCLK2Freq>
 80094fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009500:	e02f      	b.n	8009562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009502:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009506:	4618      	mov	r0, r3
 8009508:	f7fe fe1c 	bl	8008144 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800950c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800950e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009510:	e027      	b.n	8009562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009512:	f107 0318 	add.w	r3, r7, #24
 8009516:	4618      	mov	r0, r3
 8009518:	f7fe ff68 	bl	80083ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009520:	e01f      	b.n	8009562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009522:	4b2d      	ldr	r3, [pc, #180]	@ (80095d8 <UART_SetConfig+0xac0>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 0320 	and.w	r3, r3, #32
 800952a:	2b00      	cmp	r3, #0
 800952c:	d009      	beq.n	8009542 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800952e:	4b2a      	ldr	r3, [pc, #168]	@ (80095d8 <UART_SetConfig+0xac0>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	08db      	lsrs	r3, r3, #3
 8009534:	f003 0303 	and.w	r3, r3, #3
 8009538:	4a28      	ldr	r2, [pc, #160]	@ (80095dc <UART_SetConfig+0xac4>)
 800953a:	fa22 f303 	lsr.w	r3, r2, r3
 800953e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009540:	e00f      	b.n	8009562 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009542:	4b26      	ldr	r3, [pc, #152]	@ (80095dc <UART_SetConfig+0xac4>)
 8009544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009546:	e00c      	b.n	8009562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009548:	4b25      	ldr	r3, [pc, #148]	@ (80095e0 <UART_SetConfig+0xac8>)
 800954a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800954c:	e009      	b.n	8009562 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800954e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009554:	e005      	b.n	8009562 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009556:	2300      	movs	r3, #0
 8009558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009560:	bf00      	nop
    }

    if (pclk != 0U)
 8009562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009564:	2b00      	cmp	r3, #0
 8009566:	d021      	beq.n	80095ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800956c:	4a1d      	ldr	r2, [pc, #116]	@ (80095e4 <UART_SetConfig+0xacc>)
 800956e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009572:	461a      	mov	r2, r3
 8009574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009576:	fbb3 f2f2 	udiv	r2, r3, r2
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	085b      	lsrs	r3, r3, #1
 8009580:	441a      	add	r2, r3
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	fbb2 f3f3 	udiv	r3, r2, r3
 800958a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800958c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800958e:	2b0f      	cmp	r3, #15
 8009590:	d909      	bls.n	80095a6 <UART_SetConfig+0xa8e>
 8009592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009598:	d205      	bcs.n	80095a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800959a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959c:	b29a      	uxth	r2, r3
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	60da      	str	r2, [r3, #12]
 80095a4:	e002      	b.n	80095ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	2200      	movs	r2, #0
 80095c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	2200      	movs	r2, #0
 80095c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80095c8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3748      	adds	r7, #72	@ 0x48
 80095d0:	46bd      	mov	sp, r7
 80095d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095d6:	bf00      	nop
 80095d8:	58024400 	.word	0x58024400
 80095dc:	03d09000 	.word	0x03d09000
 80095e0:	003d0900 	.word	0x003d0900
 80095e4:	0800d2d4 	.word	0x0800d2d4

080095e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095f4:	f003 0308 	and.w	r3, r3, #8
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00a      	beq.n	8009612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	430a      	orrs	r2, r1
 8009610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009616:	f003 0301 	and.w	r3, r3, #1
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00a      	beq.n	8009634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	430a      	orrs	r2, r1
 8009632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009638:	f003 0302 	and.w	r3, r3, #2
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00a      	beq.n	8009656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	430a      	orrs	r2, r1
 8009654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800965a:	f003 0304 	and.w	r3, r3, #4
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00a      	beq.n	8009678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	430a      	orrs	r2, r1
 8009676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800967c:	f003 0310 	and.w	r3, r3, #16
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00a      	beq.n	800969a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	430a      	orrs	r2, r1
 8009698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800969e:	f003 0320 	and.w	r3, r3, #32
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	430a      	orrs	r2, r1
 80096ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d01a      	beq.n	80096fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	430a      	orrs	r2, r1
 80096dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096e6:	d10a      	bne.n	80096fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	430a      	orrs	r2, r1
 80096fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00a      	beq.n	8009720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	430a      	orrs	r2, r1
 800971e:	605a      	str	r2, [r3, #4]
  }
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b098      	sub	sp, #96	@ 0x60
 8009730:	af02      	add	r7, sp, #8
 8009732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800973c:	f7fa fde0 	bl	8004300 <HAL_GetTick>
 8009740:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 0308 	and.w	r3, r3, #8
 800974c:	2b08      	cmp	r3, #8
 800974e:	d12f      	bne.n	80097b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009750:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009758:	2200      	movs	r2, #0
 800975a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f88e 	bl	8009880 <UART_WaitOnFlagUntilTimeout>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d022      	beq.n	80097b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009772:	e853 3f00 	ldrex	r3, [r3]
 8009776:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800977a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800977e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	461a      	mov	r2, r3
 8009786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009788:	647b      	str	r3, [r7, #68]	@ 0x44
 800978a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800978e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009790:	e841 2300 	strex	r3, r2, [r1]
 8009794:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1e6      	bne.n	800976a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2220      	movs	r2, #32
 80097a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097ac:	2303      	movs	r3, #3
 80097ae:	e063      	b.n	8009878 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 0304 	and.w	r3, r3, #4
 80097ba:	2b04      	cmp	r3, #4
 80097bc:	d149      	bne.n	8009852 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80097c2:	9300      	str	r3, [sp, #0]
 80097c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097c6:	2200      	movs	r2, #0
 80097c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 f857 	bl	8009880 <UART_WaitOnFlagUntilTimeout>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d03c      	beq.n	8009852 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e0:	e853 3f00 	ldrex	r3, [r3]
 80097e4:	623b      	str	r3, [r7, #32]
   return(result);
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	461a      	mov	r2, r3
 80097f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80097f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097fe:	e841 2300 	strex	r3, r2, [r1]
 8009802:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1e6      	bne.n	80097d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	3308      	adds	r3, #8
 8009810:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	e853 3f00 	ldrex	r3, [r3]
 8009818:	60fb      	str	r3, [r7, #12]
   return(result);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f023 0301 	bic.w	r3, r3, #1
 8009820:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	3308      	adds	r3, #8
 8009828:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800982a:	61fa      	str	r2, [r7, #28]
 800982c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982e:	69b9      	ldr	r1, [r7, #24]
 8009830:	69fa      	ldr	r2, [r7, #28]
 8009832:	e841 2300 	strex	r3, r2, [r1]
 8009836:	617b      	str	r3, [r7, #20]
   return(result);
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1e5      	bne.n	800980a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2220      	movs	r2, #32
 8009842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800984e:	2303      	movs	r3, #3
 8009850:	e012      	b.n	8009878 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2220      	movs	r2, #32
 8009856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2220      	movs	r2, #32
 800985e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3758      	adds	r7, #88	@ 0x58
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	603b      	str	r3, [r7, #0]
 800988c:	4613      	mov	r3, r2
 800988e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009890:	e04f      	b.n	8009932 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009898:	d04b      	beq.n	8009932 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800989a:	f7fa fd31 	bl	8004300 <HAL_GetTick>
 800989e:	4602      	mov	r2, r0
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	69ba      	ldr	r2, [r7, #24]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d302      	bcc.n	80098b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098b0:	2303      	movs	r3, #3
 80098b2:	e04e      	b.n	8009952 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d037      	beq.n	8009932 <UART_WaitOnFlagUntilTimeout+0xb2>
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	2b80      	cmp	r3, #128	@ 0x80
 80098c6:	d034      	beq.n	8009932 <UART_WaitOnFlagUntilTimeout+0xb2>
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	2b40      	cmp	r3, #64	@ 0x40
 80098cc:	d031      	beq.n	8009932 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	69db      	ldr	r3, [r3, #28]
 80098d4:	f003 0308 	and.w	r3, r3, #8
 80098d8:	2b08      	cmp	r3, #8
 80098da:	d110      	bne.n	80098fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2208      	movs	r2, #8
 80098e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f000 f839 	bl	800995c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2208      	movs	r2, #8
 80098ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e029      	b.n	8009952 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	69db      	ldr	r3, [r3, #28]
 8009904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800990c:	d111      	bne.n	8009932 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f000 f81f 	bl	800995c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2220      	movs	r2, #32
 8009922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800992e:	2303      	movs	r3, #3
 8009930:	e00f      	b.n	8009952 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	69da      	ldr	r2, [r3, #28]
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	4013      	ands	r3, r2
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	429a      	cmp	r2, r3
 8009940:	bf0c      	ite	eq
 8009942:	2301      	moveq	r3, #1
 8009944:	2300      	movne	r3, #0
 8009946:	b2db      	uxtb	r3, r3
 8009948:	461a      	mov	r2, r3
 800994a:	79fb      	ldrb	r3, [r7, #7]
 800994c:	429a      	cmp	r2, r3
 800994e:	d0a0      	beq.n	8009892 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
	...

0800995c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800995c:	b480      	push	{r7}
 800995e:	b095      	sub	sp, #84	@ 0x54
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800996c:	e853 3f00 	ldrex	r3, [r3]
 8009970:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009974:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009978:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	461a      	mov	r2, r3
 8009980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009982:	643b      	str	r3, [r7, #64]	@ 0x40
 8009984:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009986:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009988:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800998a:	e841 2300 	strex	r3, r2, [r1]
 800998e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1e6      	bne.n	8009964 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	3308      	adds	r3, #8
 800999c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999e:	6a3b      	ldr	r3, [r7, #32]
 80099a0:	e853 3f00 	ldrex	r3, [r3]
 80099a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80099a6:	69fa      	ldr	r2, [r7, #28]
 80099a8:	4b1e      	ldr	r3, [pc, #120]	@ (8009a24 <UART_EndRxTransfer+0xc8>)
 80099aa:	4013      	ands	r3, r2
 80099ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	3308      	adds	r3, #8
 80099b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099be:	e841 2300 	strex	r3, r2, [r1]
 80099c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1e5      	bne.n	8009996 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d118      	bne.n	8009a04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	e853 3f00 	ldrex	r3, [r3]
 80099de:	60bb      	str	r3, [r7, #8]
   return(result);
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	f023 0310 	bic.w	r3, r3, #16
 80099e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	461a      	mov	r2, r3
 80099ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099f0:	61bb      	str	r3, [r7, #24]
 80099f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f4:	6979      	ldr	r1, [r7, #20]
 80099f6:	69ba      	ldr	r2, [r7, #24]
 80099f8:	e841 2300 	strex	r3, r2, [r1]
 80099fc:	613b      	str	r3, [r7, #16]
   return(result);
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1e6      	bne.n	80099d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2220      	movs	r2, #32
 8009a08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009a18:	bf00      	nop
 8009a1a:	3754      	adds	r7, #84	@ 0x54
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	effffffe 	.word	0xeffffffe

08009a28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d101      	bne.n	8009a3e <HAL_UARTEx_DisableFifoMode+0x16>
 8009a3a:	2302      	movs	r3, #2
 8009a3c:	e027      	b.n	8009a8e <HAL_UARTEx_DisableFifoMode+0x66>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2224      	movs	r2, #36	@ 0x24
 8009a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f022 0201 	bic.w	r2, r2, #1
 8009a64:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009a6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2220      	movs	r2, #32
 8009a80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr

08009a9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d101      	bne.n	8009ab2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009aae:	2302      	movs	r3, #2
 8009ab0:	e02d      	b.n	8009b0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2224      	movs	r2, #36	@ 0x24
 8009abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f022 0201 	bic.w	r2, r2, #1
 8009ad8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	430a      	orrs	r2, r1
 8009aec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f850 	bl	8009b94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2220      	movs	r2, #32
 8009b00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b084      	sub	sp, #16
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d101      	bne.n	8009b2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	e02d      	b.n	8009b8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2224      	movs	r2, #36	@ 0x24
 8009b3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f022 0201 	bic.w	r2, r2, #1
 8009b54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	683a      	ldr	r2, [r7, #0]
 8009b66:	430a      	orrs	r2, r1
 8009b68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f812 	bl	8009b94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2220      	movs	r2, #32
 8009b7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
	...

08009b94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d108      	bne.n	8009bb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009bb4:	e031      	b.n	8009c1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009bb6:	2310      	movs	r3, #16
 8009bb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009bba:	2310      	movs	r3, #16
 8009bbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	0e5b      	lsrs	r3, r3, #25
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	f003 0307 	and.w	r3, r3, #7
 8009bcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	0f5b      	lsrs	r3, r3, #29
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	f003 0307 	and.w	r3, r3, #7
 8009bdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bde:	7bbb      	ldrb	r3, [r7, #14]
 8009be0:	7b3a      	ldrb	r2, [r7, #12]
 8009be2:	4911      	ldr	r1, [pc, #68]	@ (8009c28 <UARTEx_SetNbDataToProcess+0x94>)
 8009be4:	5c8a      	ldrb	r2, [r1, r2]
 8009be6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009bea:	7b3a      	ldrb	r2, [r7, #12]
 8009bec:	490f      	ldr	r1, [pc, #60]	@ (8009c2c <UARTEx_SetNbDataToProcess+0x98>)
 8009bee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bfc:	7bfb      	ldrb	r3, [r7, #15]
 8009bfe:	7b7a      	ldrb	r2, [r7, #13]
 8009c00:	4909      	ldr	r1, [pc, #36]	@ (8009c28 <UARTEx_SetNbDataToProcess+0x94>)
 8009c02:	5c8a      	ldrb	r2, [r1, r2]
 8009c04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c08:	7b7a      	ldrb	r2, [r7, #13]
 8009c0a:	4908      	ldr	r1, [pc, #32]	@ (8009c2c <UARTEx_SetNbDataToProcess+0x98>)
 8009c0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009c1a:	bf00      	nop
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	0800d2ec 	.word	0x0800d2ec
 8009c2c:	0800d2f4 	.word	0x0800d2f4

08009c30 <__cvt>:
 8009c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c32:	ed2d 8b02 	vpush	{d8}
 8009c36:	eeb0 8b40 	vmov.f64	d8, d0
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	4617      	mov	r7, r2
 8009c3e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009c40:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c42:	ee18 2a90 	vmov	r2, s17
 8009c46:	f025 0520 	bic.w	r5, r5, #32
 8009c4a:	2a00      	cmp	r2, #0
 8009c4c:	bfb6      	itet	lt
 8009c4e:	222d      	movlt	r2, #45	@ 0x2d
 8009c50:	2200      	movge	r2, #0
 8009c52:	eeb1 8b40 	vneglt.f64	d8, d0
 8009c56:	2d46      	cmp	r5, #70	@ 0x46
 8009c58:	460c      	mov	r4, r1
 8009c5a:	701a      	strb	r2, [r3, #0]
 8009c5c:	d004      	beq.n	8009c68 <__cvt+0x38>
 8009c5e:	2d45      	cmp	r5, #69	@ 0x45
 8009c60:	d100      	bne.n	8009c64 <__cvt+0x34>
 8009c62:	3401      	adds	r4, #1
 8009c64:	2102      	movs	r1, #2
 8009c66:	e000      	b.n	8009c6a <__cvt+0x3a>
 8009c68:	2103      	movs	r1, #3
 8009c6a:	ab03      	add	r3, sp, #12
 8009c6c:	9301      	str	r3, [sp, #4]
 8009c6e:	ab02      	add	r3, sp, #8
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	4622      	mov	r2, r4
 8009c74:	4633      	mov	r3, r6
 8009c76:	eeb0 0b48 	vmov.f64	d0, d8
 8009c7a:	f000 ff21 	bl	800aac0 <_dtoa_r>
 8009c7e:	2d47      	cmp	r5, #71	@ 0x47
 8009c80:	d114      	bne.n	8009cac <__cvt+0x7c>
 8009c82:	07fb      	lsls	r3, r7, #31
 8009c84:	d50a      	bpl.n	8009c9c <__cvt+0x6c>
 8009c86:	1902      	adds	r2, r0, r4
 8009c88:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c90:	bf08      	it	eq
 8009c92:	9203      	streq	r2, [sp, #12]
 8009c94:	2130      	movs	r1, #48	@ 0x30
 8009c96:	9b03      	ldr	r3, [sp, #12]
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d319      	bcc.n	8009cd0 <__cvt+0xa0>
 8009c9c:	9b03      	ldr	r3, [sp, #12]
 8009c9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ca0:	1a1b      	subs	r3, r3, r0
 8009ca2:	6013      	str	r3, [r2, #0]
 8009ca4:	b005      	add	sp, #20
 8009ca6:	ecbd 8b02 	vpop	{d8}
 8009caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cac:	2d46      	cmp	r5, #70	@ 0x46
 8009cae:	eb00 0204 	add.w	r2, r0, r4
 8009cb2:	d1e9      	bne.n	8009c88 <__cvt+0x58>
 8009cb4:	7803      	ldrb	r3, [r0, #0]
 8009cb6:	2b30      	cmp	r3, #48	@ 0x30
 8009cb8:	d107      	bne.n	8009cca <__cvt+0x9a>
 8009cba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc2:	bf1c      	itt	ne
 8009cc4:	f1c4 0401 	rsbne	r4, r4, #1
 8009cc8:	6034      	strne	r4, [r6, #0]
 8009cca:	6833      	ldr	r3, [r6, #0]
 8009ccc:	441a      	add	r2, r3
 8009cce:	e7db      	b.n	8009c88 <__cvt+0x58>
 8009cd0:	1c5c      	adds	r4, r3, #1
 8009cd2:	9403      	str	r4, [sp, #12]
 8009cd4:	7019      	strb	r1, [r3, #0]
 8009cd6:	e7de      	b.n	8009c96 <__cvt+0x66>

08009cd8 <__exponent>:
 8009cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cda:	2900      	cmp	r1, #0
 8009cdc:	bfba      	itte	lt
 8009cde:	4249      	neglt	r1, r1
 8009ce0:	232d      	movlt	r3, #45	@ 0x2d
 8009ce2:	232b      	movge	r3, #43	@ 0x2b
 8009ce4:	2909      	cmp	r1, #9
 8009ce6:	7002      	strb	r2, [r0, #0]
 8009ce8:	7043      	strb	r3, [r0, #1]
 8009cea:	dd29      	ble.n	8009d40 <__exponent+0x68>
 8009cec:	f10d 0307 	add.w	r3, sp, #7
 8009cf0:	461d      	mov	r5, r3
 8009cf2:	270a      	movs	r7, #10
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	fbb1 f6f7 	udiv	r6, r1, r7
 8009cfa:	fb07 1416 	mls	r4, r7, r6, r1
 8009cfe:	3430      	adds	r4, #48	@ 0x30
 8009d00:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009d04:	460c      	mov	r4, r1
 8009d06:	2c63      	cmp	r4, #99	@ 0x63
 8009d08:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d0c:	4631      	mov	r1, r6
 8009d0e:	dcf1      	bgt.n	8009cf4 <__exponent+0x1c>
 8009d10:	3130      	adds	r1, #48	@ 0x30
 8009d12:	1e94      	subs	r4, r2, #2
 8009d14:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009d18:	1c41      	adds	r1, r0, #1
 8009d1a:	4623      	mov	r3, r4
 8009d1c:	42ab      	cmp	r3, r5
 8009d1e:	d30a      	bcc.n	8009d36 <__exponent+0x5e>
 8009d20:	f10d 0309 	add.w	r3, sp, #9
 8009d24:	1a9b      	subs	r3, r3, r2
 8009d26:	42ac      	cmp	r4, r5
 8009d28:	bf88      	it	hi
 8009d2a:	2300      	movhi	r3, #0
 8009d2c:	3302      	adds	r3, #2
 8009d2e:	4403      	add	r3, r0
 8009d30:	1a18      	subs	r0, r3, r0
 8009d32:	b003      	add	sp, #12
 8009d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d36:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009d3a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009d3e:	e7ed      	b.n	8009d1c <__exponent+0x44>
 8009d40:	2330      	movs	r3, #48	@ 0x30
 8009d42:	3130      	adds	r1, #48	@ 0x30
 8009d44:	7083      	strb	r3, [r0, #2]
 8009d46:	70c1      	strb	r1, [r0, #3]
 8009d48:	1d03      	adds	r3, r0, #4
 8009d4a:	e7f1      	b.n	8009d30 <__exponent+0x58>
 8009d4c:	0000      	movs	r0, r0
	...

08009d50 <_printf_float>:
 8009d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d54:	b08d      	sub	sp, #52	@ 0x34
 8009d56:	460c      	mov	r4, r1
 8009d58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009d5c:	4616      	mov	r6, r2
 8009d5e:	461f      	mov	r7, r3
 8009d60:	4605      	mov	r5, r0
 8009d62:	f000 fdad 	bl	800a8c0 <_localeconv_r>
 8009d66:	f8d0 b000 	ldr.w	fp, [r0]
 8009d6a:	4658      	mov	r0, fp
 8009d6c:	f7f6 fb08 	bl	8000380 <strlen>
 8009d70:	2300      	movs	r3, #0
 8009d72:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d74:	f8d8 3000 	ldr.w	r3, [r8]
 8009d78:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009d7c:	6822      	ldr	r2, [r4, #0]
 8009d7e:	9005      	str	r0, [sp, #20]
 8009d80:	3307      	adds	r3, #7
 8009d82:	f023 0307 	bic.w	r3, r3, #7
 8009d86:	f103 0108 	add.w	r1, r3, #8
 8009d8a:	f8c8 1000 	str.w	r1, [r8]
 8009d8e:	ed93 0b00 	vldr	d0, [r3]
 8009d92:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009ff0 <_printf_float+0x2a0>
 8009d96:	eeb0 7bc0 	vabs.f64	d7, d0
 8009d9a:	eeb4 7b46 	vcmp.f64	d7, d6
 8009d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009da2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009da6:	dd24      	ble.n	8009df2 <_printf_float+0xa2>
 8009da8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db0:	d502      	bpl.n	8009db8 <_printf_float+0x68>
 8009db2:	232d      	movs	r3, #45	@ 0x2d
 8009db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009db8:	498f      	ldr	r1, [pc, #572]	@ (8009ff8 <_printf_float+0x2a8>)
 8009dba:	4b90      	ldr	r3, [pc, #576]	@ (8009ffc <_printf_float+0x2ac>)
 8009dbc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009dc0:	bf8c      	ite	hi
 8009dc2:	4688      	movhi	r8, r1
 8009dc4:	4698      	movls	r8, r3
 8009dc6:	f022 0204 	bic.w	r2, r2, #4
 8009dca:	2303      	movs	r3, #3
 8009dcc:	6123      	str	r3, [r4, #16]
 8009dce:	6022      	str	r2, [r4, #0]
 8009dd0:	f04f 0a00 	mov.w	sl, #0
 8009dd4:	9700      	str	r7, [sp, #0]
 8009dd6:	4633      	mov	r3, r6
 8009dd8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009dda:	4621      	mov	r1, r4
 8009ddc:	4628      	mov	r0, r5
 8009dde:	f000 f9d1 	bl	800a184 <_printf_common>
 8009de2:	3001      	adds	r0, #1
 8009de4:	f040 8089 	bne.w	8009efa <_printf_float+0x1aa>
 8009de8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dec:	b00d      	add	sp, #52	@ 0x34
 8009dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df2:	eeb4 0b40 	vcmp.f64	d0, d0
 8009df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dfa:	d709      	bvc.n	8009e10 <_printf_float+0xc0>
 8009dfc:	ee10 3a90 	vmov	r3, s1
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	bfbc      	itt	lt
 8009e04:	232d      	movlt	r3, #45	@ 0x2d
 8009e06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009e0a:	497d      	ldr	r1, [pc, #500]	@ (800a000 <_printf_float+0x2b0>)
 8009e0c:	4b7d      	ldr	r3, [pc, #500]	@ (800a004 <_printf_float+0x2b4>)
 8009e0e:	e7d5      	b.n	8009dbc <_printf_float+0x6c>
 8009e10:	6863      	ldr	r3, [r4, #4]
 8009e12:	1c59      	adds	r1, r3, #1
 8009e14:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8009e18:	d139      	bne.n	8009e8e <_printf_float+0x13e>
 8009e1a:	2306      	movs	r3, #6
 8009e1c:	6063      	str	r3, [r4, #4]
 8009e1e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009e22:	2300      	movs	r3, #0
 8009e24:	6022      	str	r2, [r4, #0]
 8009e26:	9303      	str	r3, [sp, #12]
 8009e28:	ab0a      	add	r3, sp, #40	@ 0x28
 8009e2a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009e2e:	ab09      	add	r3, sp, #36	@ 0x24
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	6861      	ldr	r1, [r4, #4]
 8009e34:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009e38:	4628      	mov	r0, r5
 8009e3a:	f7ff fef9 	bl	8009c30 <__cvt>
 8009e3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009e42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e44:	4680      	mov	r8, r0
 8009e46:	d129      	bne.n	8009e9c <_printf_float+0x14c>
 8009e48:	1cc8      	adds	r0, r1, #3
 8009e4a:	db02      	blt.n	8009e52 <_printf_float+0x102>
 8009e4c:	6863      	ldr	r3, [r4, #4]
 8009e4e:	4299      	cmp	r1, r3
 8009e50:	dd41      	ble.n	8009ed6 <_printf_float+0x186>
 8009e52:	f1a9 0902 	sub.w	r9, r9, #2
 8009e56:	fa5f f989 	uxtb.w	r9, r9
 8009e5a:	3901      	subs	r1, #1
 8009e5c:	464a      	mov	r2, r9
 8009e5e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009e62:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e64:	f7ff ff38 	bl	8009cd8 <__exponent>
 8009e68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e6a:	1813      	adds	r3, r2, r0
 8009e6c:	2a01      	cmp	r2, #1
 8009e6e:	4682      	mov	sl, r0
 8009e70:	6123      	str	r3, [r4, #16]
 8009e72:	dc02      	bgt.n	8009e7a <_printf_float+0x12a>
 8009e74:	6822      	ldr	r2, [r4, #0]
 8009e76:	07d2      	lsls	r2, r2, #31
 8009e78:	d501      	bpl.n	8009e7e <_printf_float+0x12e>
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	6123      	str	r3, [r4, #16]
 8009e7e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d0a6      	beq.n	8009dd4 <_printf_float+0x84>
 8009e86:	232d      	movs	r3, #45	@ 0x2d
 8009e88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e8c:	e7a2      	b.n	8009dd4 <_printf_float+0x84>
 8009e8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009e92:	d1c4      	bne.n	8009e1e <_printf_float+0xce>
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1c2      	bne.n	8009e1e <_printf_float+0xce>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e7bf      	b.n	8009e1c <_printf_float+0xcc>
 8009e9c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009ea0:	d9db      	bls.n	8009e5a <_printf_float+0x10a>
 8009ea2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8009ea6:	d118      	bne.n	8009eda <_printf_float+0x18a>
 8009ea8:	2900      	cmp	r1, #0
 8009eaa:	6863      	ldr	r3, [r4, #4]
 8009eac:	dd0b      	ble.n	8009ec6 <_printf_float+0x176>
 8009eae:	6121      	str	r1, [r4, #16]
 8009eb0:	b913      	cbnz	r3, 8009eb8 <_printf_float+0x168>
 8009eb2:	6822      	ldr	r2, [r4, #0]
 8009eb4:	07d0      	lsls	r0, r2, #31
 8009eb6:	d502      	bpl.n	8009ebe <_printf_float+0x16e>
 8009eb8:	3301      	adds	r3, #1
 8009eba:	440b      	add	r3, r1
 8009ebc:	6123      	str	r3, [r4, #16]
 8009ebe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009ec0:	f04f 0a00 	mov.w	sl, #0
 8009ec4:	e7db      	b.n	8009e7e <_printf_float+0x12e>
 8009ec6:	b913      	cbnz	r3, 8009ece <_printf_float+0x17e>
 8009ec8:	6822      	ldr	r2, [r4, #0]
 8009eca:	07d2      	lsls	r2, r2, #31
 8009ecc:	d501      	bpl.n	8009ed2 <_printf_float+0x182>
 8009ece:	3302      	adds	r3, #2
 8009ed0:	e7f4      	b.n	8009ebc <_printf_float+0x16c>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e7f2      	b.n	8009ebc <_printf_float+0x16c>
 8009ed6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8009eda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009edc:	4299      	cmp	r1, r3
 8009ede:	db05      	blt.n	8009eec <_printf_float+0x19c>
 8009ee0:	6823      	ldr	r3, [r4, #0]
 8009ee2:	6121      	str	r1, [r4, #16]
 8009ee4:	07d8      	lsls	r0, r3, #31
 8009ee6:	d5ea      	bpl.n	8009ebe <_printf_float+0x16e>
 8009ee8:	1c4b      	adds	r3, r1, #1
 8009eea:	e7e7      	b.n	8009ebc <_printf_float+0x16c>
 8009eec:	2900      	cmp	r1, #0
 8009eee:	bfd4      	ite	le
 8009ef0:	f1c1 0202 	rsble	r2, r1, #2
 8009ef4:	2201      	movgt	r2, #1
 8009ef6:	4413      	add	r3, r2
 8009ef8:	e7e0      	b.n	8009ebc <_printf_float+0x16c>
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	055a      	lsls	r2, r3, #21
 8009efe:	d407      	bmi.n	8009f10 <_printf_float+0x1c0>
 8009f00:	6923      	ldr	r3, [r4, #16]
 8009f02:	4642      	mov	r2, r8
 8009f04:	4631      	mov	r1, r6
 8009f06:	4628      	mov	r0, r5
 8009f08:	47b8      	blx	r7
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	d12a      	bne.n	8009f64 <_printf_float+0x214>
 8009f0e:	e76b      	b.n	8009de8 <_printf_float+0x98>
 8009f10:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009f14:	f240 80e0 	bls.w	800a0d8 <_printf_float+0x388>
 8009f18:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009f1c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f24:	d133      	bne.n	8009f8e <_printf_float+0x23e>
 8009f26:	4a38      	ldr	r2, [pc, #224]	@ (800a008 <_printf_float+0x2b8>)
 8009f28:	2301      	movs	r3, #1
 8009f2a:	4631      	mov	r1, r6
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	47b8      	blx	r7
 8009f30:	3001      	adds	r0, #1
 8009f32:	f43f af59 	beq.w	8009de8 <_printf_float+0x98>
 8009f36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009f3a:	4543      	cmp	r3, r8
 8009f3c:	db02      	blt.n	8009f44 <_printf_float+0x1f4>
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	07d8      	lsls	r0, r3, #31
 8009f42:	d50f      	bpl.n	8009f64 <_printf_float+0x214>
 8009f44:	9b05      	ldr	r3, [sp, #20]
 8009f46:	465a      	mov	r2, fp
 8009f48:	4631      	mov	r1, r6
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	47b8      	blx	r7
 8009f4e:	3001      	adds	r0, #1
 8009f50:	f43f af4a 	beq.w	8009de8 <_printf_float+0x98>
 8009f54:	f04f 0900 	mov.w	r9, #0
 8009f58:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f5c:	f104 0a1a 	add.w	sl, r4, #26
 8009f60:	45c8      	cmp	r8, r9
 8009f62:	dc09      	bgt.n	8009f78 <_printf_float+0x228>
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	079b      	lsls	r3, r3, #30
 8009f68:	f100 8107 	bmi.w	800a17a <_printf_float+0x42a>
 8009f6c:	68e0      	ldr	r0, [r4, #12]
 8009f6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f70:	4298      	cmp	r0, r3
 8009f72:	bfb8      	it	lt
 8009f74:	4618      	movlt	r0, r3
 8009f76:	e739      	b.n	8009dec <_printf_float+0x9c>
 8009f78:	2301      	movs	r3, #1
 8009f7a:	4652      	mov	r2, sl
 8009f7c:	4631      	mov	r1, r6
 8009f7e:	4628      	mov	r0, r5
 8009f80:	47b8      	blx	r7
 8009f82:	3001      	adds	r0, #1
 8009f84:	f43f af30 	beq.w	8009de8 <_printf_float+0x98>
 8009f88:	f109 0901 	add.w	r9, r9, #1
 8009f8c:	e7e8      	b.n	8009f60 <_printf_float+0x210>
 8009f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	dc3b      	bgt.n	800a00c <_printf_float+0x2bc>
 8009f94:	4a1c      	ldr	r2, [pc, #112]	@ (800a008 <_printf_float+0x2b8>)
 8009f96:	2301      	movs	r3, #1
 8009f98:	4631      	mov	r1, r6
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	47b8      	blx	r7
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	f43f af22 	beq.w	8009de8 <_printf_float+0x98>
 8009fa4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009fa8:	ea59 0303 	orrs.w	r3, r9, r3
 8009fac:	d102      	bne.n	8009fb4 <_printf_float+0x264>
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	07d9      	lsls	r1, r3, #31
 8009fb2:	d5d7      	bpl.n	8009f64 <_printf_float+0x214>
 8009fb4:	9b05      	ldr	r3, [sp, #20]
 8009fb6:	465a      	mov	r2, fp
 8009fb8:	4631      	mov	r1, r6
 8009fba:	4628      	mov	r0, r5
 8009fbc:	47b8      	blx	r7
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	f43f af12 	beq.w	8009de8 <_printf_float+0x98>
 8009fc4:	f04f 0a00 	mov.w	sl, #0
 8009fc8:	f104 0b1a 	add.w	fp, r4, #26
 8009fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fce:	425b      	negs	r3, r3
 8009fd0:	4553      	cmp	r3, sl
 8009fd2:	dc01      	bgt.n	8009fd8 <_printf_float+0x288>
 8009fd4:	464b      	mov	r3, r9
 8009fd6:	e794      	b.n	8009f02 <_printf_float+0x1b2>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	465a      	mov	r2, fp
 8009fdc:	4631      	mov	r1, r6
 8009fde:	4628      	mov	r0, r5
 8009fe0:	47b8      	blx	r7
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	f43f af00 	beq.w	8009de8 <_printf_float+0x98>
 8009fe8:	f10a 0a01 	add.w	sl, sl, #1
 8009fec:	e7ee      	b.n	8009fcc <_printf_float+0x27c>
 8009fee:	bf00      	nop
 8009ff0:	ffffffff 	.word	0xffffffff
 8009ff4:	7fefffff 	.word	0x7fefffff
 8009ff8:	0800d300 	.word	0x0800d300
 8009ffc:	0800d2fc 	.word	0x0800d2fc
 800a000:	0800d308 	.word	0x0800d308
 800a004:	0800d304 	.word	0x0800d304
 800a008:	0800d30c 	.word	0x0800d30c
 800a00c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a00e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a012:	4553      	cmp	r3, sl
 800a014:	bfa8      	it	ge
 800a016:	4653      	movge	r3, sl
 800a018:	2b00      	cmp	r3, #0
 800a01a:	4699      	mov	r9, r3
 800a01c:	dc37      	bgt.n	800a08e <_printf_float+0x33e>
 800a01e:	2300      	movs	r3, #0
 800a020:	9307      	str	r3, [sp, #28]
 800a022:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a026:	f104 021a 	add.w	r2, r4, #26
 800a02a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a02c:	9907      	ldr	r1, [sp, #28]
 800a02e:	9306      	str	r3, [sp, #24]
 800a030:	eba3 0309 	sub.w	r3, r3, r9
 800a034:	428b      	cmp	r3, r1
 800a036:	dc31      	bgt.n	800a09c <_printf_float+0x34c>
 800a038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a03a:	459a      	cmp	sl, r3
 800a03c:	dc3b      	bgt.n	800a0b6 <_printf_float+0x366>
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	07da      	lsls	r2, r3, #31
 800a042:	d438      	bmi.n	800a0b6 <_printf_float+0x366>
 800a044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a046:	ebaa 0903 	sub.w	r9, sl, r3
 800a04a:	9b06      	ldr	r3, [sp, #24]
 800a04c:	ebaa 0303 	sub.w	r3, sl, r3
 800a050:	4599      	cmp	r9, r3
 800a052:	bfa8      	it	ge
 800a054:	4699      	movge	r9, r3
 800a056:	f1b9 0f00 	cmp.w	r9, #0
 800a05a:	dc34      	bgt.n	800a0c6 <_printf_float+0x376>
 800a05c:	f04f 0800 	mov.w	r8, #0
 800a060:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a064:	f104 0b1a 	add.w	fp, r4, #26
 800a068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a06a:	ebaa 0303 	sub.w	r3, sl, r3
 800a06e:	eba3 0309 	sub.w	r3, r3, r9
 800a072:	4543      	cmp	r3, r8
 800a074:	f77f af76 	ble.w	8009f64 <_printf_float+0x214>
 800a078:	2301      	movs	r3, #1
 800a07a:	465a      	mov	r2, fp
 800a07c:	4631      	mov	r1, r6
 800a07e:	4628      	mov	r0, r5
 800a080:	47b8      	blx	r7
 800a082:	3001      	adds	r0, #1
 800a084:	f43f aeb0 	beq.w	8009de8 <_printf_float+0x98>
 800a088:	f108 0801 	add.w	r8, r8, #1
 800a08c:	e7ec      	b.n	800a068 <_printf_float+0x318>
 800a08e:	4642      	mov	r2, r8
 800a090:	4631      	mov	r1, r6
 800a092:	4628      	mov	r0, r5
 800a094:	47b8      	blx	r7
 800a096:	3001      	adds	r0, #1
 800a098:	d1c1      	bne.n	800a01e <_printf_float+0x2ce>
 800a09a:	e6a5      	b.n	8009de8 <_printf_float+0x98>
 800a09c:	2301      	movs	r3, #1
 800a09e:	4631      	mov	r1, r6
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	9206      	str	r2, [sp, #24]
 800a0a4:	47b8      	blx	r7
 800a0a6:	3001      	adds	r0, #1
 800a0a8:	f43f ae9e 	beq.w	8009de8 <_printf_float+0x98>
 800a0ac:	9b07      	ldr	r3, [sp, #28]
 800a0ae:	9a06      	ldr	r2, [sp, #24]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	9307      	str	r3, [sp, #28]
 800a0b4:	e7b9      	b.n	800a02a <_printf_float+0x2da>
 800a0b6:	9b05      	ldr	r3, [sp, #20]
 800a0b8:	465a      	mov	r2, fp
 800a0ba:	4631      	mov	r1, r6
 800a0bc:	4628      	mov	r0, r5
 800a0be:	47b8      	blx	r7
 800a0c0:	3001      	adds	r0, #1
 800a0c2:	d1bf      	bne.n	800a044 <_printf_float+0x2f4>
 800a0c4:	e690      	b.n	8009de8 <_printf_float+0x98>
 800a0c6:	9a06      	ldr	r2, [sp, #24]
 800a0c8:	464b      	mov	r3, r9
 800a0ca:	4442      	add	r2, r8
 800a0cc:	4631      	mov	r1, r6
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	47b8      	blx	r7
 800a0d2:	3001      	adds	r0, #1
 800a0d4:	d1c2      	bne.n	800a05c <_printf_float+0x30c>
 800a0d6:	e687      	b.n	8009de8 <_printf_float+0x98>
 800a0d8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800a0dc:	f1b9 0f01 	cmp.w	r9, #1
 800a0e0:	dc01      	bgt.n	800a0e6 <_printf_float+0x396>
 800a0e2:	07db      	lsls	r3, r3, #31
 800a0e4:	d536      	bpl.n	800a154 <_printf_float+0x404>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	4642      	mov	r2, r8
 800a0ea:	4631      	mov	r1, r6
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	47b8      	blx	r7
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	f43f ae79 	beq.w	8009de8 <_printf_float+0x98>
 800a0f6:	9b05      	ldr	r3, [sp, #20]
 800a0f8:	465a      	mov	r2, fp
 800a0fa:	4631      	mov	r1, r6
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	47b8      	blx	r7
 800a100:	3001      	adds	r0, #1
 800a102:	f43f ae71 	beq.w	8009de8 <_printf_float+0x98>
 800a106:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a10a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a112:	f109 39ff 	add.w	r9, r9, #4294967295
 800a116:	d018      	beq.n	800a14a <_printf_float+0x3fa>
 800a118:	464b      	mov	r3, r9
 800a11a:	f108 0201 	add.w	r2, r8, #1
 800a11e:	4631      	mov	r1, r6
 800a120:	4628      	mov	r0, r5
 800a122:	47b8      	blx	r7
 800a124:	3001      	adds	r0, #1
 800a126:	d10c      	bne.n	800a142 <_printf_float+0x3f2>
 800a128:	e65e      	b.n	8009de8 <_printf_float+0x98>
 800a12a:	2301      	movs	r3, #1
 800a12c:	465a      	mov	r2, fp
 800a12e:	4631      	mov	r1, r6
 800a130:	4628      	mov	r0, r5
 800a132:	47b8      	blx	r7
 800a134:	3001      	adds	r0, #1
 800a136:	f43f ae57 	beq.w	8009de8 <_printf_float+0x98>
 800a13a:	f108 0801 	add.w	r8, r8, #1
 800a13e:	45c8      	cmp	r8, r9
 800a140:	dbf3      	blt.n	800a12a <_printf_float+0x3da>
 800a142:	4653      	mov	r3, sl
 800a144:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a148:	e6dc      	b.n	8009f04 <_printf_float+0x1b4>
 800a14a:	f04f 0800 	mov.w	r8, #0
 800a14e:	f104 0b1a 	add.w	fp, r4, #26
 800a152:	e7f4      	b.n	800a13e <_printf_float+0x3ee>
 800a154:	2301      	movs	r3, #1
 800a156:	4642      	mov	r2, r8
 800a158:	e7e1      	b.n	800a11e <_printf_float+0x3ce>
 800a15a:	2301      	movs	r3, #1
 800a15c:	464a      	mov	r2, r9
 800a15e:	4631      	mov	r1, r6
 800a160:	4628      	mov	r0, r5
 800a162:	47b8      	blx	r7
 800a164:	3001      	adds	r0, #1
 800a166:	f43f ae3f 	beq.w	8009de8 <_printf_float+0x98>
 800a16a:	f108 0801 	add.w	r8, r8, #1
 800a16e:	68e3      	ldr	r3, [r4, #12]
 800a170:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a172:	1a5b      	subs	r3, r3, r1
 800a174:	4543      	cmp	r3, r8
 800a176:	dcf0      	bgt.n	800a15a <_printf_float+0x40a>
 800a178:	e6f8      	b.n	8009f6c <_printf_float+0x21c>
 800a17a:	f04f 0800 	mov.w	r8, #0
 800a17e:	f104 0919 	add.w	r9, r4, #25
 800a182:	e7f4      	b.n	800a16e <_printf_float+0x41e>

0800a184 <_printf_common>:
 800a184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a188:	4616      	mov	r6, r2
 800a18a:	4698      	mov	r8, r3
 800a18c:	688a      	ldr	r2, [r1, #8]
 800a18e:	690b      	ldr	r3, [r1, #16]
 800a190:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a194:	4293      	cmp	r3, r2
 800a196:	bfb8      	it	lt
 800a198:	4613      	movlt	r3, r2
 800a19a:	6033      	str	r3, [r6, #0]
 800a19c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a1a0:	4607      	mov	r7, r0
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	b10a      	cbz	r2, 800a1aa <_printf_common+0x26>
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	6033      	str	r3, [r6, #0]
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	0699      	lsls	r1, r3, #26
 800a1ae:	bf42      	ittt	mi
 800a1b0:	6833      	ldrmi	r3, [r6, #0]
 800a1b2:	3302      	addmi	r3, #2
 800a1b4:	6033      	strmi	r3, [r6, #0]
 800a1b6:	6825      	ldr	r5, [r4, #0]
 800a1b8:	f015 0506 	ands.w	r5, r5, #6
 800a1bc:	d106      	bne.n	800a1cc <_printf_common+0x48>
 800a1be:	f104 0a19 	add.w	sl, r4, #25
 800a1c2:	68e3      	ldr	r3, [r4, #12]
 800a1c4:	6832      	ldr	r2, [r6, #0]
 800a1c6:	1a9b      	subs	r3, r3, r2
 800a1c8:	42ab      	cmp	r3, r5
 800a1ca:	dc26      	bgt.n	800a21a <_printf_common+0x96>
 800a1cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a1d0:	6822      	ldr	r2, [r4, #0]
 800a1d2:	3b00      	subs	r3, #0
 800a1d4:	bf18      	it	ne
 800a1d6:	2301      	movne	r3, #1
 800a1d8:	0692      	lsls	r2, r2, #26
 800a1da:	d42b      	bmi.n	800a234 <_printf_common+0xb0>
 800a1dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a1e0:	4641      	mov	r1, r8
 800a1e2:	4638      	mov	r0, r7
 800a1e4:	47c8      	blx	r9
 800a1e6:	3001      	adds	r0, #1
 800a1e8:	d01e      	beq.n	800a228 <_printf_common+0xa4>
 800a1ea:	6823      	ldr	r3, [r4, #0]
 800a1ec:	6922      	ldr	r2, [r4, #16]
 800a1ee:	f003 0306 	and.w	r3, r3, #6
 800a1f2:	2b04      	cmp	r3, #4
 800a1f4:	bf02      	ittt	eq
 800a1f6:	68e5      	ldreq	r5, [r4, #12]
 800a1f8:	6833      	ldreq	r3, [r6, #0]
 800a1fa:	1aed      	subeq	r5, r5, r3
 800a1fc:	68a3      	ldr	r3, [r4, #8]
 800a1fe:	bf0c      	ite	eq
 800a200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a204:	2500      	movne	r5, #0
 800a206:	4293      	cmp	r3, r2
 800a208:	bfc4      	itt	gt
 800a20a:	1a9b      	subgt	r3, r3, r2
 800a20c:	18ed      	addgt	r5, r5, r3
 800a20e:	2600      	movs	r6, #0
 800a210:	341a      	adds	r4, #26
 800a212:	42b5      	cmp	r5, r6
 800a214:	d11a      	bne.n	800a24c <_printf_common+0xc8>
 800a216:	2000      	movs	r0, #0
 800a218:	e008      	b.n	800a22c <_printf_common+0xa8>
 800a21a:	2301      	movs	r3, #1
 800a21c:	4652      	mov	r2, sl
 800a21e:	4641      	mov	r1, r8
 800a220:	4638      	mov	r0, r7
 800a222:	47c8      	blx	r9
 800a224:	3001      	adds	r0, #1
 800a226:	d103      	bne.n	800a230 <_printf_common+0xac>
 800a228:	f04f 30ff 	mov.w	r0, #4294967295
 800a22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a230:	3501      	adds	r5, #1
 800a232:	e7c6      	b.n	800a1c2 <_printf_common+0x3e>
 800a234:	18e1      	adds	r1, r4, r3
 800a236:	1c5a      	adds	r2, r3, #1
 800a238:	2030      	movs	r0, #48	@ 0x30
 800a23a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a23e:	4422      	add	r2, r4
 800a240:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a244:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a248:	3302      	adds	r3, #2
 800a24a:	e7c7      	b.n	800a1dc <_printf_common+0x58>
 800a24c:	2301      	movs	r3, #1
 800a24e:	4622      	mov	r2, r4
 800a250:	4641      	mov	r1, r8
 800a252:	4638      	mov	r0, r7
 800a254:	47c8      	blx	r9
 800a256:	3001      	adds	r0, #1
 800a258:	d0e6      	beq.n	800a228 <_printf_common+0xa4>
 800a25a:	3601      	adds	r6, #1
 800a25c:	e7d9      	b.n	800a212 <_printf_common+0x8e>
	...

0800a260 <_printf_i>:
 800a260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a264:	7e0f      	ldrb	r7, [r1, #24]
 800a266:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a268:	2f78      	cmp	r7, #120	@ 0x78
 800a26a:	4691      	mov	r9, r2
 800a26c:	4680      	mov	r8, r0
 800a26e:	460c      	mov	r4, r1
 800a270:	469a      	mov	sl, r3
 800a272:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a276:	d807      	bhi.n	800a288 <_printf_i+0x28>
 800a278:	2f62      	cmp	r7, #98	@ 0x62
 800a27a:	d80a      	bhi.n	800a292 <_printf_i+0x32>
 800a27c:	2f00      	cmp	r7, #0
 800a27e:	f000 80d1 	beq.w	800a424 <_printf_i+0x1c4>
 800a282:	2f58      	cmp	r7, #88	@ 0x58
 800a284:	f000 80b8 	beq.w	800a3f8 <_printf_i+0x198>
 800a288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a28c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a290:	e03a      	b.n	800a308 <_printf_i+0xa8>
 800a292:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a296:	2b15      	cmp	r3, #21
 800a298:	d8f6      	bhi.n	800a288 <_printf_i+0x28>
 800a29a:	a101      	add	r1, pc, #4	@ (adr r1, 800a2a0 <_printf_i+0x40>)
 800a29c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2a0:	0800a2f9 	.word	0x0800a2f9
 800a2a4:	0800a30d 	.word	0x0800a30d
 800a2a8:	0800a289 	.word	0x0800a289
 800a2ac:	0800a289 	.word	0x0800a289
 800a2b0:	0800a289 	.word	0x0800a289
 800a2b4:	0800a289 	.word	0x0800a289
 800a2b8:	0800a30d 	.word	0x0800a30d
 800a2bc:	0800a289 	.word	0x0800a289
 800a2c0:	0800a289 	.word	0x0800a289
 800a2c4:	0800a289 	.word	0x0800a289
 800a2c8:	0800a289 	.word	0x0800a289
 800a2cc:	0800a40b 	.word	0x0800a40b
 800a2d0:	0800a337 	.word	0x0800a337
 800a2d4:	0800a3c5 	.word	0x0800a3c5
 800a2d8:	0800a289 	.word	0x0800a289
 800a2dc:	0800a289 	.word	0x0800a289
 800a2e0:	0800a42d 	.word	0x0800a42d
 800a2e4:	0800a289 	.word	0x0800a289
 800a2e8:	0800a337 	.word	0x0800a337
 800a2ec:	0800a289 	.word	0x0800a289
 800a2f0:	0800a289 	.word	0x0800a289
 800a2f4:	0800a3cd 	.word	0x0800a3cd
 800a2f8:	6833      	ldr	r3, [r6, #0]
 800a2fa:	1d1a      	adds	r2, r3, #4
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	6032      	str	r2, [r6, #0]
 800a300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a304:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a308:	2301      	movs	r3, #1
 800a30a:	e09c      	b.n	800a446 <_printf_i+0x1e6>
 800a30c:	6833      	ldr	r3, [r6, #0]
 800a30e:	6820      	ldr	r0, [r4, #0]
 800a310:	1d19      	adds	r1, r3, #4
 800a312:	6031      	str	r1, [r6, #0]
 800a314:	0606      	lsls	r6, r0, #24
 800a316:	d501      	bpl.n	800a31c <_printf_i+0xbc>
 800a318:	681d      	ldr	r5, [r3, #0]
 800a31a:	e003      	b.n	800a324 <_printf_i+0xc4>
 800a31c:	0645      	lsls	r5, r0, #25
 800a31e:	d5fb      	bpl.n	800a318 <_printf_i+0xb8>
 800a320:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a324:	2d00      	cmp	r5, #0
 800a326:	da03      	bge.n	800a330 <_printf_i+0xd0>
 800a328:	232d      	movs	r3, #45	@ 0x2d
 800a32a:	426d      	negs	r5, r5
 800a32c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a330:	4858      	ldr	r0, [pc, #352]	@ (800a494 <_printf_i+0x234>)
 800a332:	230a      	movs	r3, #10
 800a334:	e011      	b.n	800a35a <_printf_i+0xfa>
 800a336:	6821      	ldr	r1, [r4, #0]
 800a338:	6833      	ldr	r3, [r6, #0]
 800a33a:	0608      	lsls	r0, r1, #24
 800a33c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a340:	d402      	bmi.n	800a348 <_printf_i+0xe8>
 800a342:	0649      	lsls	r1, r1, #25
 800a344:	bf48      	it	mi
 800a346:	b2ad      	uxthmi	r5, r5
 800a348:	2f6f      	cmp	r7, #111	@ 0x6f
 800a34a:	4852      	ldr	r0, [pc, #328]	@ (800a494 <_printf_i+0x234>)
 800a34c:	6033      	str	r3, [r6, #0]
 800a34e:	bf14      	ite	ne
 800a350:	230a      	movne	r3, #10
 800a352:	2308      	moveq	r3, #8
 800a354:	2100      	movs	r1, #0
 800a356:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a35a:	6866      	ldr	r6, [r4, #4]
 800a35c:	60a6      	str	r6, [r4, #8]
 800a35e:	2e00      	cmp	r6, #0
 800a360:	db05      	blt.n	800a36e <_printf_i+0x10e>
 800a362:	6821      	ldr	r1, [r4, #0]
 800a364:	432e      	orrs	r6, r5
 800a366:	f021 0104 	bic.w	r1, r1, #4
 800a36a:	6021      	str	r1, [r4, #0]
 800a36c:	d04b      	beq.n	800a406 <_printf_i+0x1a6>
 800a36e:	4616      	mov	r6, r2
 800a370:	fbb5 f1f3 	udiv	r1, r5, r3
 800a374:	fb03 5711 	mls	r7, r3, r1, r5
 800a378:	5dc7      	ldrb	r7, [r0, r7]
 800a37a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a37e:	462f      	mov	r7, r5
 800a380:	42bb      	cmp	r3, r7
 800a382:	460d      	mov	r5, r1
 800a384:	d9f4      	bls.n	800a370 <_printf_i+0x110>
 800a386:	2b08      	cmp	r3, #8
 800a388:	d10b      	bne.n	800a3a2 <_printf_i+0x142>
 800a38a:	6823      	ldr	r3, [r4, #0]
 800a38c:	07df      	lsls	r7, r3, #31
 800a38e:	d508      	bpl.n	800a3a2 <_printf_i+0x142>
 800a390:	6923      	ldr	r3, [r4, #16]
 800a392:	6861      	ldr	r1, [r4, #4]
 800a394:	4299      	cmp	r1, r3
 800a396:	bfde      	ittt	le
 800a398:	2330      	movle	r3, #48	@ 0x30
 800a39a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a39e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a3a2:	1b92      	subs	r2, r2, r6
 800a3a4:	6122      	str	r2, [r4, #16]
 800a3a6:	f8cd a000 	str.w	sl, [sp]
 800a3aa:	464b      	mov	r3, r9
 800a3ac:	aa03      	add	r2, sp, #12
 800a3ae:	4621      	mov	r1, r4
 800a3b0:	4640      	mov	r0, r8
 800a3b2:	f7ff fee7 	bl	800a184 <_printf_common>
 800a3b6:	3001      	adds	r0, #1
 800a3b8:	d14a      	bne.n	800a450 <_printf_i+0x1f0>
 800a3ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a3be:	b004      	add	sp, #16
 800a3c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c4:	6823      	ldr	r3, [r4, #0]
 800a3c6:	f043 0320 	orr.w	r3, r3, #32
 800a3ca:	6023      	str	r3, [r4, #0]
 800a3cc:	4832      	ldr	r0, [pc, #200]	@ (800a498 <_printf_i+0x238>)
 800a3ce:	2778      	movs	r7, #120	@ 0x78
 800a3d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a3d4:	6823      	ldr	r3, [r4, #0]
 800a3d6:	6831      	ldr	r1, [r6, #0]
 800a3d8:	061f      	lsls	r7, r3, #24
 800a3da:	f851 5b04 	ldr.w	r5, [r1], #4
 800a3de:	d402      	bmi.n	800a3e6 <_printf_i+0x186>
 800a3e0:	065f      	lsls	r7, r3, #25
 800a3e2:	bf48      	it	mi
 800a3e4:	b2ad      	uxthmi	r5, r5
 800a3e6:	6031      	str	r1, [r6, #0]
 800a3e8:	07d9      	lsls	r1, r3, #31
 800a3ea:	bf44      	itt	mi
 800a3ec:	f043 0320 	orrmi.w	r3, r3, #32
 800a3f0:	6023      	strmi	r3, [r4, #0]
 800a3f2:	b11d      	cbz	r5, 800a3fc <_printf_i+0x19c>
 800a3f4:	2310      	movs	r3, #16
 800a3f6:	e7ad      	b.n	800a354 <_printf_i+0xf4>
 800a3f8:	4826      	ldr	r0, [pc, #152]	@ (800a494 <_printf_i+0x234>)
 800a3fa:	e7e9      	b.n	800a3d0 <_printf_i+0x170>
 800a3fc:	6823      	ldr	r3, [r4, #0]
 800a3fe:	f023 0320 	bic.w	r3, r3, #32
 800a402:	6023      	str	r3, [r4, #0]
 800a404:	e7f6      	b.n	800a3f4 <_printf_i+0x194>
 800a406:	4616      	mov	r6, r2
 800a408:	e7bd      	b.n	800a386 <_printf_i+0x126>
 800a40a:	6833      	ldr	r3, [r6, #0]
 800a40c:	6825      	ldr	r5, [r4, #0]
 800a40e:	6961      	ldr	r1, [r4, #20]
 800a410:	1d18      	adds	r0, r3, #4
 800a412:	6030      	str	r0, [r6, #0]
 800a414:	062e      	lsls	r6, r5, #24
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	d501      	bpl.n	800a41e <_printf_i+0x1be>
 800a41a:	6019      	str	r1, [r3, #0]
 800a41c:	e002      	b.n	800a424 <_printf_i+0x1c4>
 800a41e:	0668      	lsls	r0, r5, #25
 800a420:	d5fb      	bpl.n	800a41a <_printf_i+0x1ba>
 800a422:	8019      	strh	r1, [r3, #0]
 800a424:	2300      	movs	r3, #0
 800a426:	6123      	str	r3, [r4, #16]
 800a428:	4616      	mov	r6, r2
 800a42a:	e7bc      	b.n	800a3a6 <_printf_i+0x146>
 800a42c:	6833      	ldr	r3, [r6, #0]
 800a42e:	1d1a      	adds	r2, r3, #4
 800a430:	6032      	str	r2, [r6, #0]
 800a432:	681e      	ldr	r6, [r3, #0]
 800a434:	6862      	ldr	r2, [r4, #4]
 800a436:	2100      	movs	r1, #0
 800a438:	4630      	mov	r0, r6
 800a43a:	f7f5 ff51 	bl	80002e0 <memchr>
 800a43e:	b108      	cbz	r0, 800a444 <_printf_i+0x1e4>
 800a440:	1b80      	subs	r0, r0, r6
 800a442:	6060      	str	r0, [r4, #4]
 800a444:	6863      	ldr	r3, [r4, #4]
 800a446:	6123      	str	r3, [r4, #16]
 800a448:	2300      	movs	r3, #0
 800a44a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a44e:	e7aa      	b.n	800a3a6 <_printf_i+0x146>
 800a450:	6923      	ldr	r3, [r4, #16]
 800a452:	4632      	mov	r2, r6
 800a454:	4649      	mov	r1, r9
 800a456:	4640      	mov	r0, r8
 800a458:	47d0      	blx	sl
 800a45a:	3001      	adds	r0, #1
 800a45c:	d0ad      	beq.n	800a3ba <_printf_i+0x15a>
 800a45e:	6823      	ldr	r3, [r4, #0]
 800a460:	079b      	lsls	r3, r3, #30
 800a462:	d413      	bmi.n	800a48c <_printf_i+0x22c>
 800a464:	68e0      	ldr	r0, [r4, #12]
 800a466:	9b03      	ldr	r3, [sp, #12]
 800a468:	4298      	cmp	r0, r3
 800a46a:	bfb8      	it	lt
 800a46c:	4618      	movlt	r0, r3
 800a46e:	e7a6      	b.n	800a3be <_printf_i+0x15e>
 800a470:	2301      	movs	r3, #1
 800a472:	4632      	mov	r2, r6
 800a474:	4649      	mov	r1, r9
 800a476:	4640      	mov	r0, r8
 800a478:	47d0      	blx	sl
 800a47a:	3001      	adds	r0, #1
 800a47c:	d09d      	beq.n	800a3ba <_printf_i+0x15a>
 800a47e:	3501      	adds	r5, #1
 800a480:	68e3      	ldr	r3, [r4, #12]
 800a482:	9903      	ldr	r1, [sp, #12]
 800a484:	1a5b      	subs	r3, r3, r1
 800a486:	42ab      	cmp	r3, r5
 800a488:	dcf2      	bgt.n	800a470 <_printf_i+0x210>
 800a48a:	e7eb      	b.n	800a464 <_printf_i+0x204>
 800a48c:	2500      	movs	r5, #0
 800a48e:	f104 0619 	add.w	r6, r4, #25
 800a492:	e7f5      	b.n	800a480 <_printf_i+0x220>
 800a494:	0800d30e 	.word	0x0800d30e
 800a498:	0800d31f 	.word	0x0800d31f

0800a49c <std>:
 800a49c:	2300      	movs	r3, #0
 800a49e:	b510      	push	{r4, lr}
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	e9c0 3300 	strd	r3, r3, [r0]
 800a4a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4aa:	6083      	str	r3, [r0, #8]
 800a4ac:	8181      	strh	r1, [r0, #12]
 800a4ae:	6643      	str	r3, [r0, #100]	@ 0x64
 800a4b0:	81c2      	strh	r2, [r0, #14]
 800a4b2:	6183      	str	r3, [r0, #24]
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	2208      	movs	r2, #8
 800a4b8:	305c      	adds	r0, #92	@ 0x5c
 800a4ba:	f000 f9f9 	bl	800a8b0 <memset>
 800a4be:	4b0d      	ldr	r3, [pc, #52]	@ (800a4f4 <std+0x58>)
 800a4c0:	6263      	str	r3, [r4, #36]	@ 0x24
 800a4c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a4f8 <std+0x5c>)
 800a4c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a4c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a4fc <std+0x60>)
 800a4c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a4ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a500 <std+0x64>)
 800a4cc:	6323      	str	r3, [r4, #48]	@ 0x30
 800a4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a504 <std+0x68>)
 800a4d0:	6224      	str	r4, [r4, #32]
 800a4d2:	429c      	cmp	r4, r3
 800a4d4:	d006      	beq.n	800a4e4 <std+0x48>
 800a4d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a4da:	4294      	cmp	r4, r2
 800a4dc:	d002      	beq.n	800a4e4 <std+0x48>
 800a4de:	33d0      	adds	r3, #208	@ 0xd0
 800a4e0:	429c      	cmp	r4, r3
 800a4e2:	d105      	bne.n	800a4f0 <std+0x54>
 800a4e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4ec:	f000 ba5c 	b.w	800a9a8 <__retarget_lock_init_recursive>
 800a4f0:	bd10      	pop	{r4, pc}
 800a4f2:	bf00      	nop
 800a4f4:	0800a701 	.word	0x0800a701
 800a4f8:	0800a723 	.word	0x0800a723
 800a4fc:	0800a75b 	.word	0x0800a75b
 800a500:	0800a77f 	.word	0x0800a77f
 800a504:	2400038c 	.word	0x2400038c

0800a508 <stdio_exit_handler>:
 800a508:	4a02      	ldr	r2, [pc, #8]	@ (800a514 <stdio_exit_handler+0xc>)
 800a50a:	4903      	ldr	r1, [pc, #12]	@ (800a518 <stdio_exit_handler+0x10>)
 800a50c:	4803      	ldr	r0, [pc, #12]	@ (800a51c <stdio_exit_handler+0x14>)
 800a50e:	f000 b869 	b.w	800a5e4 <_fwalk_sglue>
 800a512:	bf00      	nop
 800a514:	24000010 	.word	0x24000010
 800a518:	0800c1fd 	.word	0x0800c1fd
 800a51c:	24000020 	.word	0x24000020

0800a520 <cleanup_stdio>:
 800a520:	6841      	ldr	r1, [r0, #4]
 800a522:	4b0c      	ldr	r3, [pc, #48]	@ (800a554 <cleanup_stdio+0x34>)
 800a524:	4299      	cmp	r1, r3
 800a526:	b510      	push	{r4, lr}
 800a528:	4604      	mov	r4, r0
 800a52a:	d001      	beq.n	800a530 <cleanup_stdio+0x10>
 800a52c:	f001 fe66 	bl	800c1fc <_fflush_r>
 800a530:	68a1      	ldr	r1, [r4, #8]
 800a532:	4b09      	ldr	r3, [pc, #36]	@ (800a558 <cleanup_stdio+0x38>)
 800a534:	4299      	cmp	r1, r3
 800a536:	d002      	beq.n	800a53e <cleanup_stdio+0x1e>
 800a538:	4620      	mov	r0, r4
 800a53a:	f001 fe5f 	bl	800c1fc <_fflush_r>
 800a53e:	68e1      	ldr	r1, [r4, #12]
 800a540:	4b06      	ldr	r3, [pc, #24]	@ (800a55c <cleanup_stdio+0x3c>)
 800a542:	4299      	cmp	r1, r3
 800a544:	d004      	beq.n	800a550 <cleanup_stdio+0x30>
 800a546:	4620      	mov	r0, r4
 800a548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a54c:	f001 be56 	b.w	800c1fc <_fflush_r>
 800a550:	bd10      	pop	{r4, pc}
 800a552:	bf00      	nop
 800a554:	2400038c 	.word	0x2400038c
 800a558:	240003f4 	.word	0x240003f4
 800a55c:	2400045c 	.word	0x2400045c

0800a560 <global_stdio_init.part.0>:
 800a560:	b510      	push	{r4, lr}
 800a562:	4b0b      	ldr	r3, [pc, #44]	@ (800a590 <global_stdio_init.part.0+0x30>)
 800a564:	4c0b      	ldr	r4, [pc, #44]	@ (800a594 <global_stdio_init.part.0+0x34>)
 800a566:	4a0c      	ldr	r2, [pc, #48]	@ (800a598 <global_stdio_init.part.0+0x38>)
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	4620      	mov	r0, r4
 800a56c:	2200      	movs	r2, #0
 800a56e:	2104      	movs	r1, #4
 800a570:	f7ff ff94 	bl	800a49c <std>
 800a574:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a578:	2201      	movs	r2, #1
 800a57a:	2109      	movs	r1, #9
 800a57c:	f7ff ff8e 	bl	800a49c <std>
 800a580:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a584:	2202      	movs	r2, #2
 800a586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a58a:	2112      	movs	r1, #18
 800a58c:	f7ff bf86 	b.w	800a49c <std>
 800a590:	240004c4 	.word	0x240004c4
 800a594:	2400038c 	.word	0x2400038c
 800a598:	0800a509 	.word	0x0800a509

0800a59c <__sfp_lock_acquire>:
 800a59c:	4801      	ldr	r0, [pc, #4]	@ (800a5a4 <__sfp_lock_acquire+0x8>)
 800a59e:	f000 ba04 	b.w	800a9aa <__retarget_lock_acquire_recursive>
 800a5a2:	bf00      	nop
 800a5a4:	240004cd 	.word	0x240004cd

0800a5a8 <__sfp_lock_release>:
 800a5a8:	4801      	ldr	r0, [pc, #4]	@ (800a5b0 <__sfp_lock_release+0x8>)
 800a5aa:	f000 b9ff 	b.w	800a9ac <__retarget_lock_release_recursive>
 800a5ae:	bf00      	nop
 800a5b0:	240004cd 	.word	0x240004cd

0800a5b4 <__sinit>:
 800a5b4:	b510      	push	{r4, lr}
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	f7ff fff0 	bl	800a59c <__sfp_lock_acquire>
 800a5bc:	6a23      	ldr	r3, [r4, #32]
 800a5be:	b11b      	cbz	r3, 800a5c8 <__sinit+0x14>
 800a5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5c4:	f7ff bff0 	b.w	800a5a8 <__sfp_lock_release>
 800a5c8:	4b04      	ldr	r3, [pc, #16]	@ (800a5dc <__sinit+0x28>)
 800a5ca:	6223      	str	r3, [r4, #32]
 800a5cc:	4b04      	ldr	r3, [pc, #16]	@ (800a5e0 <__sinit+0x2c>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d1f5      	bne.n	800a5c0 <__sinit+0xc>
 800a5d4:	f7ff ffc4 	bl	800a560 <global_stdio_init.part.0>
 800a5d8:	e7f2      	b.n	800a5c0 <__sinit+0xc>
 800a5da:	bf00      	nop
 800a5dc:	0800a521 	.word	0x0800a521
 800a5e0:	240004c4 	.word	0x240004c4

0800a5e4 <_fwalk_sglue>:
 800a5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5e8:	4607      	mov	r7, r0
 800a5ea:	4688      	mov	r8, r1
 800a5ec:	4614      	mov	r4, r2
 800a5ee:	2600      	movs	r6, #0
 800a5f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5f4:	f1b9 0901 	subs.w	r9, r9, #1
 800a5f8:	d505      	bpl.n	800a606 <_fwalk_sglue+0x22>
 800a5fa:	6824      	ldr	r4, [r4, #0]
 800a5fc:	2c00      	cmp	r4, #0
 800a5fe:	d1f7      	bne.n	800a5f0 <_fwalk_sglue+0xc>
 800a600:	4630      	mov	r0, r6
 800a602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a606:	89ab      	ldrh	r3, [r5, #12]
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d907      	bls.n	800a61c <_fwalk_sglue+0x38>
 800a60c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a610:	3301      	adds	r3, #1
 800a612:	d003      	beq.n	800a61c <_fwalk_sglue+0x38>
 800a614:	4629      	mov	r1, r5
 800a616:	4638      	mov	r0, r7
 800a618:	47c0      	blx	r8
 800a61a:	4306      	orrs	r6, r0
 800a61c:	3568      	adds	r5, #104	@ 0x68
 800a61e:	e7e9      	b.n	800a5f4 <_fwalk_sglue+0x10>

0800a620 <iprintf>:
 800a620:	b40f      	push	{r0, r1, r2, r3}
 800a622:	b507      	push	{r0, r1, r2, lr}
 800a624:	4906      	ldr	r1, [pc, #24]	@ (800a640 <iprintf+0x20>)
 800a626:	ab04      	add	r3, sp, #16
 800a628:	6808      	ldr	r0, [r1, #0]
 800a62a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a62e:	6881      	ldr	r1, [r0, #8]
 800a630:	9301      	str	r3, [sp, #4]
 800a632:	f001 fc47 	bl	800bec4 <_vfiprintf_r>
 800a636:	b003      	add	sp, #12
 800a638:	f85d eb04 	ldr.w	lr, [sp], #4
 800a63c:	b004      	add	sp, #16
 800a63e:	4770      	bx	lr
 800a640:	2400001c 	.word	0x2400001c

0800a644 <_puts_r>:
 800a644:	6a03      	ldr	r3, [r0, #32]
 800a646:	b570      	push	{r4, r5, r6, lr}
 800a648:	6884      	ldr	r4, [r0, #8]
 800a64a:	4605      	mov	r5, r0
 800a64c:	460e      	mov	r6, r1
 800a64e:	b90b      	cbnz	r3, 800a654 <_puts_r+0x10>
 800a650:	f7ff ffb0 	bl	800a5b4 <__sinit>
 800a654:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a656:	07db      	lsls	r3, r3, #31
 800a658:	d405      	bmi.n	800a666 <_puts_r+0x22>
 800a65a:	89a3      	ldrh	r3, [r4, #12]
 800a65c:	0598      	lsls	r0, r3, #22
 800a65e:	d402      	bmi.n	800a666 <_puts_r+0x22>
 800a660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a662:	f000 f9a2 	bl	800a9aa <__retarget_lock_acquire_recursive>
 800a666:	89a3      	ldrh	r3, [r4, #12]
 800a668:	0719      	lsls	r1, r3, #28
 800a66a:	d502      	bpl.n	800a672 <_puts_r+0x2e>
 800a66c:	6923      	ldr	r3, [r4, #16]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d135      	bne.n	800a6de <_puts_r+0x9a>
 800a672:	4621      	mov	r1, r4
 800a674:	4628      	mov	r0, r5
 800a676:	f000 f8c5 	bl	800a804 <__swsetup_r>
 800a67a:	b380      	cbz	r0, 800a6de <_puts_r+0x9a>
 800a67c:	f04f 35ff 	mov.w	r5, #4294967295
 800a680:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a682:	07da      	lsls	r2, r3, #31
 800a684:	d405      	bmi.n	800a692 <_puts_r+0x4e>
 800a686:	89a3      	ldrh	r3, [r4, #12]
 800a688:	059b      	lsls	r3, r3, #22
 800a68a:	d402      	bmi.n	800a692 <_puts_r+0x4e>
 800a68c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a68e:	f000 f98d 	bl	800a9ac <__retarget_lock_release_recursive>
 800a692:	4628      	mov	r0, r5
 800a694:	bd70      	pop	{r4, r5, r6, pc}
 800a696:	2b00      	cmp	r3, #0
 800a698:	da04      	bge.n	800a6a4 <_puts_r+0x60>
 800a69a:	69a2      	ldr	r2, [r4, #24]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	dc17      	bgt.n	800a6d0 <_puts_r+0x8c>
 800a6a0:	290a      	cmp	r1, #10
 800a6a2:	d015      	beq.n	800a6d0 <_puts_r+0x8c>
 800a6a4:	6823      	ldr	r3, [r4, #0]
 800a6a6:	1c5a      	adds	r2, r3, #1
 800a6a8:	6022      	str	r2, [r4, #0]
 800a6aa:	7019      	strb	r1, [r3, #0]
 800a6ac:	68a3      	ldr	r3, [r4, #8]
 800a6ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	60a3      	str	r3, [r4, #8]
 800a6b6:	2900      	cmp	r1, #0
 800a6b8:	d1ed      	bne.n	800a696 <_puts_r+0x52>
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	da11      	bge.n	800a6e2 <_puts_r+0x9e>
 800a6be:	4622      	mov	r2, r4
 800a6c0:	210a      	movs	r1, #10
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f000 f85f 	bl	800a786 <__swbuf_r>
 800a6c8:	3001      	adds	r0, #1
 800a6ca:	d0d7      	beq.n	800a67c <_puts_r+0x38>
 800a6cc:	250a      	movs	r5, #10
 800a6ce:	e7d7      	b.n	800a680 <_puts_r+0x3c>
 800a6d0:	4622      	mov	r2, r4
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	f000 f857 	bl	800a786 <__swbuf_r>
 800a6d8:	3001      	adds	r0, #1
 800a6da:	d1e7      	bne.n	800a6ac <_puts_r+0x68>
 800a6dc:	e7ce      	b.n	800a67c <_puts_r+0x38>
 800a6de:	3e01      	subs	r6, #1
 800a6e0:	e7e4      	b.n	800a6ac <_puts_r+0x68>
 800a6e2:	6823      	ldr	r3, [r4, #0]
 800a6e4:	1c5a      	adds	r2, r3, #1
 800a6e6:	6022      	str	r2, [r4, #0]
 800a6e8:	220a      	movs	r2, #10
 800a6ea:	701a      	strb	r2, [r3, #0]
 800a6ec:	e7ee      	b.n	800a6cc <_puts_r+0x88>
	...

0800a6f0 <puts>:
 800a6f0:	4b02      	ldr	r3, [pc, #8]	@ (800a6fc <puts+0xc>)
 800a6f2:	4601      	mov	r1, r0
 800a6f4:	6818      	ldr	r0, [r3, #0]
 800a6f6:	f7ff bfa5 	b.w	800a644 <_puts_r>
 800a6fa:	bf00      	nop
 800a6fc:	2400001c 	.word	0x2400001c

0800a700 <__sread>:
 800a700:	b510      	push	{r4, lr}
 800a702:	460c      	mov	r4, r1
 800a704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a708:	f000 f900 	bl	800a90c <_read_r>
 800a70c:	2800      	cmp	r0, #0
 800a70e:	bfab      	itete	ge
 800a710:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a712:	89a3      	ldrhlt	r3, [r4, #12]
 800a714:	181b      	addge	r3, r3, r0
 800a716:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a71a:	bfac      	ite	ge
 800a71c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a71e:	81a3      	strhlt	r3, [r4, #12]
 800a720:	bd10      	pop	{r4, pc}

0800a722 <__swrite>:
 800a722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a726:	461f      	mov	r7, r3
 800a728:	898b      	ldrh	r3, [r1, #12]
 800a72a:	05db      	lsls	r3, r3, #23
 800a72c:	4605      	mov	r5, r0
 800a72e:	460c      	mov	r4, r1
 800a730:	4616      	mov	r6, r2
 800a732:	d505      	bpl.n	800a740 <__swrite+0x1e>
 800a734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a738:	2302      	movs	r3, #2
 800a73a:	2200      	movs	r2, #0
 800a73c:	f000 f8d4 	bl	800a8e8 <_lseek_r>
 800a740:	89a3      	ldrh	r3, [r4, #12]
 800a742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a746:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a74a:	81a3      	strh	r3, [r4, #12]
 800a74c:	4632      	mov	r2, r6
 800a74e:	463b      	mov	r3, r7
 800a750:	4628      	mov	r0, r5
 800a752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a756:	f000 b8eb 	b.w	800a930 <_write_r>

0800a75a <__sseek>:
 800a75a:	b510      	push	{r4, lr}
 800a75c:	460c      	mov	r4, r1
 800a75e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a762:	f000 f8c1 	bl	800a8e8 <_lseek_r>
 800a766:	1c43      	adds	r3, r0, #1
 800a768:	89a3      	ldrh	r3, [r4, #12]
 800a76a:	bf15      	itete	ne
 800a76c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a76e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a772:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a776:	81a3      	strheq	r3, [r4, #12]
 800a778:	bf18      	it	ne
 800a77a:	81a3      	strhne	r3, [r4, #12]
 800a77c:	bd10      	pop	{r4, pc}

0800a77e <__sclose>:
 800a77e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a782:	f000 b8a1 	b.w	800a8c8 <_close_r>

0800a786 <__swbuf_r>:
 800a786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a788:	460e      	mov	r6, r1
 800a78a:	4614      	mov	r4, r2
 800a78c:	4605      	mov	r5, r0
 800a78e:	b118      	cbz	r0, 800a798 <__swbuf_r+0x12>
 800a790:	6a03      	ldr	r3, [r0, #32]
 800a792:	b90b      	cbnz	r3, 800a798 <__swbuf_r+0x12>
 800a794:	f7ff ff0e 	bl	800a5b4 <__sinit>
 800a798:	69a3      	ldr	r3, [r4, #24]
 800a79a:	60a3      	str	r3, [r4, #8]
 800a79c:	89a3      	ldrh	r3, [r4, #12]
 800a79e:	071a      	lsls	r2, r3, #28
 800a7a0:	d501      	bpl.n	800a7a6 <__swbuf_r+0x20>
 800a7a2:	6923      	ldr	r3, [r4, #16]
 800a7a4:	b943      	cbnz	r3, 800a7b8 <__swbuf_r+0x32>
 800a7a6:	4621      	mov	r1, r4
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	f000 f82b 	bl	800a804 <__swsetup_r>
 800a7ae:	b118      	cbz	r0, 800a7b8 <__swbuf_r+0x32>
 800a7b0:	f04f 37ff 	mov.w	r7, #4294967295
 800a7b4:	4638      	mov	r0, r7
 800a7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7b8:	6823      	ldr	r3, [r4, #0]
 800a7ba:	6922      	ldr	r2, [r4, #16]
 800a7bc:	1a98      	subs	r0, r3, r2
 800a7be:	6963      	ldr	r3, [r4, #20]
 800a7c0:	b2f6      	uxtb	r6, r6
 800a7c2:	4283      	cmp	r3, r0
 800a7c4:	4637      	mov	r7, r6
 800a7c6:	dc05      	bgt.n	800a7d4 <__swbuf_r+0x4e>
 800a7c8:	4621      	mov	r1, r4
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	f001 fd16 	bl	800c1fc <_fflush_r>
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	d1ed      	bne.n	800a7b0 <__swbuf_r+0x2a>
 800a7d4:	68a3      	ldr	r3, [r4, #8]
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	60a3      	str	r3, [r4, #8]
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	1c5a      	adds	r2, r3, #1
 800a7de:	6022      	str	r2, [r4, #0]
 800a7e0:	701e      	strb	r6, [r3, #0]
 800a7e2:	6962      	ldr	r2, [r4, #20]
 800a7e4:	1c43      	adds	r3, r0, #1
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d004      	beq.n	800a7f4 <__swbuf_r+0x6e>
 800a7ea:	89a3      	ldrh	r3, [r4, #12]
 800a7ec:	07db      	lsls	r3, r3, #31
 800a7ee:	d5e1      	bpl.n	800a7b4 <__swbuf_r+0x2e>
 800a7f0:	2e0a      	cmp	r6, #10
 800a7f2:	d1df      	bne.n	800a7b4 <__swbuf_r+0x2e>
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	f001 fd00 	bl	800c1fc <_fflush_r>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	d0d9      	beq.n	800a7b4 <__swbuf_r+0x2e>
 800a800:	e7d6      	b.n	800a7b0 <__swbuf_r+0x2a>
	...

0800a804 <__swsetup_r>:
 800a804:	b538      	push	{r3, r4, r5, lr}
 800a806:	4b29      	ldr	r3, [pc, #164]	@ (800a8ac <__swsetup_r+0xa8>)
 800a808:	4605      	mov	r5, r0
 800a80a:	6818      	ldr	r0, [r3, #0]
 800a80c:	460c      	mov	r4, r1
 800a80e:	b118      	cbz	r0, 800a818 <__swsetup_r+0x14>
 800a810:	6a03      	ldr	r3, [r0, #32]
 800a812:	b90b      	cbnz	r3, 800a818 <__swsetup_r+0x14>
 800a814:	f7ff fece 	bl	800a5b4 <__sinit>
 800a818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a81c:	0719      	lsls	r1, r3, #28
 800a81e:	d422      	bmi.n	800a866 <__swsetup_r+0x62>
 800a820:	06da      	lsls	r2, r3, #27
 800a822:	d407      	bmi.n	800a834 <__swsetup_r+0x30>
 800a824:	2209      	movs	r2, #9
 800a826:	602a      	str	r2, [r5, #0]
 800a828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a82c:	81a3      	strh	r3, [r4, #12]
 800a82e:	f04f 30ff 	mov.w	r0, #4294967295
 800a832:	e033      	b.n	800a89c <__swsetup_r+0x98>
 800a834:	0758      	lsls	r0, r3, #29
 800a836:	d512      	bpl.n	800a85e <__swsetup_r+0x5a>
 800a838:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a83a:	b141      	cbz	r1, 800a84e <__swsetup_r+0x4a>
 800a83c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a840:	4299      	cmp	r1, r3
 800a842:	d002      	beq.n	800a84a <__swsetup_r+0x46>
 800a844:	4628      	mov	r0, r5
 800a846:	f000 fe99 	bl	800b57c <_free_r>
 800a84a:	2300      	movs	r3, #0
 800a84c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a84e:	89a3      	ldrh	r3, [r4, #12]
 800a850:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a854:	81a3      	strh	r3, [r4, #12]
 800a856:	2300      	movs	r3, #0
 800a858:	6063      	str	r3, [r4, #4]
 800a85a:	6923      	ldr	r3, [r4, #16]
 800a85c:	6023      	str	r3, [r4, #0]
 800a85e:	89a3      	ldrh	r3, [r4, #12]
 800a860:	f043 0308 	orr.w	r3, r3, #8
 800a864:	81a3      	strh	r3, [r4, #12]
 800a866:	6923      	ldr	r3, [r4, #16]
 800a868:	b94b      	cbnz	r3, 800a87e <__swsetup_r+0x7a>
 800a86a:	89a3      	ldrh	r3, [r4, #12]
 800a86c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a874:	d003      	beq.n	800a87e <__swsetup_r+0x7a>
 800a876:	4621      	mov	r1, r4
 800a878:	4628      	mov	r0, r5
 800a87a:	f001 fd0d 	bl	800c298 <__smakebuf_r>
 800a87e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a882:	f013 0201 	ands.w	r2, r3, #1
 800a886:	d00a      	beq.n	800a89e <__swsetup_r+0x9a>
 800a888:	2200      	movs	r2, #0
 800a88a:	60a2      	str	r2, [r4, #8]
 800a88c:	6962      	ldr	r2, [r4, #20]
 800a88e:	4252      	negs	r2, r2
 800a890:	61a2      	str	r2, [r4, #24]
 800a892:	6922      	ldr	r2, [r4, #16]
 800a894:	b942      	cbnz	r2, 800a8a8 <__swsetup_r+0xa4>
 800a896:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a89a:	d1c5      	bne.n	800a828 <__swsetup_r+0x24>
 800a89c:	bd38      	pop	{r3, r4, r5, pc}
 800a89e:	0799      	lsls	r1, r3, #30
 800a8a0:	bf58      	it	pl
 800a8a2:	6962      	ldrpl	r2, [r4, #20]
 800a8a4:	60a2      	str	r2, [r4, #8]
 800a8a6:	e7f4      	b.n	800a892 <__swsetup_r+0x8e>
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	e7f7      	b.n	800a89c <__swsetup_r+0x98>
 800a8ac:	2400001c 	.word	0x2400001c

0800a8b0 <memset>:
 800a8b0:	4402      	add	r2, r0
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d100      	bne.n	800a8ba <memset+0xa>
 800a8b8:	4770      	bx	lr
 800a8ba:	f803 1b01 	strb.w	r1, [r3], #1
 800a8be:	e7f9      	b.n	800a8b4 <memset+0x4>

0800a8c0 <_localeconv_r>:
 800a8c0:	4800      	ldr	r0, [pc, #0]	@ (800a8c4 <_localeconv_r+0x4>)
 800a8c2:	4770      	bx	lr
 800a8c4:	2400015c 	.word	0x2400015c

0800a8c8 <_close_r>:
 800a8c8:	b538      	push	{r3, r4, r5, lr}
 800a8ca:	4d06      	ldr	r5, [pc, #24]	@ (800a8e4 <_close_r+0x1c>)
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	4608      	mov	r0, r1
 800a8d2:	602b      	str	r3, [r5, #0]
 800a8d4:	f7f6 fe01 	bl	80014da <_close>
 800a8d8:	1c43      	adds	r3, r0, #1
 800a8da:	d102      	bne.n	800a8e2 <_close_r+0x1a>
 800a8dc:	682b      	ldr	r3, [r5, #0]
 800a8de:	b103      	cbz	r3, 800a8e2 <_close_r+0x1a>
 800a8e0:	6023      	str	r3, [r4, #0]
 800a8e2:	bd38      	pop	{r3, r4, r5, pc}
 800a8e4:	240004c8 	.word	0x240004c8

0800a8e8 <_lseek_r>:
 800a8e8:	b538      	push	{r3, r4, r5, lr}
 800a8ea:	4d07      	ldr	r5, [pc, #28]	@ (800a908 <_lseek_r+0x20>)
 800a8ec:	4604      	mov	r4, r0
 800a8ee:	4608      	mov	r0, r1
 800a8f0:	4611      	mov	r1, r2
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	602a      	str	r2, [r5, #0]
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	f7f6 fe16 	bl	8001528 <_lseek>
 800a8fc:	1c43      	adds	r3, r0, #1
 800a8fe:	d102      	bne.n	800a906 <_lseek_r+0x1e>
 800a900:	682b      	ldr	r3, [r5, #0]
 800a902:	b103      	cbz	r3, 800a906 <_lseek_r+0x1e>
 800a904:	6023      	str	r3, [r4, #0]
 800a906:	bd38      	pop	{r3, r4, r5, pc}
 800a908:	240004c8 	.word	0x240004c8

0800a90c <_read_r>:
 800a90c:	b538      	push	{r3, r4, r5, lr}
 800a90e:	4d07      	ldr	r5, [pc, #28]	@ (800a92c <_read_r+0x20>)
 800a910:	4604      	mov	r4, r0
 800a912:	4608      	mov	r0, r1
 800a914:	4611      	mov	r1, r2
 800a916:	2200      	movs	r2, #0
 800a918:	602a      	str	r2, [r5, #0]
 800a91a:	461a      	mov	r2, r3
 800a91c:	f7f6 fdc0 	bl	80014a0 <_read>
 800a920:	1c43      	adds	r3, r0, #1
 800a922:	d102      	bne.n	800a92a <_read_r+0x1e>
 800a924:	682b      	ldr	r3, [r5, #0]
 800a926:	b103      	cbz	r3, 800a92a <_read_r+0x1e>
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	bd38      	pop	{r3, r4, r5, pc}
 800a92c:	240004c8 	.word	0x240004c8

0800a930 <_write_r>:
 800a930:	b538      	push	{r3, r4, r5, lr}
 800a932:	4d07      	ldr	r5, [pc, #28]	@ (800a950 <_write_r+0x20>)
 800a934:	4604      	mov	r4, r0
 800a936:	4608      	mov	r0, r1
 800a938:	4611      	mov	r1, r2
 800a93a:	2200      	movs	r2, #0
 800a93c:	602a      	str	r2, [r5, #0]
 800a93e:	461a      	mov	r2, r3
 800a940:	f7f5 fff2 	bl	8000928 <_write>
 800a944:	1c43      	adds	r3, r0, #1
 800a946:	d102      	bne.n	800a94e <_write_r+0x1e>
 800a948:	682b      	ldr	r3, [r5, #0]
 800a94a:	b103      	cbz	r3, 800a94e <_write_r+0x1e>
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	bd38      	pop	{r3, r4, r5, pc}
 800a950:	240004c8 	.word	0x240004c8

0800a954 <__errno>:
 800a954:	4b01      	ldr	r3, [pc, #4]	@ (800a95c <__errno+0x8>)
 800a956:	6818      	ldr	r0, [r3, #0]
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	2400001c 	.word	0x2400001c

0800a960 <__libc_init_array>:
 800a960:	b570      	push	{r4, r5, r6, lr}
 800a962:	4d0d      	ldr	r5, [pc, #52]	@ (800a998 <__libc_init_array+0x38>)
 800a964:	4c0d      	ldr	r4, [pc, #52]	@ (800a99c <__libc_init_array+0x3c>)
 800a966:	1b64      	subs	r4, r4, r5
 800a968:	10a4      	asrs	r4, r4, #2
 800a96a:	2600      	movs	r6, #0
 800a96c:	42a6      	cmp	r6, r4
 800a96e:	d109      	bne.n	800a984 <__libc_init_array+0x24>
 800a970:	4d0b      	ldr	r5, [pc, #44]	@ (800a9a0 <__libc_init_array+0x40>)
 800a972:	4c0c      	ldr	r4, [pc, #48]	@ (800a9a4 <__libc_init_array+0x44>)
 800a974:	f001 ff5a 	bl	800c82c <_init>
 800a978:	1b64      	subs	r4, r4, r5
 800a97a:	10a4      	asrs	r4, r4, #2
 800a97c:	2600      	movs	r6, #0
 800a97e:	42a6      	cmp	r6, r4
 800a980:	d105      	bne.n	800a98e <__libc_init_array+0x2e>
 800a982:	bd70      	pop	{r4, r5, r6, pc}
 800a984:	f855 3b04 	ldr.w	r3, [r5], #4
 800a988:	4798      	blx	r3
 800a98a:	3601      	adds	r6, #1
 800a98c:	e7ee      	b.n	800a96c <__libc_init_array+0xc>
 800a98e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a992:	4798      	blx	r3
 800a994:	3601      	adds	r6, #1
 800a996:	e7f2      	b.n	800a97e <__libc_init_array+0x1e>
 800a998:	0800d6b4 	.word	0x0800d6b4
 800a99c:	0800d6b4 	.word	0x0800d6b4
 800a9a0:	0800d6b4 	.word	0x0800d6b4
 800a9a4:	0800d6b8 	.word	0x0800d6b8

0800a9a8 <__retarget_lock_init_recursive>:
 800a9a8:	4770      	bx	lr

0800a9aa <__retarget_lock_acquire_recursive>:
 800a9aa:	4770      	bx	lr

0800a9ac <__retarget_lock_release_recursive>:
 800a9ac:	4770      	bx	lr

0800a9ae <quorem>:
 800a9ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b2:	6903      	ldr	r3, [r0, #16]
 800a9b4:	690c      	ldr	r4, [r1, #16]
 800a9b6:	42a3      	cmp	r3, r4
 800a9b8:	4607      	mov	r7, r0
 800a9ba:	db7e      	blt.n	800aaba <quorem+0x10c>
 800a9bc:	3c01      	subs	r4, #1
 800a9be:	f101 0814 	add.w	r8, r1, #20
 800a9c2:	00a3      	lsls	r3, r4, #2
 800a9c4:	f100 0514 	add.w	r5, r0, #20
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9ce:	9301      	str	r3, [sp, #4]
 800a9d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a9d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a9e0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a9e4:	d32e      	bcc.n	800aa44 <quorem+0x96>
 800a9e6:	f04f 0a00 	mov.w	sl, #0
 800a9ea:	46c4      	mov	ip, r8
 800a9ec:	46ae      	mov	lr, r5
 800a9ee:	46d3      	mov	fp, sl
 800a9f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a9f4:	b298      	uxth	r0, r3
 800a9f6:	fb06 a000 	mla	r0, r6, r0, sl
 800a9fa:	0c02      	lsrs	r2, r0, #16
 800a9fc:	0c1b      	lsrs	r3, r3, #16
 800a9fe:	fb06 2303 	mla	r3, r6, r3, r2
 800aa02:	f8de 2000 	ldr.w	r2, [lr]
 800aa06:	b280      	uxth	r0, r0
 800aa08:	b292      	uxth	r2, r2
 800aa0a:	1a12      	subs	r2, r2, r0
 800aa0c:	445a      	add	r2, fp
 800aa0e:	f8de 0000 	ldr.w	r0, [lr]
 800aa12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aa1c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aa20:	b292      	uxth	r2, r2
 800aa22:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aa26:	45e1      	cmp	r9, ip
 800aa28:	f84e 2b04 	str.w	r2, [lr], #4
 800aa2c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aa30:	d2de      	bcs.n	800a9f0 <quorem+0x42>
 800aa32:	9b00      	ldr	r3, [sp, #0]
 800aa34:	58eb      	ldr	r3, [r5, r3]
 800aa36:	b92b      	cbnz	r3, 800aa44 <quorem+0x96>
 800aa38:	9b01      	ldr	r3, [sp, #4]
 800aa3a:	3b04      	subs	r3, #4
 800aa3c:	429d      	cmp	r5, r3
 800aa3e:	461a      	mov	r2, r3
 800aa40:	d32f      	bcc.n	800aaa2 <quorem+0xf4>
 800aa42:	613c      	str	r4, [r7, #16]
 800aa44:	4638      	mov	r0, r7
 800aa46:	f001 f90b 	bl	800bc60 <__mcmp>
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	db25      	blt.n	800aa9a <quorem+0xec>
 800aa4e:	4629      	mov	r1, r5
 800aa50:	2000      	movs	r0, #0
 800aa52:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa56:	f8d1 c000 	ldr.w	ip, [r1]
 800aa5a:	fa1f fe82 	uxth.w	lr, r2
 800aa5e:	fa1f f38c 	uxth.w	r3, ip
 800aa62:	eba3 030e 	sub.w	r3, r3, lr
 800aa66:	4403      	add	r3, r0
 800aa68:	0c12      	lsrs	r2, r2, #16
 800aa6a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aa6e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa78:	45c1      	cmp	r9, r8
 800aa7a:	f841 3b04 	str.w	r3, [r1], #4
 800aa7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aa82:	d2e6      	bcs.n	800aa52 <quorem+0xa4>
 800aa84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa8c:	b922      	cbnz	r2, 800aa98 <quorem+0xea>
 800aa8e:	3b04      	subs	r3, #4
 800aa90:	429d      	cmp	r5, r3
 800aa92:	461a      	mov	r2, r3
 800aa94:	d30b      	bcc.n	800aaae <quorem+0x100>
 800aa96:	613c      	str	r4, [r7, #16]
 800aa98:	3601      	adds	r6, #1
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	b003      	add	sp, #12
 800aa9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa2:	6812      	ldr	r2, [r2, #0]
 800aaa4:	3b04      	subs	r3, #4
 800aaa6:	2a00      	cmp	r2, #0
 800aaa8:	d1cb      	bne.n	800aa42 <quorem+0x94>
 800aaaa:	3c01      	subs	r4, #1
 800aaac:	e7c6      	b.n	800aa3c <quorem+0x8e>
 800aaae:	6812      	ldr	r2, [r2, #0]
 800aab0:	3b04      	subs	r3, #4
 800aab2:	2a00      	cmp	r2, #0
 800aab4:	d1ef      	bne.n	800aa96 <quorem+0xe8>
 800aab6:	3c01      	subs	r4, #1
 800aab8:	e7ea      	b.n	800aa90 <quorem+0xe2>
 800aaba:	2000      	movs	r0, #0
 800aabc:	e7ee      	b.n	800aa9c <quorem+0xee>
	...

0800aac0 <_dtoa_r>:
 800aac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac4:	ed2d 8b02 	vpush	{d8}
 800aac8:	69c7      	ldr	r7, [r0, #28]
 800aaca:	b091      	sub	sp, #68	@ 0x44
 800aacc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aad0:	ec55 4b10 	vmov	r4, r5, d0
 800aad4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800aad6:	9107      	str	r1, [sp, #28]
 800aad8:	4681      	mov	r9, r0
 800aada:	9209      	str	r2, [sp, #36]	@ 0x24
 800aadc:	930d      	str	r3, [sp, #52]	@ 0x34
 800aade:	b97f      	cbnz	r7, 800ab00 <_dtoa_r+0x40>
 800aae0:	2010      	movs	r0, #16
 800aae2:	f000 fd95 	bl	800b610 <malloc>
 800aae6:	4602      	mov	r2, r0
 800aae8:	f8c9 001c 	str.w	r0, [r9, #28]
 800aaec:	b920      	cbnz	r0, 800aaf8 <_dtoa_r+0x38>
 800aaee:	4ba0      	ldr	r3, [pc, #640]	@ (800ad70 <_dtoa_r+0x2b0>)
 800aaf0:	21ef      	movs	r1, #239	@ 0xef
 800aaf2:	48a0      	ldr	r0, [pc, #640]	@ (800ad74 <_dtoa_r+0x2b4>)
 800aaf4:	f001 fc4c 	bl	800c390 <__assert_func>
 800aaf8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aafc:	6007      	str	r7, [r0, #0]
 800aafe:	60c7      	str	r7, [r0, #12]
 800ab00:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab04:	6819      	ldr	r1, [r3, #0]
 800ab06:	b159      	cbz	r1, 800ab20 <_dtoa_r+0x60>
 800ab08:	685a      	ldr	r2, [r3, #4]
 800ab0a:	604a      	str	r2, [r1, #4]
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	4093      	lsls	r3, r2
 800ab10:	608b      	str	r3, [r1, #8]
 800ab12:	4648      	mov	r0, r9
 800ab14:	f000 fe72 	bl	800b7fc <_Bfree>
 800ab18:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	601a      	str	r2, [r3, #0]
 800ab20:	1e2b      	subs	r3, r5, #0
 800ab22:	bfbb      	ittet	lt
 800ab24:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ab28:	9303      	strlt	r3, [sp, #12]
 800ab2a:	2300      	movge	r3, #0
 800ab2c:	2201      	movlt	r2, #1
 800ab2e:	bfac      	ite	ge
 800ab30:	6033      	strge	r3, [r6, #0]
 800ab32:	6032      	strlt	r2, [r6, #0]
 800ab34:	4b90      	ldr	r3, [pc, #576]	@ (800ad78 <_dtoa_r+0x2b8>)
 800ab36:	9e03      	ldr	r6, [sp, #12]
 800ab38:	43b3      	bics	r3, r6
 800ab3a:	d110      	bne.n	800ab5e <_dtoa_r+0x9e>
 800ab3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab3e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ab42:	6013      	str	r3, [r2, #0]
 800ab44:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800ab48:	4323      	orrs	r3, r4
 800ab4a:	f000 84e6 	beq.w	800b51a <_dtoa_r+0xa5a>
 800ab4e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ab50:	4f8a      	ldr	r7, [pc, #552]	@ (800ad7c <_dtoa_r+0x2bc>)
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	f000 84e8 	beq.w	800b528 <_dtoa_r+0xa68>
 800ab58:	1cfb      	adds	r3, r7, #3
 800ab5a:	f000 bce3 	b.w	800b524 <_dtoa_r+0xa64>
 800ab5e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ab62:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ab66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab6a:	d10a      	bne.n	800ab82 <_dtoa_r+0xc2>
 800ab6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab6e:	2301      	movs	r3, #1
 800ab70:	6013      	str	r3, [r2, #0]
 800ab72:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ab74:	b113      	cbz	r3, 800ab7c <_dtoa_r+0xbc>
 800ab76:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ab78:	4b81      	ldr	r3, [pc, #516]	@ (800ad80 <_dtoa_r+0x2c0>)
 800ab7a:	6013      	str	r3, [r2, #0]
 800ab7c:	4f81      	ldr	r7, [pc, #516]	@ (800ad84 <_dtoa_r+0x2c4>)
 800ab7e:	f000 bcd3 	b.w	800b528 <_dtoa_r+0xa68>
 800ab82:	aa0e      	add	r2, sp, #56	@ 0x38
 800ab84:	a90f      	add	r1, sp, #60	@ 0x3c
 800ab86:	4648      	mov	r0, r9
 800ab88:	eeb0 0b48 	vmov.f64	d0, d8
 800ab8c:	f001 f918 	bl	800bdc0 <__d2b>
 800ab90:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800ab94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab96:	9001      	str	r0, [sp, #4]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d045      	beq.n	800ac28 <_dtoa_r+0x168>
 800ab9c:	eeb0 7b48 	vmov.f64	d7, d8
 800aba0:	ee18 1a90 	vmov	r1, s17
 800aba4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800aba8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800abac:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800abb0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800abb4:	2500      	movs	r5, #0
 800abb6:	ee07 1a90 	vmov	s15, r1
 800abba:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800abbe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ad58 <_dtoa_r+0x298>
 800abc2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800abc6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ad60 <_dtoa_r+0x2a0>
 800abca:	eea7 6b05 	vfma.f64	d6, d7, d5
 800abce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ad68 <_dtoa_r+0x2a8>
 800abd2:	ee07 3a90 	vmov	s15, r3
 800abd6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800abda:	eeb0 7b46 	vmov.f64	d7, d6
 800abde:	eea4 7b05 	vfma.f64	d7, d4, d5
 800abe2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800abe6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800abea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abee:	ee16 8a90 	vmov	r8, s13
 800abf2:	d508      	bpl.n	800ac06 <_dtoa_r+0x146>
 800abf4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800abf8:	eeb4 6b47 	vcmp.f64	d6, d7
 800abfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac00:	bf18      	it	ne
 800ac02:	f108 38ff 	addne.w	r8, r8, #4294967295
 800ac06:	f1b8 0f16 	cmp.w	r8, #22
 800ac0a:	d82b      	bhi.n	800ac64 <_dtoa_r+0x1a4>
 800ac0c:	495e      	ldr	r1, [pc, #376]	@ (800ad88 <_dtoa_r+0x2c8>)
 800ac0e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800ac12:	ed91 7b00 	vldr	d7, [r1]
 800ac16:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ac1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac1e:	d501      	bpl.n	800ac24 <_dtoa_r+0x164>
 800ac20:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac24:	2100      	movs	r1, #0
 800ac26:	e01e      	b.n	800ac66 <_dtoa_r+0x1a6>
 800ac28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac2a:	4413      	add	r3, r2
 800ac2c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800ac30:	2920      	cmp	r1, #32
 800ac32:	bfc1      	itttt	gt
 800ac34:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ac38:	408e      	lslgt	r6, r1
 800ac3a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ac3e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ac42:	bfd6      	itet	le
 800ac44:	f1c1 0120 	rsble	r1, r1, #32
 800ac48:	4331      	orrgt	r1, r6
 800ac4a:	fa04 f101 	lslle.w	r1, r4, r1
 800ac4e:	ee07 1a90 	vmov	s15, r1
 800ac52:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ac56:	3b01      	subs	r3, #1
 800ac58:	ee17 1a90 	vmov	r1, s15
 800ac5c:	2501      	movs	r5, #1
 800ac5e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ac62:	e7a8      	b.n	800abb6 <_dtoa_r+0xf6>
 800ac64:	2101      	movs	r1, #1
 800ac66:	1ad2      	subs	r2, r2, r3
 800ac68:	1e53      	subs	r3, r2, #1
 800ac6a:	9306      	str	r3, [sp, #24]
 800ac6c:	bf45      	ittet	mi
 800ac6e:	f1c2 0301 	rsbmi	r3, r2, #1
 800ac72:	9304      	strmi	r3, [sp, #16]
 800ac74:	2300      	movpl	r3, #0
 800ac76:	2300      	movmi	r3, #0
 800ac78:	bf4c      	ite	mi
 800ac7a:	9306      	strmi	r3, [sp, #24]
 800ac7c:	9304      	strpl	r3, [sp, #16]
 800ac7e:	f1b8 0f00 	cmp.w	r8, #0
 800ac82:	910c      	str	r1, [sp, #48]	@ 0x30
 800ac84:	db18      	blt.n	800acb8 <_dtoa_r+0x1f8>
 800ac86:	9b06      	ldr	r3, [sp, #24]
 800ac88:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ac8c:	4443      	add	r3, r8
 800ac8e:	9306      	str	r3, [sp, #24]
 800ac90:	2300      	movs	r3, #0
 800ac92:	9a07      	ldr	r2, [sp, #28]
 800ac94:	2a09      	cmp	r2, #9
 800ac96:	d845      	bhi.n	800ad24 <_dtoa_r+0x264>
 800ac98:	2a05      	cmp	r2, #5
 800ac9a:	bfc4      	itt	gt
 800ac9c:	3a04      	subgt	r2, #4
 800ac9e:	9207      	strgt	r2, [sp, #28]
 800aca0:	9a07      	ldr	r2, [sp, #28]
 800aca2:	f1a2 0202 	sub.w	r2, r2, #2
 800aca6:	bfcc      	ite	gt
 800aca8:	2400      	movgt	r4, #0
 800acaa:	2401      	movle	r4, #1
 800acac:	2a03      	cmp	r2, #3
 800acae:	d844      	bhi.n	800ad3a <_dtoa_r+0x27a>
 800acb0:	e8df f002 	tbb	[pc, r2]
 800acb4:	0b173634 	.word	0x0b173634
 800acb8:	9b04      	ldr	r3, [sp, #16]
 800acba:	2200      	movs	r2, #0
 800acbc:	eba3 0308 	sub.w	r3, r3, r8
 800acc0:	9304      	str	r3, [sp, #16]
 800acc2:	920a      	str	r2, [sp, #40]	@ 0x28
 800acc4:	f1c8 0300 	rsb	r3, r8, #0
 800acc8:	e7e3      	b.n	800ac92 <_dtoa_r+0x1d2>
 800acca:	2201      	movs	r2, #1
 800accc:	9208      	str	r2, [sp, #32]
 800acce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acd0:	eb08 0b02 	add.w	fp, r8, r2
 800acd4:	f10b 0a01 	add.w	sl, fp, #1
 800acd8:	4652      	mov	r2, sl
 800acda:	2a01      	cmp	r2, #1
 800acdc:	bfb8      	it	lt
 800acde:	2201      	movlt	r2, #1
 800ace0:	e006      	b.n	800acf0 <_dtoa_r+0x230>
 800ace2:	2201      	movs	r2, #1
 800ace4:	9208      	str	r2, [sp, #32]
 800ace6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ace8:	2a00      	cmp	r2, #0
 800acea:	dd29      	ble.n	800ad40 <_dtoa_r+0x280>
 800acec:	4693      	mov	fp, r2
 800acee:	4692      	mov	sl, r2
 800acf0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800acf4:	2100      	movs	r1, #0
 800acf6:	2004      	movs	r0, #4
 800acf8:	f100 0614 	add.w	r6, r0, #20
 800acfc:	4296      	cmp	r6, r2
 800acfe:	d926      	bls.n	800ad4e <_dtoa_r+0x28e>
 800ad00:	6079      	str	r1, [r7, #4]
 800ad02:	4648      	mov	r0, r9
 800ad04:	9305      	str	r3, [sp, #20]
 800ad06:	f000 fd39 	bl	800b77c <_Balloc>
 800ad0a:	9b05      	ldr	r3, [sp, #20]
 800ad0c:	4607      	mov	r7, r0
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	d13e      	bne.n	800ad90 <_dtoa_r+0x2d0>
 800ad12:	4b1e      	ldr	r3, [pc, #120]	@ (800ad8c <_dtoa_r+0x2cc>)
 800ad14:	4602      	mov	r2, r0
 800ad16:	f240 11af 	movw	r1, #431	@ 0x1af
 800ad1a:	e6ea      	b.n	800aaf2 <_dtoa_r+0x32>
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	e7e1      	b.n	800ace4 <_dtoa_r+0x224>
 800ad20:	2200      	movs	r2, #0
 800ad22:	e7d3      	b.n	800accc <_dtoa_r+0x20c>
 800ad24:	2401      	movs	r4, #1
 800ad26:	2200      	movs	r2, #0
 800ad28:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ad2c:	f04f 3bff 	mov.w	fp, #4294967295
 800ad30:	2100      	movs	r1, #0
 800ad32:	46da      	mov	sl, fp
 800ad34:	2212      	movs	r2, #18
 800ad36:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad38:	e7da      	b.n	800acf0 <_dtoa_r+0x230>
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	9208      	str	r2, [sp, #32]
 800ad3e:	e7f5      	b.n	800ad2c <_dtoa_r+0x26c>
 800ad40:	f04f 0b01 	mov.w	fp, #1
 800ad44:	46da      	mov	sl, fp
 800ad46:	465a      	mov	r2, fp
 800ad48:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800ad4c:	e7d0      	b.n	800acf0 <_dtoa_r+0x230>
 800ad4e:	3101      	adds	r1, #1
 800ad50:	0040      	lsls	r0, r0, #1
 800ad52:	e7d1      	b.n	800acf8 <_dtoa_r+0x238>
 800ad54:	f3af 8000 	nop.w
 800ad58:	636f4361 	.word	0x636f4361
 800ad5c:	3fd287a7 	.word	0x3fd287a7
 800ad60:	8b60c8b3 	.word	0x8b60c8b3
 800ad64:	3fc68a28 	.word	0x3fc68a28
 800ad68:	509f79fb 	.word	0x509f79fb
 800ad6c:	3fd34413 	.word	0x3fd34413
 800ad70:	0800d33d 	.word	0x0800d33d
 800ad74:	0800d354 	.word	0x0800d354
 800ad78:	7ff00000 	.word	0x7ff00000
 800ad7c:	0800d339 	.word	0x0800d339
 800ad80:	0800d30d 	.word	0x0800d30d
 800ad84:	0800d30c 	.word	0x0800d30c
 800ad88:	0800d4a8 	.word	0x0800d4a8
 800ad8c:	0800d3ac 	.word	0x0800d3ac
 800ad90:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800ad94:	f1ba 0f0e 	cmp.w	sl, #14
 800ad98:	6010      	str	r0, [r2, #0]
 800ad9a:	d86e      	bhi.n	800ae7a <_dtoa_r+0x3ba>
 800ad9c:	2c00      	cmp	r4, #0
 800ad9e:	d06c      	beq.n	800ae7a <_dtoa_r+0x3ba>
 800ada0:	f1b8 0f00 	cmp.w	r8, #0
 800ada4:	f340 80b4 	ble.w	800af10 <_dtoa_r+0x450>
 800ada8:	4ac8      	ldr	r2, [pc, #800]	@ (800b0cc <_dtoa_r+0x60c>)
 800adaa:	f008 010f 	and.w	r1, r8, #15
 800adae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800adb2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800adb6:	ed92 7b00 	vldr	d7, [r2]
 800adba:	ea4f 1128 	mov.w	r1, r8, asr #4
 800adbe:	f000 809b 	beq.w	800aef8 <_dtoa_r+0x438>
 800adc2:	4ac3      	ldr	r2, [pc, #780]	@ (800b0d0 <_dtoa_r+0x610>)
 800adc4:	ed92 6b08 	vldr	d6, [r2, #32]
 800adc8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800adcc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800add0:	f001 010f 	and.w	r1, r1, #15
 800add4:	2203      	movs	r2, #3
 800add6:	48be      	ldr	r0, [pc, #760]	@ (800b0d0 <_dtoa_r+0x610>)
 800add8:	2900      	cmp	r1, #0
 800adda:	f040 808f 	bne.w	800aefc <_dtoa_r+0x43c>
 800adde:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ade2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ade6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800adea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800adec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800adf0:	2900      	cmp	r1, #0
 800adf2:	f000 80b3 	beq.w	800af5c <_dtoa_r+0x49c>
 800adf6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800adfa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800adfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae02:	f140 80ab 	bpl.w	800af5c <_dtoa_r+0x49c>
 800ae06:	f1ba 0f00 	cmp.w	sl, #0
 800ae0a:	f000 80a7 	beq.w	800af5c <_dtoa_r+0x49c>
 800ae0e:	f1bb 0f00 	cmp.w	fp, #0
 800ae12:	dd30      	ble.n	800ae76 <_dtoa_r+0x3b6>
 800ae14:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ae18:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ae1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae20:	f108 31ff 	add.w	r1, r8, #4294967295
 800ae24:	9105      	str	r1, [sp, #20]
 800ae26:	3201      	adds	r2, #1
 800ae28:	465c      	mov	r4, fp
 800ae2a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ae2e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ae32:	ee07 2a90 	vmov	s15, r2
 800ae36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ae3a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ae3e:	ee15 2a90 	vmov	r2, s11
 800ae42:	ec51 0b15 	vmov	r0, r1, d5
 800ae46:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ae4a:	2c00      	cmp	r4, #0
 800ae4c:	f040 808a 	bne.w	800af64 <_dtoa_r+0x4a4>
 800ae50:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ae54:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ae58:	ec41 0b17 	vmov	d7, r0, r1
 800ae5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ae60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae64:	f300 826a 	bgt.w	800b33c <_dtoa_r+0x87c>
 800ae68:	eeb1 7b47 	vneg.f64	d7, d7
 800ae6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ae70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae74:	d423      	bmi.n	800aebe <_dtoa_r+0x3fe>
 800ae76:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ae7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ae7c:	2a00      	cmp	r2, #0
 800ae7e:	f2c0 8129 	blt.w	800b0d4 <_dtoa_r+0x614>
 800ae82:	f1b8 0f0e 	cmp.w	r8, #14
 800ae86:	f300 8125 	bgt.w	800b0d4 <_dtoa_r+0x614>
 800ae8a:	4b90      	ldr	r3, [pc, #576]	@ (800b0cc <_dtoa_r+0x60c>)
 800ae8c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ae90:	ed93 6b00 	vldr	d6, [r3]
 800ae94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	f280 80c8 	bge.w	800b02c <_dtoa_r+0x56c>
 800ae9c:	f1ba 0f00 	cmp.w	sl, #0
 800aea0:	f300 80c4 	bgt.w	800b02c <_dtoa_r+0x56c>
 800aea4:	d10b      	bne.n	800aebe <_dtoa_r+0x3fe>
 800aea6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800aeaa:	ee26 6b07 	vmul.f64	d6, d6, d7
 800aeae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aeb2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aeb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeba:	f2c0 823c 	blt.w	800b336 <_dtoa_r+0x876>
 800aebe:	2400      	movs	r4, #0
 800aec0:	4625      	mov	r5, r4
 800aec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aec4:	43db      	mvns	r3, r3
 800aec6:	9305      	str	r3, [sp, #20]
 800aec8:	463e      	mov	r6, r7
 800aeca:	f04f 0800 	mov.w	r8, #0
 800aece:	4621      	mov	r1, r4
 800aed0:	4648      	mov	r0, r9
 800aed2:	f000 fc93 	bl	800b7fc <_Bfree>
 800aed6:	2d00      	cmp	r5, #0
 800aed8:	f000 80a2 	beq.w	800b020 <_dtoa_r+0x560>
 800aedc:	f1b8 0f00 	cmp.w	r8, #0
 800aee0:	d005      	beq.n	800aeee <_dtoa_r+0x42e>
 800aee2:	45a8      	cmp	r8, r5
 800aee4:	d003      	beq.n	800aeee <_dtoa_r+0x42e>
 800aee6:	4641      	mov	r1, r8
 800aee8:	4648      	mov	r0, r9
 800aeea:	f000 fc87 	bl	800b7fc <_Bfree>
 800aeee:	4629      	mov	r1, r5
 800aef0:	4648      	mov	r0, r9
 800aef2:	f000 fc83 	bl	800b7fc <_Bfree>
 800aef6:	e093      	b.n	800b020 <_dtoa_r+0x560>
 800aef8:	2202      	movs	r2, #2
 800aefa:	e76c      	b.n	800add6 <_dtoa_r+0x316>
 800aefc:	07cc      	lsls	r4, r1, #31
 800aefe:	d504      	bpl.n	800af0a <_dtoa_r+0x44a>
 800af00:	ed90 6b00 	vldr	d6, [r0]
 800af04:	3201      	adds	r2, #1
 800af06:	ee27 7b06 	vmul.f64	d7, d7, d6
 800af0a:	1049      	asrs	r1, r1, #1
 800af0c:	3008      	adds	r0, #8
 800af0e:	e763      	b.n	800add8 <_dtoa_r+0x318>
 800af10:	d022      	beq.n	800af58 <_dtoa_r+0x498>
 800af12:	f1c8 0100 	rsb	r1, r8, #0
 800af16:	4a6d      	ldr	r2, [pc, #436]	@ (800b0cc <_dtoa_r+0x60c>)
 800af18:	f001 000f 	and.w	r0, r1, #15
 800af1c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800af20:	ed92 7b00 	vldr	d7, [r2]
 800af24:	ee28 7b07 	vmul.f64	d7, d8, d7
 800af28:	ed8d 7b02 	vstr	d7, [sp, #8]
 800af2c:	4868      	ldr	r0, [pc, #416]	@ (800b0d0 <_dtoa_r+0x610>)
 800af2e:	1109      	asrs	r1, r1, #4
 800af30:	2400      	movs	r4, #0
 800af32:	2202      	movs	r2, #2
 800af34:	b929      	cbnz	r1, 800af42 <_dtoa_r+0x482>
 800af36:	2c00      	cmp	r4, #0
 800af38:	f43f af57 	beq.w	800adea <_dtoa_r+0x32a>
 800af3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800af40:	e753      	b.n	800adea <_dtoa_r+0x32a>
 800af42:	07ce      	lsls	r6, r1, #31
 800af44:	d505      	bpl.n	800af52 <_dtoa_r+0x492>
 800af46:	ed90 6b00 	vldr	d6, [r0]
 800af4a:	3201      	adds	r2, #1
 800af4c:	2401      	movs	r4, #1
 800af4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800af52:	1049      	asrs	r1, r1, #1
 800af54:	3008      	adds	r0, #8
 800af56:	e7ed      	b.n	800af34 <_dtoa_r+0x474>
 800af58:	2202      	movs	r2, #2
 800af5a:	e746      	b.n	800adea <_dtoa_r+0x32a>
 800af5c:	f8cd 8014 	str.w	r8, [sp, #20]
 800af60:	4654      	mov	r4, sl
 800af62:	e762      	b.n	800ae2a <_dtoa_r+0x36a>
 800af64:	4a59      	ldr	r2, [pc, #356]	@ (800b0cc <_dtoa_r+0x60c>)
 800af66:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800af6a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800af6e:	9a08      	ldr	r2, [sp, #32]
 800af70:	ec41 0b17 	vmov	d7, r0, r1
 800af74:	443c      	add	r4, r7
 800af76:	b34a      	cbz	r2, 800afcc <_dtoa_r+0x50c>
 800af78:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800af7c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800af80:	463e      	mov	r6, r7
 800af82:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800af86:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800af8a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800af8e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800af92:	ee14 2a90 	vmov	r2, s9
 800af96:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800af9a:	3230      	adds	r2, #48	@ 0x30
 800af9c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800afa0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800afa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afa8:	f806 2b01 	strb.w	r2, [r6], #1
 800afac:	d438      	bmi.n	800b020 <_dtoa_r+0x560>
 800afae:	ee32 5b46 	vsub.f64	d5, d2, d6
 800afb2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800afb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afba:	d46e      	bmi.n	800b09a <_dtoa_r+0x5da>
 800afbc:	42a6      	cmp	r6, r4
 800afbe:	f43f af5a 	beq.w	800ae76 <_dtoa_r+0x3b6>
 800afc2:	ee27 7b03 	vmul.f64	d7, d7, d3
 800afc6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800afca:	e7e0      	b.n	800af8e <_dtoa_r+0x4ce>
 800afcc:	4621      	mov	r1, r4
 800afce:	463e      	mov	r6, r7
 800afd0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800afd4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800afd8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800afdc:	ee14 2a90 	vmov	r2, s9
 800afe0:	3230      	adds	r2, #48	@ 0x30
 800afe2:	f806 2b01 	strb.w	r2, [r6], #1
 800afe6:	42a6      	cmp	r6, r4
 800afe8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800afec:	ee36 6b45 	vsub.f64	d6, d6, d5
 800aff0:	d119      	bne.n	800b026 <_dtoa_r+0x566>
 800aff2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800aff6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800affa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800affe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b002:	dc4a      	bgt.n	800b09a <_dtoa_r+0x5da>
 800b004:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b008:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b010:	f57f af31 	bpl.w	800ae76 <_dtoa_r+0x3b6>
 800b014:	460e      	mov	r6, r1
 800b016:	3901      	subs	r1, #1
 800b018:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b01c:	2b30      	cmp	r3, #48	@ 0x30
 800b01e:	d0f9      	beq.n	800b014 <_dtoa_r+0x554>
 800b020:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b024:	e027      	b.n	800b076 <_dtoa_r+0x5b6>
 800b026:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b02a:	e7d5      	b.n	800afd8 <_dtoa_r+0x518>
 800b02c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b030:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b034:	463e      	mov	r6, r7
 800b036:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b03a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b03e:	ee15 3a10 	vmov	r3, s10
 800b042:	3330      	adds	r3, #48	@ 0x30
 800b044:	f806 3b01 	strb.w	r3, [r6], #1
 800b048:	1bf3      	subs	r3, r6, r7
 800b04a:	459a      	cmp	sl, r3
 800b04c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b050:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b054:	d132      	bne.n	800b0bc <_dtoa_r+0x5fc>
 800b056:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b05a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b062:	dc18      	bgt.n	800b096 <_dtoa_r+0x5d6>
 800b064:	eeb4 7b46 	vcmp.f64	d7, d6
 800b068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b06c:	d103      	bne.n	800b076 <_dtoa_r+0x5b6>
 800b06e:	ee15 3a10 	vmov	r3, s10
 800b072:	07db      	lsls	r3, r3, #31
 800b074:	d40f      	bmi.n	800b096 <_dtoa_r+0x5d6>
 800b076:	9901      	ldr	r1, [sp, #4]
 800b078:	4648      	mov	r0, r9
 800b07a:	f000 fbbf 	bl	800b7fc <_Bfree>
 800b07e:	2300      	movs	r3, #0
 800b080:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b082:	7033      	strb	r3, [r6, #0]
 800b084:	f108 0301 	add.w	r3, r8, #1
 800b088:	6013      	str	r3, [r2, #0]
 800b08a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f000 824b 	beq.w	800b528 <_dtoa_r+0xa68>
 800b092:	601e      	str	r6, [r3, #0]
 800b094:	e248      	b.n	800b528 <_dtoa_r+0xa68>
 800b096:	f8cd 8014 	str.w	r8, [sp, #20]
 800b09a:	4633      	mov	r3, r6
 800b09c:	461e      	mov	r6, r3
 800b09e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0a2:	2a39      	cmp	r2, #57	@ 0x39
 800b0a4:	d106      	bne.n	800b0b4 <_dtoa_r+0x5f4>
 800b0a6:	429f      	cmp	r7, r3
 800b0a8:	d1f8      	bne.n	800b09c <_dtoa_r+0x5dc>
 800b0aa:	9a05      	ldr	r2, [sp, #20]
 800b0ac:	3201      	adds	r2, #1
 800b0ae:	9205      	str	r2, [sp, #20]
 800b0b0:	2230      	movs	r2, #48	@ 0x30
 800b0b2:	703a      	strb	r2, [r7, #0]
 800b0b4:	781a      	ldrb	r2, [r3, #0]
 800b0b6:	3201      	adds	r2, #1
 800b0b8:	701a      	strb	r2, [r3, #0]
 800b0ba:	e7b1      	b.n	800b020 <_dtoa_r+0x560>
 800b0bc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b0c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0c8:	d1b5      	bne.n	800b036 <_dtoa_r+0x576>
 800b0ca:	e7d4      	b.n	800b076 <_dtoa_r+0x5b6>
 800b0cc:	0800d4a8 	.word	0x0800d4a8
 800b0d0:	0800d480 	.word	0x0800d480
 800b0d4:	9908      	ldr	r1, [sp, #32]
 800b0d6:	2900      	cmp	r1, #0
 800b0d8:	f000 80e9 	beq.w	800b2ae <_dtoa_r+0x7ee>
 800b0dc:	9907      	ldr	r1, [sp, #28]
 800b0de:	2901      	cmp	r1, #1
 800b0e0:	f300 80cb 	bgt.w	800b27a <_dtoa_r+0x7ba>
 800b0e4:	2d00      	cmp	r5, #0
 800b0e6:	f000 80c4 	beq.w	800b272 <_dtoa_r+0x7b2>
 800b0ea:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b0ee:	9e04      	ldr	r6, [sp, #16]
 800b0f0:	461c      	mov	r4, r3
 800b0f2:	9305      	str	r3, [sp, #20]
 800b0f4:	9b04      	ldr	r3, [sp, #16]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	9304      	str	r3, [sp, #16]
 800b0fa:	9b06      	ldr	r3, [sp, #24]
 800b0fc:	2101      	movs	r1, #1
 800b0fe:	4413      	add	r3, r2
 800b100:	4648      	mov	r0, r9
 800b102:	9306      	str	r3, [sp, #24]
 800b104:	f000 fc2e 	bl	800b964 <__i2b>
 800b108:	9b05      	ldr	r3, [sp, #20]
 800b10a:	4605      	mov	r5, r0
 800b10c:	b166      	cbz	r6, 800b128 <_dtoa_r+0x668>
 800b10e:	9a06      	ldr	r2, [sp, #24]
 800b110:	2a00      	cmp	r2, #0
 800b112:	dd09      	ble.n	800b128 <_dtoa_r+0x668>
 800b114:	42b2      	cmp	r2, r6
 800b116:	9904      	ldr	r1, [sp, #16]
 800b118:	bfa8      	it	ge
 800b11a:	4632      	movge	r2, r6
 800b11c:	1a89      	subs	r1, r1, r2
 800b11e:	9104      	str	r1, [sp, #16]
 800b120:	9906      	ldr	r1, [sp, #24]
 800b122:	1ab6      	subs	r6, r6, r2
 800b124:	1a8a      	subs	r2, r1, r2
 800b126:	9206      	str	r2, [sp, #24]
 800b128:	b30b      	cbz	r3, 800b16e <_dtoa_r+0x6ae>
 800b12a:	9a08      	ldr	r2, [sp, #32]
 800b12c:	2a00      	cmp	r2, #0
 800b12e:	f000 80c5 	beq.w	800b2bc <_dtoa_r+0x7fc>
 800b132:	2c00      	cmp	r4, #0
 800b134:	f000 80bf 	beq.w	800b2b6 <_dtoa_r+0x7f6>
 800b138:	4629      	mov	r1, r5
 800b13a:	4622      	mov	r2, r4
 800b13c:	4648      	mov	r0, r9
 800b13e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b140:	f000 fcc8 	bl	800bad4 <__pow5mult>
 800b144:	9a01      	ldr	r2, [sp, #4]
 800b146:	4601      	mov	r1, r0
 800b148:	4605      	mov	r5, r0
 800b14a:	4648      	mov	r0, r9
 800b14c:	f000 fc20 	bl	800b990 <__multiply>
 800b150:	9901      	ldr	r1, [sp, #4]
 800b152:	9005      	str	r0, [sp, #20]
 800b154:	4648      	mov	r0, r9
 800b156:	f000 fb51 	bl	800b7fc <_Bfree>
 800b15a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b15c:	1b1b      	subs	r3, r3, r4
 800b15e:	f000 80b0 	beq.w	800b2c2 <_dtoa_r+0x802>
 800b162:	9905      	ldr	r1, [sp, #20]
 800b164:	461a      	mov	r2, r3
 800b166:	4648      	mov	r0, r9
 800b168:	f000 fcb4 	bl	800bad4 <__pow5mult>
 800b16c:	9001      	str	r0, [sp, #4]
 800b16e:	2101      	movs	r1, #1
 800b170:	4648      	mov	r0, r9
 800b172:	f000 fbf7 	bl	800b964 <__i2b>
 800b176:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b178:	4604      	mov	r4, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f000 81da 	beq.w	800b534 <_dtoa_r+0xa74>
 800b180:	461a      	mov	r2, r3
 800b182:	4601      	mov	r1, r0
 800b184:	4648      	mov	r0, r9
 800b186:	f000 fca5 	bl	800bad4 <__pow5mult>
 800b18a:	9b07      	ldr	r3, [sp, #28]
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	4604      	mov	r4, r0
 800b190:	f300 80a0 	bgt.w	800b2d4 <_dtoa_r+0x814>
 800b194:	9b02      	ldr	r3, [sp, #8]
 800b196:	2b00      	cmp	r3, #0
 800b198:	f040 8096 	bne.w	800b2c8 <_dtoa_r+0x808>
 800b19c:	9b03      	ldr	r3, [sp, #12]
 800b19e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b1a2:	2a00      	cmp	r2, #0
 800b1a4:	f040 8092 	bne.w	800b2cc <_dtoa_r+0x80c>
 800b1a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b1ac:	0d12      	lsrs	r2, r2, #20
 800b1ae:	0512      	lsls	r2, r2, #20
 800b1b0:	2a00      	cmp	r2, #0
 800b1b2:	f000 808d 	beq.w	800b2d0 <_dtoa_r+0x810>
 800b1b6:	9b04      	ldr	r3, [sp, #16]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	9304      	str	r3, [sp, #16]
 800b1bc:	9b06      	ldr	r3, [sp, #24]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	9306      	str	r3, [sp, #24]
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f000 81b9 	beq.w	800b540 <_dtoa_r+0xa80>
 800b1ce:	6922      	ldr	r2, [r4, #16]
 800b1d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b1d4:	6910      	ldr	r0, [r2, #16]
 800b1d6:	f000 fb79 	bl	800b8cc <__hi0bits>
 800b1da:	f1c0 0020 	rsb	r0, r0, #32
 800b1de:	9b06      	ldr	r3, [sp, #24]
 800b1e0:	4418      	add	r0, r3
 800b1e2:	f010 001f 	ands.w	r0, r0, #31
 800b1e6:	f000 8081 	beq.w	800b2ec <_dtoa_r+0x82c>
 800b1ea:	f1c0 0220 	rsb	r2, r0, #32
 800b1ee:	2a04      	cmp	r2, #4
 800b1f0:	dd73      	ble.n	800b2da <_dtoa_r+0x81a>
 800b1f2:	9b04      	ldr	r3, [sp, #16]
 800b1f4:	f1c0 001c 	rsb	r0, r0, #28
 800b1f8:	4403      	add	r3, r0
 800b1fa:	9304      	str	r3, [sp, #16]
 800b1fc:	9b06      	ldr	r3, [sp, #24]
 800b1fe:	4406      	add	r6, r0
 800b200:	4403      	add	r3, r0
 800b202:	9306      	str	r3, [sp, #24]
 800b204:	9b04      	ldr	r3, [sp, #16]
 800b206:	2b00      	cmp	r3, #0
 800b208:	dd05      	ble.n	800b216 <_dtoa_r+0x756>
 800b20a:	9901      	ldr	r1, [sp, #4]
 800b20c:	461a      	mov	r2, r3
 800b20e:	4648      	mov	r0, r9
 800b210:	f000 fcba 	bl	800bb88 <__lshift>
 800b214:	9001      	str	r0, [sp, #4]
 800b216:	9b06      	ldr	r3, [sp, #24]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	dd05      	ble.n	800b228 <_dtoa_r+0x768>
 800b21c:	4621      	mov	r1, r4
 800b21e:	461a      	mov	r2, r3
 800b220:	4648      	mov	r0, r9
 800b222:	f000 fcb1 	bl	800bb88 <__lshift>
 800b226:	4604      	mov	r4, r0
 800b228:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d060      	beq.n	800b2f0 <_dtoa_r+0x830>
 800b22e:	9801      	ldr	r0, [sp, #4]
 800b230:	4621      	mov	r1, r4
 800b232:	f000 fd15 	bl	800bc60 <__mcmp>
 800b236:	2800      	cmp	r0, #0
 800b238:	da5a      	bge.n	800b2f0 <_dtoa_r+0x830>
 800b23a:	f108 33ff 	add.w	r3, r8, #4294967295
 800b23e:	9305      	str	r3, [sp, #20]
 800b240:	9901      	ldr	r1, [sp, #4]
 800b242:	2300      	movs	r3, #0
 800b244:	220a      	movs	r2, #10
 800b246:	4648      	mov	r0, r9
 800b248:	f000 fafa 	bl	800b840 <__multadd>
 800b24c:	9b08      	ldr	r3, [sp, #32]
 800b24e:	9001      	str	r0, [sp, #4]
 800b250:	2b00      	cmp	r3, #0
 800b252:	f000 8177 	beq.w	800b544 <_dtoa_r+0xa84>
 800b256:	4629      	mov	r1, r5
 800b258:	2300      	movs	r3, #0
 800b25a:	220a      	movs	r2, #10
 800b25c:	4648      	mov	r0, r9
 800b25e:	f000 faef 	bl	800b840 <__multadd>
 800b262:	f1bb 0f00 	cmp.w	fp, #0
 800b266:	4605      	mov	r5, r0
 800b268:	dc6e      	bgt.n	800b348 <_dtoa_r+0x888>
 800b26a:	9b07      	ldr	r3, [sp, #28]
 800b26c:	2b02      	cmp	r3, #2
 800b26e:	dc48      	bgt.n	800b302 <_dtoa_r+0x842>
 800b270:	e06a      	b.n	800b348 <_dtoa_r+0x888>
 800b272:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b274:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b278:	e739      	b.n	800b0ee <_dtoa_r+0x62e>
 800b27a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800b27e:	42a3      	cmp	r3, r4
 800b280:	db07      	blt.n	800b292 <_dtoa_r+0x7d2>
 800b282:	f1ba 0f00 	cmp.w	sl, #0
 800b286:	eba3 0404 	sub.w	r4, r3, r4
 800b28a:	db0b      	blt.n	800b2a4 <_dtoa_r+0x7e4>
 800b28c:	9e04      	ldr	r6, [sp, #16]
 800b28e:	4652      	mov	r2, sl
 800b290:	e72f      	b.n	800b0f2 <_dtoa_r+0x632>
 800b292:	1ae2      	subs	r2, r4, r3
 800b294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b296:	9e04      	ldr	r6, [sp, #16]
 800b298:	4413      	add	r3, r2
 800b29a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b29c:	4652      	mov	r2, sl
 800b29e:	4623      	mov	r3, r4
 800b2a0:	2400      	movs	r4, #0
 800b2a2:	e726      	b.n	800b0f2 <_dtoa_r+0x632>
 800b2a4:	9a04      	ldr	r2, [sp, #16]
 800b2a6:	eba2 060a 	sub.w	r6, r2, sl
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	e721      	b.n	800b0f2 <_dtoa_r+0x632>
 800b2ae:	9e04      	ldr	r6, [sp, #16]
 800b2b0:	9d08      	ldr	r5, [sp, #32]
 800b2b2:	461c      	mov	r4, r3
 800b2b4:	e72a      	b.n	800b10c <_dtoa_r+0x64c>
 800b2b6:	9a01      	ldr	r2, [sp, #4]
 800b2b8:	9205      	str	r2, [sp, #20]
 800b2ba:	e752      	b.n	800b162 <_dtoa_r+0x6a2>
 800b2bc:	9901      	ldr	r1, [sp, #4]
 800b2be:	461a      	mov	r2, r3
 800b2c0:	e751      	b.n	800b166 <_dtoa_r+0x6a6>
 800b2c2:	9b05      	ldr	r3, [sp, #20]
 800b2c4:	9301      	str	r3, [sp, #4]
 800b2c6:	e752      	b.n	800b16e <_dtoa_r+0x6ae>
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	e77b      	b.n	800b1c4 <_dtoa_r+0x704>
 800b2cc:	9b02      	ldr	r3, [sp, #8]
 800b2ce:	e779      	b.n	800b1c4 <_dtoa_r+0x704>
 800b2d0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b2d2:	e778      	b.n	800b1c6 <_dtoa_r+0x706>
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2d8:	e779      	b.n	800b1ce <_dtoa_r+0x70e>
 800b2da:	d093      	beq.n	800b204 <_dtoa_r+0x744>
 800b2dc:	9b04      	ldr	r3, [sp, #16]
 800b2de:	321c      	adds	r2, #28
 800b2e0:	4413      	add	r3, r2
 800b2e2:	9304      	str	r3, [sp, #16]
 800b2e4:	9b06      	ldr	r3, [sp, #24]
 800b2e6:	4416      	add	r6, r2
 800b2e8:	4413      	add	r3, r2
 800b2ea:	e78a      	b.n	800b202 <_dtoa_r+0x742>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	e7f5      	b.n	800b2dc <_dtoa_r+0x81c>
 800b2f0:	f1ba 0f00 	cmp.w	sl, #0
 800b2f4:	f8cd 8014 	str.w	r8, [sp, #20]
 800b2f8:	46d3      	mov	fp, sl
 800b2fa:	dc21      	bgt.n	800b340 <_dtoa_r+0x880>
 800b2fc:	9b07      	ldr	r3, [sp, #28]
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	dd1e      	ble.n	800b340 <_dtoa_r+0x880>
 800b302:	f1bb 0f00 	cmp.w	fp, #0
 800b306:	f47f addc 	bne.w	800aec2 <_dtoa_r+0x402>
 800b30a:	4621      	mov	r1, r4
 800b30c:	465b      	mov	r3, fp
 800b30e:	2205      	movs	r2, #5
 800b310:	4648      	mov	r0, r9
 800b312:	f000 fa95 	bl	800b840 <__multadd>
 800b316:	4601      	mov	r1, r0
 800b318:	4604      	mov	r4, r0
 800b31a:	9801      	ldr	r0, [sp, #4]
 800b31c:	f000 fca0 	bl	800bc60 <__mcmp>
 800b320:	2800      	cmp	r0, #0
 800b322:	f77f adce 	ble.w	800aec2 <_dtoa_r+0x402>
 800b326:	463e      	mov	r6, r7
 800b328:	2331      	movs	r3, #49	@ 0x31
 800b32a:	f806 3b01 	strb.w	r3, [r6], #1
 800b32e:	9b05      	ldr	r3, [sp, #20]
 800b330:	3301      	adds	r3, #1
 800b332:	9305      	str	r3, [sp, #20]
 800b334:	e5c9      	b.n	800aeca <_dtoa_r+0x40a>
 800b336:	f8cd 8014 	str.w	r8, [sp, #20]
 800b33a:	4654      	mov	r4, sl
 800b33c:	4625      	mov	r5, r4
 800b33e:	e7f2      	b.n	800b326 <_dtoa_r+0x866>
 800b340:	9b08      	ldr	r3, [sp, #32]
 800b342:	2b00      	cmp	r3, #0
 800b344:	f000 8102 	beq.w	800b54c <_dtoa_r+0xa8c>
 800b348:	2e00      	cmp	r6, #0
 800b34a:	dd05      	ble.n	800b358 <_dtoa_r+0x898>
 800b34c:	4629      	mov	r1, r5
 800b34e:	4632      	mov	r2, r6
 800b350:	4648      	mov	r0, r9
 800b352:	f000 fc19 	bl	800bb88 <__lshift>
 800b356:	4605      	mov	r5, r0
 800b358:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d058      	beq.n	800b410 <_dtoa_r+0x950>
 800b35e:	6869      	ldr	r1, [r5, #4]
 800b360:	4648      	mov	r0, r9
 800b362:	f000 fa0b 	bl	800b77c <_Balloc>
 800b366:	4606      	mov	r6, r0
 800b368:	b928      	cbnz	r0, 800b376 <_dtoa_r+0x8b6>
 800b36a:	4b82      	ldr	r3, [pc, #520]	@ (800b574 <_dtoa_r+0xab4>)
 800b36c:	4602      	mov	r2, r0
 800b36e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b372:	f7ff bbbe 	b.w	800aaf2 <_dtoa_r+0x32>
 800b376:	692a      	ldr	r2, [r5, #16]
 800b378:	3202      	adds	r2, #2
 800b37a:	0092      	lsls	r2, r2, #2
 800b37c:	f105 010c 	add.w	r1, r5, #12
 800b380:	300c      	adds	r0, #12
 800b382:	f000 fff7 	bl	800c374 <memcpy>
 800b386:	2201      	movs	r2, #1
 800b388:	4631      	mov	r1, r6
 800b38a:	4648      	mov	r0, r9
 800b38c:	f000 fbfc 	bl	800bb88 <__lshift>
 800b390:	1c7b      	adds	r3, r7, #1
 800b392:	9304      	str	r3, [sp, #16]
 800b394:	eb07 030b 	add.w	r3, r7, fp
 800b398:	9309      	str	r3, [sp, #36]	@ 0x24
 800b39a:	9b02      	ldr	r3, [sp, #8]
 800b39c:	f003 0301 	and.w	r3, r3, #1
 800b3a0:	46a8      	mov	r8, r5
 800b3a2:	9308      	str	r3, [sp, #32]
 800b3a4:	4605      	mov	r5, r0
 800b3a6:	9b04      	ldr	r3, [sp, #16]
 800b3a8:	9801      	ldr	r0, [sp, #4]
 800b3aa:	4621      	mov	r1, r4
 800b3ac:	f103 3bff 	add.w	fp, r3, #4294967295
 800b3b0:	f7ff fafd 	bl	800a9ae <quorem>
 800b3b4:	4641      	mov	r1, r8
 800b3b6:	9002      	str	r0, [sp, #8]
 800b3b8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b3bc:	9801      	ldr	r0, [sp, #4]
 800b3be:	f000 fc4f 	bl	800bc60 <__mcmp>
 800b3c2:	462a      	mov	r2, r5
 800b3c4:	9006      	str	r0, [sp, #24]
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	4648      	mov	r0, r9
 800b3ca:	f000 fc65 	bl	800bc98 <__mdiff>
 800b3ce:	68c2      	ldr	r2, [r0, #12]
 800b3d0:	4606      	mov	r6, r0
 800b3d2:	b9fa      	cbnz	r2, 800b414 <_dtoa_r+0x954>
 800b3d4:	4601      	mov	r1, r0
 800b3d6:	9801      	ldr	r0, [sp, #4]
 800b3d8:	f000 fc42 	bl	800bc60 <__mcmp>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	4631      	mov	r1, r6
 800b3e0:	4648      	mov	r0, r9
 800b3e2:	920a      	str	r2, [sp, #40]	@ 0x28
 800b3e4:	f000 fa0a 	bl	800b7fc <_Bfree>
 800b3e8:	9b07      	ldr	r3, [sp, #28]
 800b3ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3ec:	9e04      	ldr	r6, [sp, #16]
 800b3ee:	ea42 0103 	orr.w	r1, r2, r3
 800b3f2:	9b08      	ldr	r3, [sp, #32]
 800b3f4:	4319      	orrs	r1, r3
 800b3f6:	d10f      	bne.n	800b418 <_dtoa_r+0x958>
 800b3f8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b3fc:	d028      	beq.n	800b450 <_dtoa_r+0x990>
 800b3fe:	9b06      	ldr	r3, [sp, #24]
 800b400:	2b00      	cmp	r3, #0
 800b402:	dd02      	ble.n	800b40a <_dtoa_r+0x94a>
 800b404:	9b02      	ldr	r3, [sp, #8]
 800b406:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b40a:	f88b a000 	strb.w	sl, [fp]
 800b40e:	e55e      	b.n	800aece <_dtoa_r+0x40e>
 800b410:	4628      	mov	r0, r5
 800b412:	e7bd      	b.n	800b390 <_dtoa_r+0x8d0>
 800b414:	2201      	movs	r2, #1
 800b416:	e7e2      	b.n	800b3de <_dtoa_r+0x91e>
 800b418:	9b06      	ldr	r3, [sp, #24]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	db04      	blt.n	800b428 <_dtoa_r+0x968>
 800b41e:	9907      	ldr	r1, [sp, #28]
 800b420:	430b      	orrs	r3, r1
 800b422:	9908      	ldr	r1, [sp, #32]
 800b424:	430b      	orrs	r3, r1
 800b426:	d120      	bne.n	800b46a <_dtoa_r+0x9aa>
 800b428:	2a00      	cmp	r2, #0
 800b42a:	ddee      	ble.n	800b40a <_dtoa_r+0x94a>
 800b42c:	9901      	ldr	r1, [sp, #4]
 800b42e:	2201      	movs	r2, #1
 800b430:	4648      	mov	r0, r9
 800b432:	f000 fba9 	bl	800bb88 <__lshift>
 800b436:	4621      	mov	r1, r4
 800b438:	9001      	str	r0, [sp, #4]
 800b43a:	f000 fc11 	bl	800bc60 <__mcmp>
 800b43e:	2800      	cmp	r0, #0
 800b440:	dc03      	bgt.n	800b44a <_dtoa_r+0x98a>
 800b442:	d1e2      	bne.n	800b40a <_dtoa_r+0x94a>
 800b444:	f01a 0f01 	tst.w	sl, #1
 800b448:	d0df      	beq.n	800b40a <_dtoa_r+0x94a>
 800b44a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b44e:	d1d9      	bne.n	800b404 <_dtoa_r+0x944>
 800b450:	2339      	movs	r3, #57	@ 0x39
 800b452:	f88b 3000 	strb.w	r3, [fp]
 800b456:	4633      	mov	r3, r6
 800b458:	461e      	mov	r6, r3
 800b45a:	3b01      	subs	r3, #1
 800b45c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b460:	2a39      	cmp	r2, #57	@ 0x39
 800b462:	d052      	beq.n	800b50a <_dtoa_r+0xa4a>
 800b464:	3201      	adds	r2, #1
 800b466:	701a      	strb	r2, [r3, #0]
 800b468:	e531      	b.n	800aece <_dtoa_r+0x40e>
 800b46a:	2a00      	cmp	r2, #0
 800b46c:	dd07      	ble.n	800b47e <_dtoa_r+0x9be>
 800b46e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b472:	d0ed      	beq.n	800b450 <_dtoa_r+0x990>
 800b474:	f10a 0301 	add.w	r3, sl, #1
 800b478:	f88b 3000 	strb.w	r3, [fp]
 800b47c:	e527      	b.n	800aece <_dtoa_r+0x40e>
 800b47e:	9b04      	ldr	r3, [sp, #16]
 800b480:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b482:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b486:	4293      	cmp	r3, r2
 800b488:	d029      	beq.n	800b4de <_dtoa_r+0xa1e>
 800b48a:	9901      	ldr	r1, [sp, #4]
 800b48c:	2300      	movs	r3, #0
 800b48e:	220a      	movs	r2, #10
 800b490:	4648      	mov	r0, r9
 800b492:	f000 f9d5 	bl	800b840 <__multadd>
 800b496:	45a8      	cmp	r8, r5
 800b498:	9001      	str	r0, [sp, #4]
 800b49a:	f04f 0300 	mov.w	r3, #0
 800b49e:	f04f 020a 	mov.w	r2, #10
 800b4a2:	4641      	mov	r1, r8
 800b4a4:	4648      	mov	r0, r9
 800b4a6:	d107      	bne.n	800b4b8 <_dtoa_r+0x9f8>
 800b4a8:	f000 f9ca 	bl	800b840 <__multadd>
 800b4ac:	4680      	mov	r8, r0
 800b4ae:	4605      	mov	r5, r0
 800b4b0:	9b04      	ldr	r3, [sp, #16]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	9304      	str	r3, [sp, #16]
 800b4b6:	e776      	b.n	800b3a6 <_dtoa_r+0x8e6>
 800b4b8:	f000 f9c2 	bl	800b840 <__multadd>
 800b4bc:	4629      	mov	r1, r5
 800b4be:	4680      	mov	r8, r0
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	220a      	movs	r2, #10
 800b4c4:	4648      	mov	r0, r9
 800b4c6:	f000 f9bb 	bl	800b840 <__multadd>
 800b4ca:	4605      	mov	r5, r0
 800b4cc:	e7f0      	b.n	800b4b0 <_dtoa_r+0x9f0>
 800b4ce:	f1bb 0f00 	cmp.w	fp, #0
 800b4d2:	bfcc      	ite	gt
 800b4d4:	465e      	movgt	r6, fp
 800b4d6:	2601      	movle	r6, #1
 800b4d8:	443e      	add	r6, r7
 800b4da:	f04f 0800 	mov.w	r8, #0
 800b4de:	9901      	ldr	r1, [sp, #4]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	4648      	mov	r0, r9
 800b4e4:	f000 fb50 	bl	800bb88 <__lshift>
 800b4e8:	4621      	mov	r1, r4
 800b4ea:	9001      	str	r0, [sp, #4]
 800b4ec:	f000 fbb8 	bl	800bc60 <__mcmp>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	dcb0      	bgt.n	800b456 <_dtoa_r+0x996>
 800b4f4:	d102      	bne.n	800b4fc <_dtoa_r+0xa3c>
 800b4f6:	f01a 0f01 	tst.w	sl, #1
 800b4fa:	d1ac      	bne.n	800b456 <_dtoa_r+0x996>
 800b4fc:	4633      	mov	r3, r6
 800b4fe:	461e      	mov	r6, r3
 800b500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b504:	2a30      	cmp	r2, #48	@ 0x30
 800b506:	d0fa      	beq.n	800b4fe <_dtoa_r+0xa3e>
 800b508:	e4e1      	b.n	800aece <_dtoa_r+0x40e>
 800b50a:	429f      	cmp	r7, r3
 800b50c:	d1a4      	bne.n	800b458 <_dtoa_r+0x998>
 800b50e:	9b05      	ldr	r3, [sp, #20]
 800b510:	3301      	adds	r3, #1
 800b512:	9305      	str	r3, [sp, #20]
 800b514:	2331      	movs	r3, #49	@ 0x31
 800b516:	703b      	strb	r3, [r7, #0]
 800b518:	e4d9      	b.n	800aece <_dtoa_r+0x40e>
 800b51a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b51c:	4f16      	ldr	r7, [pc, #88]	@ (800b578 <_dtoa_r+0xab8>)
 800b51e:	b11b      	cbz	r3, 800b528 <_dtoa_r+0xa68>
 800b520:	f107 0308 	add.w	r3, r7, #8
 800b524:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b526:	6013      	str	r3, [r2, #0]
 800b528:	4638      	mov	r0, r7
 800b52a:	b011      	add	sp, #68	@ 0x44
 800b52c:	ecbd 8b02 	vpop	{d8}
 800b530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b534:	9b07      	ldr	r3, [sp, #28]
 800b536:	2b01      	cmp	r3, #1
 800b538:	f77f ae2c 	ble.w	800b194 <_dtoa_r+0x6d4>
 800b53c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b53e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b540:	2001      	movs	r0, #1
 800b542:	e64c      	b.n	800b1de <_dtoa_r+0x71e>
 800b544:	f1bb 0f00 	cmp.w	fp, #0
 800b548:	f77f aed8 	ble.w	800b2fc <_dtoa_r+0x83c>
 800b54c:	463e      	mov	r6, r7
 800b54e:	9801      	ldr	r0, [sp, #4]
 800b550:	4621      	mov	r1, r4
 800b552:	f7ff fa2c 	bl	800a9ae <quorem>
 800b556:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b55a:	f806 ab01 	strb.w	sl, [r6], #1
 800b55e:	1bf2      	subs	r2, r6, r7
 800b560:	4593      	cmp	fp, r2
 800b562:	ddb4      	ble.n	800b4ce <_dtoa_r+0xa0e>
 800b564:	9901      	ldr	r1, [sp, #4]
 800b566:	2300      	movs	r3, #0
 800b568:	220a      	movs	r2, #10
 800b56a:	4648      	mov	r0, r9
 800b56c:	f000 f968 	bl	800b840 <__multadd>
 800b570:	9001      	str	r0, [sp, #4]
 800b572:	e7ec      	b.n	800b54e <_dtoa_r+0xa8e>
 800b574:	0800d3ac 	.word	0x0800d3ac
 800b578:	0800d330 	.word	0x0800d330

0800b57c <_free_r>:
 800b57c:	b538      	push	{r3, r4, r5, lr}
 800b57e:	4605      	mov	r5, r0
 800b580:	2900      	cmp	r1, #0
 800b582:	d041      	beq.n	800b608 <_free_r+0x8c>
 800b584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b588:	1f0c      	subs	r4, r1, #4
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	bfb8      	it	lt
 800b58e:	18e4      	addlt	r4, r4, r3
 800b590:	f000 f8e8 	bl	800b764 <__malloc_lock>
 800b594:	4a1d      	ldr	r2, [pc, #116]	@ (800b60c <_free_r+0x90>)
 800b596:	6813      	ldr	r3, [r2, #0]
 800b598:	b933      	cbnz	r3, 800b5a8 <_free_r+0x2c>
 800b59a:	6063      	str	r3, [r4, #4]
 800b59c:	6014      	str	r4, [r2, #0]
 800b59e:	4628      	mov	r0, r5
 800b5a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5a4:	f000 b8e4 	b.w	800b770 <__malloc_unlock>
 800b5a8:	42a3      	cmp	r3, r4
 800b5aa:	d908      	bls.n	800b5be <_free_r+0x42>
 800b5ac:	6820      	ldr	r0, [r4, #0]
 800b5ae:	1821      	adds	r1, r4, r0
 800b5b0:	428b      	cmp	r3, r1
 800b5b2:	bf01      	itttt	eq
 800b5b4:	6819      	ldreq	r1, [r3, #0]
 800b5b6:	685b      	ldreq	r3, [r3, #4]
 800b5b8:	1809      	addeq	r1, r1, r0
 800b5ba:	6021      	streq	r1, [r4, #0]
 800b5bc:	e7ed      	b.n	800b59a <_free_r+0x1e>
 800b5be:	461a      	mov	r2, r3
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	b10b      	cbz	r3, 800b5c8 <_free_r+0x4c>
 800b5c4:	42a3      	cmp	r3, r4
 800b5c6:	d9fa      	bls.n	800b5be <_free_r+0x42>
 800b5c8:	6811      	ldr	r1, [r2, #0]
 800b5ca:	1850      	adds	r0, r2, r1
 800b5cc:	42a0      	cmp	r0, r4
 800b5ce:	d10b      	bne.n	800b5e8 <_free_r+0x6c>
 800b5d0:	6820      	ldr	r0, [r4, #0]
 800b5d2:	4401      	add	r1, r0
 800b5d4:	1850      	adds	r0, r2, r1
 800b5d6:	4283      	cmp	r3, r0
 800b5d8:	6011      	str	r1, [r2, #0]
 800b5da:	d1e0      	bne.n	800b59e <_free_r+0x22>
 800b5dc:	6818      	ldr	r0, [r3, #0]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	6053      	str	r3, [r2, #4]
 800b5e2:	4408      	add	r0, r1
 800b5e4:	6010      	str	r0, [r2, #0]
 800b5e6:	e7da      	b.n	800b59e <_free_r+0x22>
 800b5e8:	d902      	bls.n	800b5f0 <_free_r+0x74>
 800b5ea:	230c      	movs	r3, #12
 800b5ec:	602b      	str	r3, [r5, #0]
 800b5ee:	e7d6      	b.n	800b59e <_free_r+0x22>
 800b5f0:	6820      	ldr	r0, [r4, #0]
 800b5f2:	1821      	adds	r1, r4, r0
 800b5f4:	428b      	cmp	r3, r1
 800b5f6:	bf04      	itt	eq
 800b5f8:	6819      	ldreq	r1, [r3, #0]
 800b5fa:	685b      	ldreq	r3, [r3, #4]
 800b5fc:	6063      	str	r3, [r4, #4]
 800b5fe:	bf04      	itt	eq
 800b600:	1809      	addeq	r1, r1, r0
 800b602:	6021      	streq	r1, [r4, #0]
 800b604:	6054      	str	r4, [r2, #4]
 800b606:	e7ca      	b.n	800b59e <_free_r+0x22>
 800b608:	bd38      	pop	{r3, r4, r5, pc}
 800b60a:	bf00      	nop
 800b60c:	240004d4 	.word	0x240004d4

0800b610 <malloc>:
 800b610:	4b02      	ldr	r3, [pc, #8]	@ (800b61c <malloc+0xc>)
 800b612:	4601      	mov	r1, r0
 800b614:	6818      	ldr	r0, [r3, #0]
 800b616:	f000 b825 	b.w	800b664 <_malloc_r>
 800b61a:	bf00      	nop
 800b61c:	2400001c 	.word	0x2400001c

0800b620 <sbrk_aligned>:
 800b620:	b570      	push	{r4, r5, r6, lr}
 800b622:	4e0f      	ldr	r6, [pc, #60]	@ (800b660 <sbrk_aligned+0x40>)
 800b624:	460c      	mov	r4, r1
 800b626:	6831      	ldr	r1, [r6, #0]
 800b628:	4605      	mov	r5, r0
 800b62a:	b911      	cbnz	r1, 800b632 <sbrk_aligned+0x12>
 800b62c:	f000 fe92 	bl	800c354 <_sbrk_r>
 800b630:	6030      	str	r0, [r6, #0]
 800b632:	4621      	mov	r1, r4
 800b634:	4628      	mov	r0, r5
 800b636:	f000 fe8d 	bl	800c354 <_sbrk_r>
 800b63a:	1c43      	adds	r3, r0, #1
 800b63c:	d103      	bne.n	800b646 <sbrk_aligned+0x26>
 800b63e:	f04f 34ff 	mov.w	r4, #4294967295
 800b642:	4620      	mov	r0, r4
 800b644:	bd70      	pop	{r4, r5, r6, pc}
 800b646:	1cc4      	adds	r4, r0, #3
 800b648:	f024 0403 	bic.w	r4, r4, #3
 800b64c:	42a0      	cmp	r0, r4
 800b64e:	d0f8      	beq.n	800b642 <sbrk_aligned+0x22>
 800b650:	1a21      	subs	r1, r4, r0
 800b652:	4628      	mov	r0, r5
 800b654:	f000 fe7e 	bl	800c354 <_sbrk_r>
 800b658:	3001      	adds	r0, #1
 800b65a:	d1f2      	bne.n	800b642 <sbrk_aligned+0x22>
 800b65c:	e7ef      	b.n	800b63e <sbrk_aligned+0x1e>
 800b65e:	bf00      	nop
 800b660:	240004d0 	.word	0x240004d0

0800b664 <_malloc_r>:
 800b664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b668:	1ccd      	adds	r5, r1, #3
 800b66a:	f025 0503 	bic.w	r5, r5, #3
 800b66e:	3508      	adds	r5, #8
 800b670:	2d0c      	cmp	r5, #12
 800b672:	bf38      	it	cc
 800b674:	250c      	movcc	r5, #12
 800b676:	2d00      	cmp	r5, #0
 800b678:	4606      	mov	r6, r0
 800b67a:	db01      	blt.n	800b680 <_malloc_r+0x1c>
 800b67c:	42a9      	cmp	r1, r5
 800b67e:	d904      	bls.n	800b68a <_malloc_r+0x26>
 800b680:	230c      	movs	r3, #12
 800b682:	6033      	str	r3, [r6, #0]
 800b684:	2000      	movs	r0, #0
 800b686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b68a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b760 <_malloc_r+0xfc>
 800b68e:	f000 f869 	bl	800b764 <__malloc_lock>
 800b692:	f8d8 3000 	ldr.w	r3, [r8]
 800b696:	461c      	mov	r4, r3
 800b698:	bb44      	cbnz	r4, 800b6ec <_malloc_r+0x88>
 800b69a:	4629      	mov	r1, r5
 800b69c:	4630      	mov	r0, r6
 800b69e:	f7ff ffbf 	bl	800b620 <sbrk_aligned>
 800b6a2:	1c43      	adds	r3, r0, #1
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	d158      	bne.n	800b75a <_malloc_r+0xf6>
 800b6a8:	f8d8 4000 	ldr.w	r4, [r8]
 800b6ac:	4627      	mov	r7, r4
 800b6ae:	2f00      	cmp	r7, #0
 800b6b0:	d143      	bne.n	800b73a <_malloc_r+0xd6>
 800b6b2:	2c00      	cmp	r4, #0
 800b6b4:	d04b      	beq.n	800b74e <_malloc_r+0xea>
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	4639      	mov	r1, r7
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	eb04 0903 	add.w	r9, r4, r3
 800b6c0:	f000 fe48 	bl	800c354 <_sbrk_r>
 800b6c4:	4581      	cmp	r9, r0
 800b6c6:	d142      	bne.n	800b74e <_malloc_r+0xea>
 800b6c8:	6821      	ldr	r1, [r4, #0]
 800b6ca:	1a6d      	subs	r5, r5, r1
 800b6cc:	4629      	mov	r1, r5
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	f7ff ffa6 	bl	800b620 <sbrk_aligned>
 800b6d4:	3001      	adds	r0, #1
 800b6d6:	d03a      	beq.n	800b74e <_malloc_r+0xea>
 800b6d8:	6823      	ldr	r3, [r4, #0]
 800b6da:	442b      	add	r3, r5
 800b6dc:	6023      	str	r3, [r4, #0]
 800b6de:	f8d8 3000 	ldr.w	r3, [r8]
 800b6e2:	685a      	ldr	r2, [r3, #4]
 800b6e4:	bb62      	cbnz	r2, 800b740 <_malloc_r+0xdc>
 800b6e6:	f8c8 7000 	str.w	r7, [r8]
 800b6ea:	e00f      	b.n	800b70c <_malloc_r+0xa8>
 800b6ec:	6822      	ldr	r2, [r4, #0]
 800b6ee:	1b52      	subs	r2, r2, r5
 800b6f0:	d420      	bmi.n	800b734 <_malloc_r+0xd0>
 800b6f2:	2a0b      	cmp	r2, #11
 800b6f4:	d917      	bls.n	800b726 <_malloc_r+0xc2>
 800b6f6:	1961      	adds	r1, r4, r5
 800b6f8:	42a3      	cmp	r3, r4
 800b6fa:	6025      	str	r5, [r4, #0]
 800b6fc:	bf18      	it	ne
 800b6fe:	6059      	strne	r1, [r3, #4]
 800b700:	6863      	ldr	r3, [r4, #4]
 800b702:	bf08      	it	eq
 800b704:	f8c8 1000 	streq.w	r1, [r8]
 800b708:	5162      	str	r2, [r4, r5]
 800b70a:	604b      	str	r3, [r1, #4]
 800b70c:	4630      	mov	r0, r6
 800b70e:	f000 f82f 	bl	800b770 <__malloc_unlock>
 800b712:	f104 000b 	add.w	r0, r4, #11
 800b716:	1d23      	adds	r3, r4, #4
 800b718:	f020 0007 	bic.w	r0, r0, #7
 800b71c:	1ac2      	subs	r2, r0, r3
 800b71e:	bf1c      	itt	ne
 800b720:	1a1b      	subne	r3, r3, r0
 800b722:	50a3      	strne	r3, [r4, r2]
 800b724:	e7af      	b.n	800b686 <_malloc_r+0x22>
 800b726:	6862      	ldr	r2, [r4, #4]
 800b728:	42a3      	cmp	r3, r4
 800b72a:	bf0c      	ite	eq
 800b72c:	f8c8 2000 	streq.w	r2, [r8]
 800b730:	605a      	strne	r2, [r3, #4]
 800b732:	e7eb      	b.n	800b70c <_malloc_r+0xa8>
 800b734:	4623      	mov	r3, r4
 800b736:	6864      	ldr	r4, [r4, #4]
 800b738:	e7ae      	b.n	800b698 <_malloc_r+0x34>
 800b73a:	463c      	mov	r4, r7
 800b73c:	687f      	ldr	r7, [r7, #4]
 800b73e:	e7b6      	b.n	800b6ae <_malloc_r+0x4a>
 800b740:	461a      	mov	r2, r3
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	42a3      	cmp	r3, r4
 800b746:	d1fb      	bne.n	800b740 <_malloc_r+0xdc>
 800b748:	2300      	movs	r3, #0
 800b74a:	6053      	str	r3, [r2, #4]
 800b74c:	e7de      	b.n	800b70c <_malloc_r+0xa8>
 800b74e:	230c      	movs	r3, #12
 800b750:	6033      	str	r3, [r6, #0]
 800b752:	4630      	mov	r0, r6
 800b754:	f000 f80c 	bl	800b770 <__malloc_unlock>
 800b758:	e794      	b.n	800b684 <_malloc_r+0x20>
 800b75a:	6005      	str	r5, [r0, #0]
 800b75c:	e7d6      	b.n	800b70c <_malloc_r+0xa8>
 800b75e:	bf00      	nop
 800b760:	240004d4 	.word	0x240004d4

0800b764 <__malloc_lock>:
 800b764:	4801      	ldr	r0, [pc, #4]	@ (800b76c <__malloc_lock+0x8>)
 800b766:	f7ff b920 	b.w	800a9aa <__retarget_lock_acquire_recursive>
 800b76a:	bf00      	nop
 800b76c:	240004cc 	.word	0x240004cc

0800b770 <__malloc_unlock>:
 800b770:	4801      	ldr	r0, [pc, #4]	@ (800b778 <__malloc_unlock+0x8>)
 800b772:	f7ff b91b 	b.w	800a9ac <__retarget_lock_release_recursive>
 800b776:	bf00      	nop
 800b778:	240004cc 	.word	0x240004cc

0800b77c <_Balloc>:
 800b77c:	b570      	push	{r4, r5, r6, lr}
 800b77e:	69c6      	ldr	r6, [r0, #28]
 800b780:	4604      	mov	r4, r0
 800b782:	460d      	mov	r5, r1
 800b784:	b976      	cbnz	r6, 800b7a4 <_Balloc+0x28>
 800b786:	2010      	movs	r0, #16
 800b788:	f7ff ff42 	bl	800b610 <malloc>
 800b78c:	4602      	mov	r2, r0
 800b78e:	61e0      	str	r0, [r4, #28]
 800b790:	b920      	cbnz	r0, 800b79c <_Balloc+0x20>
 800b792:	4b18      	ldr	r3, [pc, #96]	@ (800b7f4 <_Balloc+0x78>)
 800b794:	4818      	ldr	r0, [pc, #96]	@ (800b7f8 <_Balloc+0x7c>)
 800b796:	216b      	movs	r1, #107	@ 0x6b
 800b798:	f000 fdfa 	bl	800c390 <__assert_func>
 800b79c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7a0:	6006      	str	r6, [r0, #0]
 800b7a2:	60c6      	str	r6, [r0, #12]
 800b7a4:	69e6      	ldr	r6, [r4, #28]
 800b7a6:	68f3      	ldr	r3, [r6, #12]
 800b7a8:	b183      	cbz	r3, 800b7cc <_Balloc+0x50>
 800b7aa:	69e3      	ldr	r3, [r4, #28]
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7b2:	b9b8      	cbnz	r0, 800b7e4 <_Balloc+0x68>
 800b7b4:	2101      	movs	r1, #1
 800b7b6:	fa01 f605 	lsl.w	r6, r1, r5
 800b7ba:	1d72      	adds	r2, r6, #5
 800b7bc:	0092      	lsls	r2, r2, #2
 800b7be:	4620      	mov	r0, r4
 800b7c0:	f000 fe04 	bl	800c3cc <_calloc_r>
 800b7c4:	b160      	cbz	r0, 800b7e0 <_Balloc+0x64>
 800b7c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7ca:	e00e      	b.n	800b7ea <_Balloc+0x6e>
 800b7cc:	2221      	movs	r2, #33	@ 0x21
 800b7ce:	2104      	movs	r1, #4
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	f000 fdfb 	bl	800c3cc <_calloc_r>
 800b7d6:	69e3      	ldr	r3, [r4, #28]
 800b7d8:	60f0      	str	r0, [r6, #12]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d1e4      	bne.n	800b7aa <_Balloc+0x2e>
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	bd70      	pop	{r4, r5, r6, pc}
 800b7e4:	6802      	ldr	r2, [r0, #0]
 800b7e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7f0:	e7f7      	b.n	800b7e2 <_Balloc+0x66>
 800b7f2:	bf00      	nop
 800b7f4:	0800d33d 	.word	0x0800d33d
 800b7f8:	0800d3bd 	.word	0x0800d3bd

0800b7fc <_Bfree>:
 800b7fc:	b570      	push	{r4, r5, r6, lr}
 800b7fe:	69c6      	ldr	r6, [r0, #28]
 800b800:	4605      	mov	r5, r0
 800b802:	460c      	mov	r4, r1
 800b804:	b976      	cbnz	r6, 800b824 <_Bfree+0x28>
 800b806:	2010      	movs	r0, #16
 800b808:	f7ff ff02 	bl	800b610 <malloc>
 800b80c:	4602      	mov	r2, r0
 800b80e:	61e8      	str	r0, [r5, #28]
 800b810:	b920      	cbnz	r0, 800b81c <_Bfree+0x20>
 800b812:	4b09      	ldr	r3, [pc, #36]	@ (800b838 <_Bfree+0x3c>)
 800b814:	4809      	ldr	r0, [pc, #36]	@ (800b83c <_Bfree+0x40>)
 800b816:	218f      	movs	r1, #143	@ 0x8f
 800b818:	f000 fdba 	bl	800c390 <__assert_func>
 800b81c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b820:	6006      	str	r6, [r0, #0]
 800b822:	60c6      	str	r6, [r0, #12]
 800b824:	b13c      	cbz	r4, 800b836 <_Bfree+0x3a>
 800b826:	69eb      	ldr	r3, [r5, #28]
 800b828:	6862      	ldr	r2, [r4, #4]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b830:	6021      	str	r1, [r4, #0]
 800b832:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b836:	bd70      	pop	{r4, r5, r6, pc}
 800b838:	0800d33d 	.word	0x0800d33d
 800b83c:	0800d3bd 	.word	0x0800d3bd

0800b840 <__multadd>:
 800b840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b844:	690d      	ldr	r5, [r1, #16]
 800b846:	4607      	mov	r7, r0
 800b848:	460c      	mov	r4, r1
 800b84a:	461e      	mov	r6, r3
 800b84c:	f101 0c14 	add.w	ip, r1, #20
 800b850:	2000      	movs	r0, #0
 800b852:	f8dc 3000 	ldr.w	r3, [ip]
 800b856:	b299      	uxth	r1, r3
 800b858:	fb02 6101 	mla	r1, r2, r1, r6
 800b85c:	0c1e      	lsrs	r6, r3, #16
 800b85e:	0c0b      	lsrs	r3, r1, #16
 800b860:	fb02 3306 	mla	r3, r2, r6, r3
 800b864:	b289      	uxth	r1, r1
 800b866:	3001      	adds	r0, #1
 800b868:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b86c:	4285      	cmp	r5, r0
 800b86e:	f84c 1b04 	str.w	r1, [ip], #4
 800b872:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b876:	dcec      	bgt.n	800b852 <__multadd+0x12>
 800b878:	b30e      	cbz	r6, 800b8be <__multadd+0x7e>
 800b87a:	68a3      	ldr	r3, [r4, #8]
 800b87c:	42ab      	cmp	r3, r5
 800b87e:	dc19      	bgt.n	800b8b4 <__multadd+0x74>
 800b880:	6861      	ldr	r1, [r4, #4]
 800b882:	4638      	mov	r0, r7
 800b884:	3101      	adds	r1, #1
 800b886:	f7ff ff79 	bl	800b77c <_Balloc>
 800b88a:	4680      	mov	r8, r0
 800b88c:	b928      	cbnz	r0, 800b89a <__multadd+0x5a>
 800b88e:	4602      	mov	r2, r0
 800b890:	4b0c      	ldr	r3, [pc, #48]	@ (800b8c4 <__multadd+0x84>)
 800b892:	480d      	ldr	r0, [pc, #52]	@ (800b8c8 <__multadd+0x88>)
 800b894:	21ba      	movs	r1, #186	@ 0xba
 800b896:	f000 fd7b 	bl	800c390 <__assert_func>
 800b89a:	6922      	ldr	r2, [r4, #16]
 800b89c:	3202      	adds	r2, #2
 800b89e:	f104 010c 	add.w	r1, r4, #12
 800b8a2:	0092      	lsls	r2, r2, #2
 800b8a4:	300c      	adds	r0, #12
 800b8a6:	f000 fd65 	bl	800c374 <memcpy>
 800b8aa:	4621      	mov	r1, r4
 800b8ac:	4638      	mov	r0, r7
 800b8ae:	f7ff ffa5 	bl	800b7fc <_Bfree>
 800b8b2:	4644      	mov	r4, r8
 800b8b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b8b8:	3501      	adds	r5, #1
 800b8ba:	615e      	str	r6, [r3, #20]
 800b8bc:	6125      	str	r5, [r4, #16]
 800b8be:	4620      	mov	r0, r4
 800b8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8c4:	0800d3ac 	.word	0x0800d3ac
 800b8c8:	0800d3bd 	.word	0x0800d3bd

0800b8cc <__hi0bits>:
 800b8cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	bf36      	itet	cc
 800b8d4:	0403      	lslcc	r3, r0, #16
 800b8d6:	2000      	movcs	r0, #0
 800b8d8:	2010      	movcc	r0, #16
 800b8da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b8de:	bf3c      	itt	cc
 800b8e0:	021b      	lslcc	r3, r3, #8
 800b8e2:	3008      	addcc	r0, #8
 800b8e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8e8:	bf3c      	itt	cc
 800b8ea:	011b      	lslcc	r3, r3, #4
 800b8ec:	3004      	addcc	r0, #4
 800b8ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8f2:	bf3c      	itt	cc
 800b8f4:	009b      	lslcc	r3, r3, #2
 800b8f6:	3002      	addcc	r0, #2
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	db05      	blt.n	800b908 <__hi0bits+0x3c>
 800b8fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b900:	f100 0001 	add.w	r0, r0, #1
 800b904:	bf08      	it	eq
 800b906:	2020      	moveq	r0, #32
 800b908:	4770      	bx	lr

0800b90a <__lo0bits>:
 800b90a:	6803      	ldr	r3, [r0, #0]
 800b90c:	4602      	mov	r2, r0
 800b90e:	f013 0007 	ands.w	r0, r3, #7
 800b912:	d00b      	beq.n	800b92c <__lo0bits+0x22>
 800b914:	07d9      	lsls	r1, r3, #31
 800b916:	d421      	bmi.n	800b95c <__lo0bits+0x52>
 800b918:	0798      	lsls	r0, r3, #30
 800b91a:	bf49      	itett	mi
 800b91c:	085b      	lsrmi	r3, r3, #1
 800b91e:	089b      	lsrpl	r3, r3, #2
 800b920:	2001      	movmi	r0, #1
 800b922:	6013      	strmi	r3, [r2, #0]
 800b924:	bf5c      	itt	pl
 800b926:	6013      	strpl	r3, [r2, #0]
 800b928:	2002      	movpl	r0, #2
 800b92a:	4770      	bx	lr
 800b92c:	b299      	uxth	r1, r3
 800b92e:	b909      	cbnz	r1, 800b934 <__lo0bits+0x2a>
 800b930:	0c1b      	lsrs	r3, r3, #16
 800b932:	2010      	movs	r0, #16
 800b934:	b2d9      	uxtb	r1, r3
 800b936:	b909      	cbnz	r1, 800b93c <__lo0bits+0x32>
 800b938:	3008      	adds	r0, #8
 800b93a:	0a1b      	lsrs	r3, r3, #8
 800b93c:	0719      	lsls	r1, r3, #28
 800b93e:	bf04      	itt	eq
 800b940:	091b      	lsreq	r3, r3, #4
 800b942:	3004      	addeq	r0, #4
 800b944:	0799      	lsls	r1, r3, #30
 800b946:	bf04      	itt	eq
 800b948:	089b      	lsreq	r3, r3, #2
 800b94a:	3002      	addeq	r0, #2
 800b94c:	07d9      	lsls	r1, r3, #31
 800b94e:	d403      	bmi.n	800b958 <__lo0bits+0x4e>
 800b950:	085b      	lsrs	r3, r3, #1
 800b952:	f100 0001 	add.w	r0, r0, #1
 800b956:	d003      	beq.n	800b960 <__lo0bits+0x56>
 800b958:	6013      	str	r3, [r2, #0]
 800b95a:	4770      	bx	lr
 800b95c:	2000      	movs	r0, #0
 800b95e:	4770      	bx	lr
 800b960:	2020      	movs	r0, #32
 800b962:	4770      	bx	lr

0800b964 <__i2b>:
 800b964:	b510      	push	{r4, lr}
 800b966:	460c      	mov	r4, r1
 800b968:	2101      	movs	r1, #1
 800b96a:	f7ff ff07 	bl	800b77c <_Balloc>
 800b96e:	4602      	mov	r2, r0
 800b970:	b928      	cbnz	r0, 800b97e <__i2b+0x1a>
 800b972:	4b05      	ldr	r3, [pc, #20]	@ (800b988 <__i2b+0x24>)
 800b974:	4805      	ldr	r0, [pc, #20]	@ (800b98c <__i2b+0x28>)
 800b976:	f240 1145 	movw	r1, #325	@ 0x145
 800b97a:	f000 fd09 	bl	800c390 <__assert_func>
 800b97e:	2301      	movs	r3, #1
 800b980:	6144      	str	r4, [r0, #20]
 800b982:	6103      	str	r3, [r0, #16]
 800b984:	bd10      	pop	{r4, pc}
 800b986:	bf00      	nop
 800b988:	0800d3ac 	.word	0x0800d3ac
 800b98c:	0800d3bd 	.word	0x0800d3bd

0800b990 <__multiply>:
 800b990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b994:	4617      	mov	r7, r2
 800b996:	690a      	ldr	r2, [r1, #16]
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	bfa8      	it	ge
 800b99e:	463b      	movge	r3, r7
 800b9a0:	4689      	mov	r9, r1
 800b9a2:	bfa4      	itt	ge
 800b9a4:	460f      	movge	r7, r1
 800b9a6:	4699      	movge	r9, r3
 800b9a8:	693d      	ldr	r5, [r7, #16]
 800b9aa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	6879      	ldr	r1, [r7, #4]
 800b9b2:	eb05 060a 	add.w	r6, r5, sl
 800b9b6:	42b3      	cmp	r3, r6
 800b9b8:	b085      	sub	sp, #20
 800b9ba:	bfb8      	it	lt
 800b9bc:	3101      	addlt	r1, #1
 800b9be:	f7ff fedd 	bl	800b77c <_Balloc>
 800b9c2:	b930      	cbnz	r0, 800b9d2 <__multiply+0x42>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	4b41      	ldr	r3, [pc, #260]	@ (800bacc <__multiply+0x13c>)
 800b9c8:	4841      	ldr	r0, [pc, #260]	@ (800bad0 <__multiply+0x140>)
 800b9ca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b9ce:	f000 fcdf 	bl	800c390 <__assert_func>
 800b9d2:	f100 0414 	add.w	r4, r0, #20
 800b9d6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b9da:	4623      	mov	r3, r4
 800b9dc:	2200      	movs	r2, #0
 800b9de:	4573      	cmp	r3, lr
 800b9e0:	d320      	bcc.n	800ba24 <__multiply+0x94>
 800b9e2:	f107 0814 	add.w	r8, r7, #20
 800b9e6:	f109 0114 	add.w	r1, r9, #20
 800b9ea:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b9ee:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b9f2:	9302      	str	r3, [sp, #8]
 800b9f4:	1beb      	subs	r3, r5, r7
 800b9f6:	3b15      	subs	r3, #21
 800b9f8:	f023 0303 	bic.w	r3, r3, #3
 800b9fc:	3304      	adds	r3, #4
 800b9fe:	3715      	adds	r7, #21
 800ba00:	42bd      	cmp	r5, r7
 800ba02:	bf38      	it	cc
 800ba04:	2304      	movcc	r3, #4
 800ba06:	9301      	str	r3, [sp, #4]
 800ba08:	9b02      	ldr	r3, [sp, #8]
 800ba0a:	9103      	str	r1, [sp, #12]
 800ba0c:	428b      	cmp	r3, r1
 800ba0e:	d80c      	bhi.n	800ba2a <__multiply+0x9a>
 800ba10:	2e00      	cmp	r6, #0
 800ba12:	dd03      	ble.n	800ba1c <__multiply+0x8c>
 800ba14:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d055      	beq.n	800bac8 <__multiply+0x138>
 800ba1c:	6106      	str	r6, [r0, #16]
 800ba1e:	b005      	add	sp, #20
 800ba20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba24:	f843 2b04 	str.w	r2, [r3], #4
 800ba28:	e7d9      	b.n	800b9de <__multiply+0x4e>
 800ba2a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ba2e:	f1ba 0f00 	cmp.w	sl, #0
 800ba32:	d01f      	beq.n	800ba74 <__multiply+0xe4>
 800ba34:	46c4      	mov	ip, r8
 800ba36:	46a1      	mov	r9, r4
 800ba38:	2700      	movs	r7, #0
 800ba3a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ba3e:	f8d9 3000 	ldr.w	r3, [r9]
 800ba42:	fa1f fb82 	uxth.w	fp, r2
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	fb0a 330b 	mla	r3, sl, fp, r3
 800ba4c:	443b      	add	r3, r7
 800ba4e:	f8d9 7000 	ldr.w	r7, [r9]
 800ba52:	0c12      	lsrs	r2, r2, #16
 800ba54:	0c3f      	lsrs	r7, r7, #16
 800ba56:	fb0a 7202 	mla	r2, sl, r2, r7
 800ba5a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba64:	4565      	cmp	r5, ip
 800ba66:	f849 3b04 	str.w	r3, [r9], #4
 800ba6a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ba6e:	d8e4      	bhi.n	800ba3a <__multiply+0xaa>
 800ba70:	9b01      	ldr	r3, [sp, #4]
 800ba72:	50e7      	str	r7, [r4, r3]
 800ba74:	9b03      	ldr	r3, [sp, #12]
 800ba76:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ba7a:	3104      	adds	r1, #4
 800ba7c:	f1b9 0f00 	cmp.w	r9, #0
 800ba80:	d020      	beq.n	800bac4 <__multiply+0x134>
 800ba82:	6823      	ldr	r3, [r4, #0]
 800ba84:	4647      	mov	r7, r8
 800ba86:	46a4      	mov	ip, r4
 800ba88:	f04f 0a00 	mov.w	sl, #0
 800ba8c:	f8b7 b000 	ldrh.w	fp, [r7]
 800ba90:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ba94:	fb09 220b 	mla	r2, r9, fp, r2
 800ba98:	4452      	add	r2, sl
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800baa0:	f84c 3b04 	str.w	r3, [ip], #4
 800baa4:	f857 3b04 	ldr.w	r3, [r7], #4
 800baa8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800baac:	f8bc 3000 	ldrh.w	r3, [ip]
 800bab0:	fb09 330a 	mla	r3, r9, sl, r3
 800bab4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bab8:	42bd      	cmp	r5, r7
 800baba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800babe:	d8e5      	bhi.n	800ba8c <__multiply+0xfc>
 800bac0:	9a01      	ldr	r2, [sp, #4]
 800bac2:	50a3      	str	r3, [r4, r2]
 800bac4:	3404      	adds	r4, #4
 800bac6:	e79f      	b.n	800ba08 <__multiply+0x78>
 800bac8:	3e01      	subs	r6, #1
 800baca:	e7a1      	b.n	800ba10 <__multiply+0x80>
 800bacc:	0800d3ac 	.word	0x0800d3ac
 800bad0:	0800d3bd 	.word	0x0800d3bd

0800bad4 <__pow5mult>:
 800bad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bad8:	4615      	mov	r5, r2
 800bada:	f012 0203 	ands.w	r2, r2, #3
 800bade:	4607      	mov	r7, r0
 800bae0:	460e      	mov	r6, r1
 800bae2:	d007      	beq.n	800baf4 <__pow5mult+0x20>
 800bae4:	4c25      	ldr	r4, [pc, #148]	@ (800bb7c <__pow5mult+0xa8>)
 800bae6:	3a01      	subs	r2, #1
 800bae8:	2300      	movs	r3, #0
 800baea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800baee:	f7ff fea7 	bl	800b840 <__multadd>
 800baf2:	4606      	mov	r6, r0
 800baf4:	10ad      	asrs	r5, r5, #2
 800baf6:	d03d      	beq.n	800bb74 <__pow5mult+0xa0>
 800baf8:	69fc      	ldr	r4, [r7, #28]
 800bafa:	b97c      	cbnz	r4, 800bb1c <__pow5mult+0x48>
 800bafc:	2010      	movs	r0, #16
 800bafe:	f7ff fd87 	bl	800b610 <malloc>
 800bb02:	4602      	mov	r2, r0
 800bb04:	61f8      	str	r0, [r7, #28]
 800bb06:	b928      	cbnz	r0, 800bb14 <__pow5mult+0x40>
 800bb08:	4b1d      	ldr	r3, [pc, #116]	@ (800bb80 <__pow5mult+0xac>)
 800bb0a:	481e      	ldr	r0, [pc, #120]	@ (800bb84 <__pow5mult+0xb0>)
 800bb0c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bb10:	f000 fc3e 	bl	800c390 <__assert_func>
 800bb14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb18:	6004      	str	r4, [r0, #0]
 800bb1a:	60c4      	str	r4, [r0, #12]
 800bb1c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bb20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb24:	b94c      	cbnz	r4, 800bb3a <__pow5mult+0x66>
 800bb26:	f240 2171 	movw	r1, #625	@ 0x271
 800bb2a:	4638      	mov	r0, r7
 800bb2c:	f7ff ff1a 	bl	800b964 <__i2b>
 800bb30:	2300      	movs	r3, #0
 800bb32:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb36:	4604      	mov	r4, r0
 800bb38:	6003      	str	r3, [r0, #0]
 800bb3a:	f04f 0900 	mov.w	r9, #0
 800bb3e:	07eb      	lsls	r3, r5, #31
 800bb40:	d50a      	bpl.n	800bb58 <__pow5mult+0x84>
 800bb42:	4631      	mov	r1, r6
 800bb44:	4622      	mov	r2, r4
 800bb46:	4638      	mov	r0, r7
 800bb48:	f7ff ff22 	bl	800b990 <__multiply>
 800bb4c:	4631      	mov	r1, r6
 800bb4e:	4680      	mov	r8, r0
 800bb50:	4638      	mov	r0, r7
 800bb52:	f7ff fe53 	bl	800b7fc <_Bfree>
 800bb56:	4646      	mov	r6, r8
 800bb58:	106d      	asrs	r5, r5, #1
 800bb5a:	d00b      	beq.n	800bb74 <__pow5mult+0xa0>
 800bb5c:	6820      	ldr	r0, [r4, #0]
 800bb5e:	b938      	cbnz	r0, 800bb70 <__pow5mult+0x9c>
 800bb60:	4622      	mov	r2, r4
 800bb62:	4621      	mov	r1, r4
 800bb64:	4638      	mov	r0, r7
 800bb66:	f7ff ff13 	bl	800b990 <__multiply>
 800bb6a:	6020      	str	r0, [r4, #0]
 800bb6c:	f8c0 9000 	str.w	r9, [r0]
 800bb70:	4604      	mov	r4, r0
 800bb72:	e7e4      	b.n	800bb3e <__pow5mult+0x6a>
 800bb74:	4630      	mov	r0, r6
 800bb76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb7a:	bf00      	nop
 800bb7c:	0800d470 	.word	0x0800d470
 800bb80:	0800d33d 	.word	0x0800d33d
 800bb84:	0800d3bd 	.word	0x0800d3bd

0800bb88 <__lshift>:
 800bb88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb8c:	460c      	mov	r4, r1
 800bb8e:	6849      	ldr	r1, [r1, #4]
 800bb90:	6923      	ldr	r3, [r4, #16]
 800bb92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb96:	68a3      	ldr	r3, [r4, #8]
 800bb98:	4607      	mov	r7, r0
 800bb9a:	4691      	mov	r9, r2
 800bb9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bba0:	f108 0601 	add.w	r6, r8, #1
 800bba4:	42b3      	cmp	r3, r6
 800bba6:	db0b      	blt.n	800bbc0 <__lshift+0x38>
 800bba8:	4638      	mov	r0, r7
 800bbaa:	f7ff fde7 	bl	800b77c <_Balloc>
 800bbae:	4605      	mov	r5, r0
 800bbb0:	b948      	cbnz	r0, 800bbc6 <__lshift+0x3e>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	4b28      	ldr	r3, [pc, #160]	@ (800bc58 <__lshift+0xd0>)
 800bbb6:	4829      	ldr	r0, [pc, #164]	@ (800bc5c <__lshift+0xd4>)
 800bbb8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bbbc:	f000 fbe8 	bl	800c390 <__assert_func>
 800bbc0:	3101      	adds	r1, #1
 800bbc2:	005b      	lsls	r3, r3, #1
 800bbc4:	e7ee      	b.n	800bba4 <__lshift+0x1c>
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	f100 0114 	add.w	r1, r0, #20
 800bbcc:	f100 0210 	add.w	r2, r0, #16
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	4553      	cmp	r3, sl
 800bbd4:	db33      	blt.n	800bc3e <__lshift+0xb6>
 800bbd6:	6920      	ldr	r0, [r4, #16]
 800bbd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bbdc:	f104 0314 	add.w	r3, r4, #20
 800bbe0:	f019 091f 	ands.w	r9, r9, #31
 800bbe4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bbe8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bbec:	d02b      	beq.n	800bc46 <__lshift+0xbe>
 800bbee:	f1c9 0e20 	rsb	lr, r9, #32
 800bbf2:	468a      	mov	sl, r1
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	6818      	ldr	r0, [r3, #0]
 800bbf8:	fa00 f009 	lsl.w	r0, r0, r9
 800bbfc:	4310      	orrs	r0, r2
 800bbfe:	f84a 0b04 	str.w	r0, [sl], #4
 800bc02:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc06:	459c      	cmp	ip, r3
 800bc08:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc0c:	d8f3      	bhi.n	800bbf6 <__lshift+0x6e>
 800bc0e:	ebac 0304 	sub.w	r3, ip, r4
 800bc12:	3b15      	subs	r3, #21
 800bc14:	f023 0303 	bic.w	r3, r3, #3
 800bc18:	3304      	adds	r3, #4
 800bc1a:	f104 0015 	add.w	r0, r4, #21
 800bc1e:	4560      	cmp	r0, ip
 800bc20:	bf88      	it	hi
 800bc22:	2304      	movhi	r3, #4
 800bc24:	50ca      	str	r2, [r1, r3]
 800bc26:	b10a      	cbz	r2, 800bc2c <__lshift+0xa4>
 800bc28:	f108 0602 	add.w	r6, r8, #2
 800bc2c:	3e01      	subs	r6, #1
 800bc2e:	4638      	mov	r0, r7
 800bc30:	612e      	str	r6, [r5, #16]
 800bc32:	4621      	mov	r1, r4
 800bc34:	f7ff fde2 	bl	800b7fc <_Bfree>
 800bc38:	4628      	mov	r0, r5
 800bc3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc42:	3301      	adds	r3, #1
 800bc44:	e7c5      	b.n	800bbd2 <__lshift+0x4a>
 800bc46:	3904      	subs	r1, #4
 800bc48:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc4c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc50:	459c      	cmp	ip, r3
 800bc52:	d8f9      	bhi.n	800bc48 <__lshift+0xc0>
 800bc54:	e7ea      	b.n	800bc2c <__lshift+0xa4>
 800bc56:	bf00      	nop
 800bc58:	0800d3ac 	.word	0x0800d3ac
 800bc5c:	0800d3bd 	.word	0x0800d3bd

0800bc60 <__mcmp>:
 800bc60:	690a      	ldr	r2, [r1, #16]
 800bc62:	4603      	mov	r3, r0
 800bc64:	6900      	ldr	r0, [r0, #16]
 800bc66:	1a80      	subs	r0, r0, r2
 800bc68:	b530      	push	{r4, r5, lr}
 800bc6a:	d10e      	bne.n	800bc8a <__mcmp+0x2a>
 800bc6c:	3314      	adds	r3, #20
 800bc6e:	3114      	adds	r1, #20
 800bc70:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bc74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bc78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bc7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bc80:	4295      	cmp	r5, r2
 800bc82:	d003      	beq.n	800bc8c <__mcmp+0x2c>
 800bc84:	d205      	bcs.n	800bc92 <__mcmp+0x32>
 800bc86:	f04f 30ff 	mov.w	r0, #4294967295
 800bc8a:	bd30      	pop	{r4, r5, pc}
 800bc8c:	42a3      	cmp	r3, r4
 800bc8e:	d3f3      	bcc.n	800bc78 <__mcmp+0x18>
 800bc90:	e7fb      	b.n	800bc8a <__mcmp+0x2a>
 800bc92:	2001      	movs	r0, #1
 800bc94:	e7f9      	b.n	800bc8a <__mcmp+0x2a>
	...

0800bc98 <__mdiff>:
 800bc98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9c:	4689      	mov	r9, r1
 800bc9e:	4606      	mov	r6, r0
 800bca0:	4611      	mov	r1, r2
 800bca2:	4648      	mov	r0, r9
 800bca4:	4614      	mov	r4, r2
 800bca6:	f7ff ffdb 	bl	800bc60 <__mcmp>
 800bcaa:	1e05      	subs	r5, r0, #0
 800bcac:	d112      	bne.n	800bcd4 <__mdiff+0x3c>
 800bcae:	4629      	mov	r1, r5
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	f7ff fd63 	bl	800b77c <_Balloc>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	b928      	cbnz	r0, 800bcc6 <__mdiff+0x2e>
 800bcba:	4b3f      	ldr	r3, [pc, #252]	@ (800bdb8 <__mdiff+0x120>)
 800bcbc:	f240 2137 	movw	r1, #567	@ 0x237
 800bcc0:	483e      	ldr	r0, [pc, #248]	@ (800bdbc <__mdiff+0x124>)
 800bcc2:	f000 fb65 	bl	800c390 <__assert_func>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bccc:	4610      	mov	r0, r2
 800bcce:	b003      	add	sp, #12
 800bcd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd4:	bfbc      	itt	lt
 800bcd6:	464b      	movlt	r3, r9
 800bcd8:	46a1      	movlt	r9, r4
 800bcda:	4630      	mov	r0, r6
 800bcdc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bce0:	bfba      	itte	lt
 800bce2:	461c      	movlt	r4, r3
 800bce4:	2501      	movlt	r5, #1
 800bce6:	2500      	movge	r5, #0
 800bce8:	f7ff fd48 	bl	800b77c <_Balloc>
 800bcec:	4602      	mov	r2, r0
 800bcee:	b918      	cbnz	r0, 800bcf8 <__mdiff+0x60>
 800bcf0:	4b31      	ldr	r3, [pc, #196]	@ (800bdb8 <__mdiff+0x120>)
 800bcf2:	f240 2145 	movw	r1, #581	@ 0x245
 800bcf6:	e7e3      	b.n	800bcc0 <__mdiff+0x28>
 800bcf8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bcfc:	6926      	ldr	r6, [r4, #16]
 800bcfe:	60c5      	str	r5, [r0, #12]
 800bd00:	f109 0310 	add.w	r3, r9, #16
 800bd04:	f109 0514 	add.w	r5, r9, #20
 800bd08:	f104 0e14 	add.w	lr, r4, #20
 800bd0c:	f100 0b14 	add.w	fp, r0, #20
 800bd10:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bd14:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bd18:	9301      	str	r3, [sp, #4]
 800bd1a:	46d9      	mov	r9, fp
 800bd1c:	f04f 0c00 	mov.w	ip, #0
 800bd20:	9b01      	ldr	r3, [sp, #4]
 800bd22:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bd26:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bd2a:	9301      	str	r3, [sp, #4]
 800bd2c:	fa1f f38a 	uxth.w	r3, sl
 800bd30:	4619      	mov	r1, r3
 800bd32:	b283      	uxth	r3, r0
 800bd34:	1acb      	subs	r3, r1, r3
 800bd36:	0c00      	lsrs	r0, r0, #16
 800bd38:	4463      	add	r3, ip
 800bd3a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bd3e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bd48:	4576      	cmp	r6, lr
 800bd4a:	f849 3b04 	str.w	r3, [r9], #4
 800bd4e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd52:	d8e5      	bhi.n	800bd20 <__mdiff+0x88>
 800bd54:	1b33      	subs	r3, r6, r4
 800bd56:	3b15      	subs	r3, #21
 800bd58:	f023 0303 	bic.w	r3, r3, #3
 800bd5c:	3415      	adds	r4, #21
 800bd5e:	3304      	adds	r3, #4
 800bd60:	42a6      	cmp	r6, r4
 800bd62:	bf38      	it	cc
 800bd64:	2304      	movcc	r3, #4
 800bd66:	441d      	add	r5, r3
 800bd68:	445b      	add	r3, fp
 800bd6a:	461e      	mov	r6, r3
 800bd6c:	462c      	mov	r4, r5
 800bd6e:	4544      	cmp	r4, r8
 800bd70:	d30e      	bcc.n	800bd90 <__mdiff+0xf8>
 800bd72:	f108 0103 	add.w	r1, r8, #3
 800bd76:	1b49      	subs	r1, r1, r5
 800bd78:	f021 0103 	bic.w	r1, r1, #3
 800bd7c:	3d03      	subs	r5, #3
 800bd7e:	45a8      	cmp	r8, r5
 800bd80:	bf38      	it	cc
 800bd82:	2100      	movcc	r1, #0
 800bd84:	440b      	add	r3, r1
 800bd86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd8a:	b191      	cbz	r1, 800bdb2 <__mdiff+0x11a>
 800bd8c:	6117      	str	r7, [r2, #16]
 800bd8e:	e79d      	b.n	800bccc <__mdiff+0x34>
 800bd90:	f854 1b04 	ldr.w	r1, [r4], #4
 800bd94:	46e6      	mov	lr, ip
 800bd96:	0c08      	lsrs	r0, r1, #16
 800bd98:	fa1c fc81 	uxtah	ip, ip, r1
 800bd9c:	4471      	add	r1, lr
 800bd9e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bda2:	b289      	uxth	r1, r1
 800bda4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bda8:	f846 1b04 	str.w	r1, [r6], #4
 800bdac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bdb0:	e7dd      	b.n	800bd6e <__mdiff+0xd6>
 800bdb2:	3f01      	subs	r7, #1
 800bdb4:	e7e7      	b.n	800bd86 <__mdiff+0xee>
 800bdb6:	bf00      	nop
 800bdb8:	0800d3ac 	.word	0x0800d3ac
 800bdbc:	0800d3bd 	.word	0x0800d3bd

0800bdc0 <__d2b>:
 800bdc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bdc4:	460f      	mov	r7, r1
 800bdc6:	2101      	movs	r1, #1
 800bdc8:	ec59 8b10 	vmov	r8, r9, d0
 800bdcc:	4616      	mov	r6, r2
 800bdce:	f7ff fcd5 	bl	800b77c <_Balloc>
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	b930      	cbnz	r0, 800bde4 <__d2b+0x24>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	4b23      	ldr	r3, [pc, #140]	@ (800be68 <__d2b+0xa8>)
 800bdda:	4824      	ldr	r0, [pc, #144]	@ (800be6c <__d2b+0xac>)
 800bddc:	f240 310f 	movw	r1, #783	@ 0x30f
 800bde0:	f000 fad6 	bl	800c390 <__assert_func>
 800bde4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bde8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bdec:	b10d      	cbz	r5, 800bdf2 <__d2b+0x32>
 800bdee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bdf2:	9301      	str	r3, [sp, #4]
 800bdf4:	f1b8 0300 	subs.w	r3, r8, #0
 800bdf8:	d023      	beq.n	800be42 <__d2b+0x82>
 800bdfa:	4668      	mov	r0, sp
 800bdfc:	9300      	str	r3, [sp, #0]
 800bdfe:	f7ff fd84 	bl	800b90a <__lo0bits>
 800be02:	e9dd 1200 	ldrd	r1, r2, [sp]
 800be06:	b1d0      	cbz	r0, 800be3e <__d2b+0x7e>
 800be08:	f1c0 0320 	rsb	r3, r0, #32
 800be0c:	fa02 f303 	lsl.w	r3, r2, r3
 800be10:	430b      	orrs	r3, r1
 800be12:	40c2      	lsrs	r2, r0
 800be14:	6163      	str	r3, [r4, #20]
 800be16:	9201      	str	r2, [sp, #4]
 800be18:	9b01      	ldr	r3, [sp, #4]
 800be1a:	61a3      	str	r3, [r4, #24]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	bf0c      	ite	eq
 800be20:	2201      	moveq	r2, #1
 800be22:	2202      	movne	r2, #2
 800be24:	6122      	str	r2, [r4, #16]
 800be26:	b1a5      	cbz	r5, 800be52 <__d2b+0x92>
 800be28:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800be2c:	4405      	add	r5, r0
 800be2e:	603d      	str	r5, [r7, #0]
 800be30:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800be34:	6030      	str	r0, [r6, #0]
 800be36:	4620      	mov	r0, r4
 800be38:	b003      	add	sp, #12
 800be3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be3e:	6161      	str	r1, [r4, #20]
 800be40:	e7ea      	b.n	800be18 <__d2b+0x58>
 800be42:	a801      	add	r0, sp, #4
 800be44:	f7ff fd61 	bl	800b90a <__lo0bits>
 800be48:	9b01      	ldr	r3, [sp, #4]
 800be4a:	6163      	str	r3, [r4, #20]
 800be4c:	3020      	adds	r0, #32
 800be4e:	2201      	movs	r2, #1
 800be50:	e7e8      	b.n	800be24 <__d2b+0x64>
 800be52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be56:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800be5a:	6038      	str	r0, [r7, #0]
 800be5c:	6918      	ldr	r0, [r3, #16]
 800be5e:	f7ff fd35 	bl	800b8cc <__hi0bits>
 800be62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be66:	e7e5      	b.n	800be34 <__d2b+0x74>
 800be68:	0800d3ac 	.word	0x0800d3ac
 800be6c:	0800d3bd 	.word	0x0800d3bd

0800be70 <__sfputc_r>:
 800be70:	6893      	ldr	r3, [r2, #8]
 800be72:	3b01      	subs	r3, #1
 800be74:	2b00      	cmp	r3, #0
 800be76:	b410      	push	{r4}
 800be78:	6093      	str	r3, [r2, #8]
 800be7a:	da08      	bge.n	800be8e <__sfputc_r+0x1e>
 800be7c:	6994      	ldr	r4, [r2, #24]
 800be7e:	42a3      	cmp	r3, r4
 800be80:	db01      	blt.n	800be86 <__sfputc_r+0x16>
 800be82:	290a      	cmp	r1, #10
 800be84:	d103      	bne.n	800be8e <__sfputc_r+0x1e>
 800be86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be8a:	f7fe bc7c 	b.w	800a786 <__swbuf_r>
 800be8e:	6813      	ldr	r3, [r2, #0]
 800be90:	1c58      	adds	r0, r3, #1
 800be92:	6010      	str	r0, [r2, #0]
 800be94:	7019      	strb	r1, [r3, #0]
 800be96:	4608      	mov	r0, r1
 800be98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be9c:	4770      	bx	lr

0800be9e <__sfputs_r>:
 800be9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea0:	4606      	mov	r6, r0
 800bea2:	460f      	mov	r7, r1
 800bea4:	4614      	mov	r4, r2
 800bea6:	18d5      	adds	r5, r2, r3
 800bea8:	42ac      	cmp	r4, r5
 800beaa:	d101      	bne.n	800beb0 <__sfputs_r+0x12>
 800beac:	2000      	movs	r0, #0
 800beae:	e007      	b.n	800bec0 <__sfputs_r+0x22>
 800beb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beb4:	463a      	mov	r2, r7
 800beb6:	4630      	mov	r0, r6
 800beb8:	f7ff ffda 	bl	800be70 <__sfputc_r>
 800bebc:	1c43      	adds	r3, r0, #1
 800bebe:	d1f3      	bne.n	800bea8 <__sfputs_r+0xa>
 800bec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bec4 <_vfiprintf_r>:
 800bec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec8:	460d      	mov	r5, r1
 800beca:	b09d      	sub	sp, #116	@ 0x74
 800becc:	4614      	mov	r4, r2
 800bece:	4698      	mov	r8, r3
 800bed0:	4606      	mov	r6, r0
 800bed2:	b118      	cbz	r0, 800bedc <_vfiprintf_r+0x18>
 800bed4:	6a03      	ldr	r3, [r0, #32]
 800bed6:	b90b      	cbnz	r3, 800bedc <_vfiprintf_r+0x18>
 800bed8:	f7fe fb6c 	bl	800a5b4 <__sinit>
 800bedc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bede:	07d9      	lsls	r1, r3, #31
 800bee0:	d405      	bmi.n	800beee <_vfiprintf_r+0x2a>
 800bee2:	89ab      	ldrh	r3, [r5, #12]
 800bee4:	059a      	lsls	r2, r3, #22
 800bee6:	d402      	bmi.n	800beee <_vfiprintf_r+0x2a>
 800bee8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800beea:	f7fe fd5e 	bl	800a9aa <__retarget_lock_acquire_recursive>
 800beee:	89ab      	ldrh	r3, [r5, #12]
 800bef0:	071b      	lsls	r3, r3, #28
 800bef2:	d501      	bpl.n	800bef8 <_vfiprintf_r+0x34>
 800bef4:	692b      	ldr	r3, [r5, #16]
 800bef6:	b99b      	cbnz	r3, 800bf20 <_vfiprintf_r+0x5c>
 800bef8:	4629      	mov	r1, r5
 800befa:	4630      	mov	r0, r6
 800befc:	f7fe fc82 	bl	800a804 <__swsetup_r>
 800bf00:	b170      	cbz	r0, 800bf20 <_vfiprintf_r+0x5c>
 800bf02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf04:	07dc      	lsls	r4, r3, #31
 800bf06:	d504      	bpl.n	800bf12 <_vfiprintf_r+0x4e>
 800bf08:	f04f 30ff 	mov.w	r0, #4294967295
 800bf0c:	b01d      	add	sp, #116	@ 0x74
 800bf0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf12:	89ab      	ldrh	r3, [r5, #12]
 800bf14:	0598      	lsls	r0, r3, #22
 800bf16:	d4f7      	bmi.n	800bf08 <_vfiprintf_r+0x44>
 800bf18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf1a:	f7fe fd47 	bl	800a9ac <__retarget_lock_release_recursive>
 800bf1e:	e7f3      	b.n	800bf08 <_vfiprintf_r+0x44>
 800bf20:	2300      	movs	r3, #0
 800bf22:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf24:	2320      	movs	r3, #32
 800bf26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf2e:	2330      	movs	r3, #48	@ 0x30
 800bf30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c0e0 <_vfiprintf_r+0x21c>
 800bf34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf38:	f04f 0901 	mov.w	r9, #1
 800bf3c:	4623      	mov	r3, r4
 800bf3e:	469a      	mov	sl, r3
 800bf40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf44:	b10a      	cbz	r2, 800bf4a <_vfiprintf_r+0x86>
 800bf46:	2a25      	cmp	r2, #37	@ 0x25
 800bf48:	d1f9      	bne.n	800bf3e <_vfiprintf_r+0x7a>
 800bf4a:	ebba 0b04 	subs.w	fp, sl, r4
 800bf4e:	d00b      	beq.n	800bf68 <_vfiprintf_r+0xa4>
 800bf50:	465b      	mov	r3, fp
 800bf52:	4622      	mov	r2, r4
 800bf54:	4629      	mov	r1, r5
 800bf56:	4630      	mov	r0, r6
 800bf58:	f7ff ffa1 	bl	800be9e <__sfputs_r>
 800bf5c:	3001      	adds	r0, #1
 800bf5e:	f000 80a7 	beq.w	800c0b0 <_vfiprintf_r+0x1ec>
 800bf62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf64:	445a      	add	r2, fp
 800bf66:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf68:	f89a 3000 	ldrb.w	r3, [sl]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f000 809f 	beq.w	800c0b0 <_vfiprintf_r+0x1ec>
 800bf72:	2300      	movs	r3, #0
 800bf74:	f04f 32ff 	mov.w	r2, #4294967295
 800bf78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf7c:	f10a 0a01 	add.w	sl, sl, #1
 800bf80:	9304      	str	r3, [sp, #16]
 800bf82:	9307      	str	r3, [sp, #28]
 800bf84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf88:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf8a:	4654      	mov	r4, sl
 800bf8c:	2205      	movs	r2, #5
 800bf8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf92:	4853      	ldr	r0, [pc, #332]	@ (800c0e0 <_vfiprintf_r+0x21c>)
 800bf94:	f7f4 f9a4 	bl	80002e0 <memchr>
 800bf98:	9a04      	ldr	r2, [sp, #16]
 800bf9a:	b9d8      	cbnz	r0, 800bfd4 <_vfiprintf_r+0x110>
 800bf9c:	06d1      	lsls	r1, r2, #27
 800bf9e:	bf44      	itt	mi
 800bfa0:	2320      	movmi	r3, #32
 800bfa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfa6:	0713      	lsls	r3, r2, #28
 800bfa8:	bf44      	itt	mi
 800bfaa:	232b      	movmi	r3, #43	@ 0x2b
 800bfac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfb0:	f89a 3000 	ldrb.w	r3, [sl]
 800bfb4:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfb6:	d015      	beq.n	800bfe4 <_vfiprintf_r+0x120>
 800bfb8:	9a07      	ldr	r2, [sp, #28]
 800bfba:	4654      	mov	r4, sl
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	f04f 0c0a 	mov.w	ip, #10
 800bfc2:	4621      	mov	r1, r4
 800bfc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfc8:	3b30      	subs	r3, #48	@ 0x30
 800bfca:	2b09      	cmp	r3, #9
 800bfcc:	d94b      	bls.n	800c066 <_vfiprintf_r+0x1a2>
 800bfce:	b1b0      	cbz	r0, 800bffe <_vfiprintf_r+0x13a>
 800bfd0:	9207      	str	r2, [sp, #28]
 800bfd2:	e014      	b.n	800bffe <_vfiprintf_r+0x13a>
 800bfd4:	eba0 0308 	sub.w	r3, r0, r8
 800bfd8:	fa09 f303 	lsl.w	r3, r9, r3
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	9304      	str	r3, [sp, #16]
 800bfe0:	46a2      	mov	sl, r4
 800bfe2:	e7d2      	b.n	800bf8a <_vfiprintf_r+0xc6>
 800bfe4:	9b03      	ldr	r3, [sp, #12]
 800bfe6:	1d19      	adds	r1, r3, #4
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	9103      	str	r1, [sp, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	bfbb      	ittet	lt
 800bff0:	425b      	neglt	r3, r3
 800bff2:	f042 0202 	orrlt.w	r2, r2, #2
 800bff6:	9307      	strge	r3, [sp, #28]
 800bff8:	9307      	strlt	r3, [sp, #28]
 800bffa:	bfb8      	it	lt
 800bffc:	9204      	strlt	r2, [sp, #16]
 800bffe:	7823      	ldrb	r3, [r4, #0]
 800c000:	2b2e      	cmp	r3, #46	@ 0x2e
 800c002:	d10a      	bne.n	800c01a <_vfiprintf_r+0x156>
 800c004:	7863      	ldrb	r3, [r4, #1]
 800c006:	2b2a      	cmp	r3, #42	@ 0x2a
 800c008:	d132      	bne.n	800c070 <_vfiprintf_r+0x1ac>
 800c00a:	9b03      	ldr	r3, [sp, #12]
 800c00c:	1d1a      	adds	r2, r3, #4
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	9203      	str	r2, [sp, #12]
 800c012:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c016:	3402      	adds	r4, #2
 800c018:	9305      	str	r3, [sp, #20]
 800c01a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c0f0 <_vfiprintf_r+0x22c>
 800c01e:	7821      	ldrb	r1, [r4, #0]
 800c020:	2203      	movs	r2, #3
 800c022:	4650      	mov	r0, sl
 800c024:	f7f4 f95c 	bl	80002e0 <memchr>
 800c028:	b138      	cbz	r0, 800c03a <_vfiprintf_r+0x176>
 800c02a:	9b04      	ldr	r3, [sp, #16]
 800c02c:	eba0 000a 	sub.w	r0, r0, sl
 800c030:	2240      	movs	r2, #64	@ 0x40
 800c032:	4082      	lsls	r2, r0
 800c034:	4313      	orrs	r3, r2
 800c036:	3401      	adds	r4, #1
 800c038:	9304      	str	r3, [sp, #16]
 800c03a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c03e:	4829      	ldr	r0, [pc, #164]	@ (800c0e4 <_vfiprintf_r+0x220>)
 800c040:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c044:	2206      	movs	r2, #6
 800c046:	f7f4 f94b 	bl	80002e0 <memchr>
 800c04a:	2800      	cmp	r0, #0
 800c04c:	d03f      	beq.n	800c0ce <_vfiprintf_r+0x20a>
 800c04e:	4b26      	ldr	r3, [pc, #152]	@ (800c0e8 <_vfiprintf_r+0x224>)
 800c050:	bb1b      	cbnz	r3, 800c09a <_vfiprintf_r+0x1d6>
 800c052:	9b03      	ldr	r3, [sp, #12]
 800c054:	3307      	adds	r3, #7
 800c056:	f023 0307 	bic.w	r3, r3, #7
 800c05a:	3308      	adds	r3, #8
 800c05c:	9303      	str	r3, [sp, #12]
 800c05e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c060:	443b      	add	r3, r7
 800c062:	9309      	str	r3, [sp, #36]	@ 0x24
 800c064:	e76a      	b.n	800bf3c <_vfiprintf_r+0x78>
 800c066:	fb0c 3202 	mla	r2, ip, r2, r3
 800c06a:	460c      	mov	r4, r1
 800c06c:	2001      	movs	r0, #1
 800c06e:	e7a8      	b.n	800bfc2 <_vfiprintf_r+0xfe>
 800c070:	2300      	movs	r3, #0
 800c072:	3401      	adds	r4, #1
 800c074:	9305      	str	r3, [sp, #20]
 800c076:	4619      	mov	r1, r3
 800c078:	f04f 0c0a 	mov.w	ip, #10
 800c07c:	4620      	mov	r0, r4
 800c07e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c082:	3a30      	subs	r2, #48	@ 0x30
 800c084:	2a09      	cmp	r2, #9
 800c086:	d903      	bls.n	800c090 <_vfiprintf_r+0x1cc>
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d0c6      	beq.n	800c01a <_vfiprintf_r+0x156>
 800c08c:	9105      	str	r1, [sp, #20]
 800c08e:	e7c4      	b.n	800c01a <_vfiprintf_r+0x156>
 800c090:	fb0c 2101 	mla	r1, ip, r1, r2
 800c094:	4604      	mov	r4, r0
 800c096:	2301      	movs	r3, #1
 800c098:	e7f0      	b.n	800c07c <_vfiprintf_r+0x1b8>
 800c09a:	ab03      	add	r3, sp, #12
 800c09c:	9300      	str	r3, [sp, #0]
 800c09e:	462a      	mov	r2, r5
 800c0a0:	4b12      	ldr	r3, [pc, #72]	@ (800c0ec <_vfiprintf_r+0x228>)
 800c0a2:	a904      	add	r1, sp, #16
 800c0a4:	4630      	mov	r0, r6
 800c0a6:	f7fd fe53 	bl	8009d50 <_printf_float>
 800c0aa:	4607      	mov	r7, r0
 800c0ac:	1c78      	adds	r0, r7, #1
 800c0ae:	d1d6      	bne.n	800c05e <_vfiprintf_r+0x19a>
 800c0b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c0b2:	07d9      	lsls	r1, r3, #31
 800c0b4:	d405      	bmi.n	800c0c2 <_vfiprintf_r+0x1fe>
 800c0b6:	89ab      	ldrh	r3, [r5, #12]
 800c0b8:	059a      	lsls	r2, r3, #22
 800c0ba:	d402      	bmi.n	800c0c2 <_vfiprintf_r+0x1fe>
 800c0bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c0be:	f7fe fc75 	bl	800a9ac <__retarget_lock_release_recursive>
 800c0c2:	89ab      	ldrh	r3, [r5, #12]
 800c0c4:	065b      	lsls	r3, r3, #25
 800c0c6:	f53f af1f 	bmi.w	800bf08 <_vfiprintf_r+0x44>
 800c0ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c0cc:	e71e      	b.n	800bf0c <_vfiprintf_r+0x48>
 800c0ce:	ab03      	add	r3, sp, #12
 800c0d0:	9300      	str	r3, [sp, #0]
 800c0d2:	462a      	mov	r2, r5
 800c0d4:	4b05      	ldr	r3, [pc, #20]	@ (800c0ec <_vfiprintf_r+0x228>)
 800c0d6:	a904      	add	r1, sp, #16
 800c0d8:	4630      	mov	r0, r6
 800c0da:	f7fe f8c1 	bl	800a260 <_printf_i>
 800c0de:	e7e4      	b.n	800c0aa <_vfiprintf_r+0x1e6>
 800c0e0:	0800d416 	.word	0x0800d416
 800c0e4:	0800d420 	.word	0x0800d420
 800c0e8:	08009d51 	.word	0x08009d51
 800c0ec:	0800be9f 	.word	0x0800be9f
 800c0f0:	0800d41c 	.word	0x0800d41c

0800c0f4 <__sflush_r>:
 800c0f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0fc:	0716      	lsls	r6, r2, #28
 800c0fe:	4605      	mov	r5, r0
 800c100:	460c      	mov	r4, r1
 800c102:	d454      	bmi.n	800c1ae <__sflush_r+0xba>
 800c104:	684b      	ldr	r3, [r1, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	dc02      	bgt.n	800c110 <__sflush_r+0x1c>
 800c10a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	dd48      	ble.n	800c1a2 <__sflush_r+0xae>
 800c110:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c112:	2e00      	cmp	r6, #0
 800c114:	d045      	beq.n	800c1a2 <__sflush_r+0xae>
 800c116:	2300      	movs	r3, #0
 800c118:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c11c:	682f      	ldr	r7, [r5, #0]
 800c11e:	6a21      	ldr	r1, [r4, #32]
 800c120:	602b      	str	r3, [r5, #0]
 800c122:	d030      	beq.n	800c186 <__sflush_r+0x92>
 800c124:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c126:	89a3      	ldrh	r3, [r4, #12]
 800c128:	0759      	lsls	r1, r3, #29
 800c12a:	d505      	bpl.n	800c138 <__sflush_r+0x44>
 800c12c:	6863      	ldr	r3, [r4, #4]
 800c12e:	1ad2      	subs	r2, r2, r3
 800c130:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c132:	b10b      	cbz	r3, 800c138 <__sflush_r+0x44>
 800c134:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c136:	1ad2      	subs	r2, r2, r3
 800c138:	2300      	movs	r3, #0
 800c13a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c13c:	6a21      	ldr	r1, [r4, #32]
 800c13e:	4628      	mov	r0, r5
 800c140:	47b0      	blx	r6
 800c142:	1c43      	adds	r3, r0, #1
 800c144:	89a3      	ldrh	r3, [r4, #12]
 800c146:	d106      	bne.n	800c156 <__sflush_r+0x62>
 800c148:	6829      	ldr	r1, [r5, #0]
 800c14a:	291d      	cmp	r1, #29
 800c14c:	d82b      	bhi.n	800c1a6 <__sflush_r+0xb2>
 800c14e:	4a2a      	ldr	r2, [pc, #168]	@ (800c1f8 <__sflush_r+0x104>)
 800c150:	40ca      	lsrs	r2, r1
 800c152:	07d6      	lsls	r6, r2, #31
 800c154:	d527      	bpl.n	800c1a6 <__sflush_r+0xb2>
 800c156:	2200      	movs	r2, #0
 800c158:	6062      	str	r2, [r4, #4]
 800c15a:	04d9      	lsls	r1, r3, #19
 800c15c:	6922      	ldr	r2, [r4, #16]
 800c15e:	6022      	str	r2, [r4, #0]
 800c160:	d504      	bpl.n	800c16c <__sflush_r+0x78>
 800c162:	1c42      	adds	r2, r0, #1
 800c164:	d101      	bne.n	800c16a <__sflush_r+0x76>
 800c166:	682b      	ldr	r3, [r5, #0]
 800c168:	b903      	cbnz	r3, 800c16c <__sflush_r+0x78>
 800c16a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c16c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c16e:	602f      	str	r7, [r5, #0]
 800c170:	b1b9      	cbz	r1, 800c1a2 <__sflush_r+0xae>
 800c172:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c176:	4299      	cmp	r1, r3
 800c178:	d002      	beq.n	800c180 <__sflush_r+0x8c>
 800c17a:	4628      	mov	r0, r5
 800c17c:	f7ff f9fe 	bl	800b57c <_free_r>
 800c180:	2300      	movs	r3, #0
 800c182:	6363      	str	r3, [r4, #52]	@ 0x34
 800c184:	e00d      	b.n	800c1a2 <__sflush_r+0xae>
 800c186:	2301      	movs	r3, #1
 800c188:	4628      	mov	r0, r5
 800c18a:	47b0      	blx	r6
 800c18c:	4602      	mov	r2, r0
 800c18e:	1c50      	adds	r0, r2, #1
 800c190:	d1c9      	bne.n	800c126 <__sflush_r+0x32>
 800c192:	682b      	ldr	r3, [r5, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d0c6      	beq.n	800c126 <__sflush_r+0x32>
 800c198:	2b1d      	cmp	r3, #29
 800c19a:	d001      	beq.n	800c1a0 <__sflush_r+0xac>
 800c19c:	2b16      	cmp	r3, #22
 800c19e:	d11e      	bne.n	800c1de <__sflush_r+0xea>
 800c1a0:	602f      	str	r7, [r5, #0]
 800c1a2:	2000      	movs	r0, #0
 800c1a4:	e022      	b.n	800c1ec <__sflush_r+0xf8>
 800c1a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1aa:	b21b      	sxth	r3, r3
 800c1ac:	e01b      	b.n	800c1e6 <__sflush_r+0xf2>
 800c1ae:	690f      	ldr	r7, [r1, #16]
 800c1b0:	2f00      	cmp	r7, #0
 800c1b2:	d0f6      	beq.n	800c1a2 <__sflush_r+0xae>
 800c1b4:	0793      	lsls	r3, r2, #30
 800c1b6:	680e      	ldr	r6, [r1, #0]
 800c1b8:	bf08      	it	eq
 800c1ba:	694b      	ldreq	r3, [r1, #20]
 800c1bc:	600f      	str	r7, [r1, #0]
 800c1be:	bf18      	it	ne
 800c1c0:	2300      	movne	r3, #0
 800c1c2:	eba6 0807 	sub.w	r8, r6, r7
 800c1c6:	608b      	str	r3, [r1, #8]
 800c1c8:	f1b8 0f00 	cmp.w	r8, #0
 800c1cc:	dde9      	ble.n	800c1a2 <__sflush_r+0xae>
 800c1ce:	6a21      	ldr	r1, [r4, #32]
 800c1d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c1d2:	4643      	mov	r3, r8
 800c1d4:	463a      	mov	r2, r7
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	47b0      	blx	r6
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	dc08      	bgt.n	800c1f0 <__sflush_r+0xfc>
 800c1de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1e6:	81a3      	strh	r3, [r4, #12]
 800c1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f0:	4407      	add	r7, r0
 800c1f2:	eba8 0800 	sub.w	r8, r8, r0
 800c1f6:	e7e7      	b.n	800c1c8 <__sflush_r+0xd4>
 800c1f8:	20400001 	.word	0x20400001

0800c1fc <_fflush_r>:
 800c1fc:	b538      	push	{r3, r4, r5, lr}
 800c1fe:	690b      	ldr	r3, [r1, #16]
 800c200:	4605      	mov	r5, r0
 800c202:	460c      	mov	r4, r1
 800c204:	b913      	cbnz	r3, 800c20c <_fflush_r+0x10>
 800c206:	2500      	movs	r5, #0
 800c208:	4628      	mov	r0, r5
 800c20a:	bd38      	pop	{r3, r4, r5, pc}
 800c20c:	b118      	cbz	r0, 800c216 <_fflush_r+0x1a>
 800c20e:	6a03      	ldr	r3, [r0, #32]
 800c210:	b90b      	cbnz	r3, 800c216 <_fflush_r+0x1a>
 800c212:	f7fe f9cf 	bl	800a5b4 <__sinit>
 800c216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d0f3      	beq.n	800c206 <_fflush_r+0xa>
 800c21e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c220:	07d0      	lsls	r0, r2, #31
 800c222:	d404      	bmi.n	800c22e <_fflush_r+0x32>
 800c224:	0599      	lsls	r1, r3, #22
 800c226:	d402      	bmi.n	800c22e <_fflush_r+0x32>
 800c228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c22a:	f7fe fbbe 	bl	800a9aa <__retarget_lock_acquire_recursive>
 800c22e:	4628      	mov	r0, r5
 800c230:	4621      	mov	r1, r4
 800c232:	f7ff ff5f 	bl	800c0f4 <__sflush_r>
 800c236:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c238:	07da      	lsls	r2, r3, #31
 800c23a:	4605      	mov	r5, r0
 800c23c:	d4e4      	bmi.n	800c208 <_fflush_r+0xc>
 800c23e:	89a3      	ldrh	r3, [r4, #12]
 800c240:	059b      	lsls	r3, r3, #22
 800c242:	d4e1      	bmi.n	800c208 <_fflush_r+0xc>
 800c244:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c246:	f7fe fbb1 	bl	800a9ac <__retarget_lock_release_recursive>
 800c24a:	e7dd      	b.n	800c208 <_fflush_r+0xc>

0800c24c <__swhatbuf_r>:
 800c24c:	b570      	push	{r4, r5, r6, lr}
 800c24e:	460c      	mov	r4, r1
 800c250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c254:	2900      	cmp	r1, #0
 800c256:	b096      	sub	sp, #88	@ 0x58
 800c258:	4615      	mov	r5, r2
 800c25a:	461e      	mov	r6, r3
 800c25c:	da0d      	bge.n	800c27a <__swhatbuf_r+0x2e>
 800c25e:	89a3      	ldrh	r3, [r4, #12]
 800c260:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c264:	f04f 0100 	mov.w	r1, #0
 800c268:	bf14      	ite	ne
 800c26a:	2340      	movne	r3, #64	@ 0x40
 800c26c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c270:	2000      	movs	r0, #0
 800c272:	6031      	str	r1, [r6, #0]
 800c274:	602b      	str	r3, [r5, #0]
 800c276:	b016      	add	sp, #88	@ 0x58
 800c278:	bd70      	pop	{r4, r5, r6, pc}
 800c27a:	466a      	mov	r2, sp
 800c27c:	f000 f848 	bl	800c310 <_fstat_r>
 800c280:	2800      	cmp	r0, #0
 800c282:	dbec      	blt.n	800c25e <__swhatbuf_r+0x12>
 800c284:	9901      	ldr	r1, [sp, #4]
 800c286:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c28a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c28e:	4259      	negs	r1, r3
 800c290:	4159      	adcs	r1, r3
 800c292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c296:	e7eb      	b.n	800c270 <__swhatbuf_r+0x24>

0800c298 <__smakebuf_r>:
 800c298:	898b      	ldrh	r3, [r1, #12]
 800c29a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c29c:	079d      	lsls	r5, r3, #30
 800c29e:	4606      	mov	r6, r0
 800c2a0:	460c      	mov	r4, r1
 800c2a2:	d507      	bpl.n	800c2b4 <__smakebuf_r+0x1c>
 800c2a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c2a8:	6023      	str	r3, [r4, #0]
 800c2aa:	6123      	str	r3, [r4, #16]
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	6163      	str	r3, [r4, #20]
 800c2b0:	b003      	add	sp, #12
 800c2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2b4:	ab01      	add	r3, sp, #4
 800c2b6:	466a      	mov	r2, sp
 800c2b8:	f7ff ffc8 	bl	800c24c <__swhatbuf_r>
 800c2bc:	9f00      	ldr	r7, [sp, #0]
 800c2be:	4605      	mov	r5, r0
 800c2c0:	4639      	mov	r1, r7
 800c2c2:	4630      	mov	r0, r6
 800c2c4:	f7ff f9ce 	bl	800b664 <_malloc_r>
 800c2c8:	b948      	cbnz	r0, 800c2de <__smakebuf_r+0x46>
 800c2ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2ce:	059a      	lsls	r2, r3, #22
 800c2d0:	d4ee      	bmi.n	800c2b0 <__smakebuf_r+0x18>
 800c2d2:	f023 0303 	bic.w	r3, r3, #3
 800c2d6:	f043 0302 	orr.w	r3, r3, #2
 800c2da:	81a3      	strh	r3, [r4, #12]
 800c2dc:	e7e2      	b.n	800c2a4 <__smakebuf_r+0xc>
 800c2de:	89a3      	ldrh	r3, [r4, #12]
 800c2e0:	6020      	str	r0, [r4, #0]
 800c2e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2e6:	81a3      	strh	r3, [r4, #12]
 800c2e8:	9b01      	ldr	r3, [sp, #4]
 800c2ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c2ee:	b15b      	cbz	r3, 800c308 <__smakebuf_r+0x70>
 800c2f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	f000 f81d 	bl	800c334 <_isatty_r>
 800c2fa:	b128      	cbz	r0, 800c308 <__smakebuf_r+0x70>
 800c2fc:	89a3      	ldrh	r3, [r4, #12]
 800c2fe:	f023 0303 	bic.w	r3, r3, #3
 800c302:	f043 0301 	orr.w	r3, r3, #1
 800c306:	81a3      	strh	r3, [r4, #12]
 800c308:	89a3      	ldrh	r3, [r4, #12]
 800c30a:	431d      	orrs	r5, r3
 800c30c:	81a5      	strh	r5, [r4, #12]
 800c30e:	e7cf      	b.n	800c2b0 <__smakebuf_r+0x18>

0800c310 <_fstat_r>:
 800c310:	b538      	push	{r3, r4, r5, lr}
 800c312:	4d07      	ldr	r5, [pc, #28]	@ (800c330 <_fstat_r+0x20>)
 800c314:	2300      	movs	r3, #0
 800c316:	4604      	mov	r4, r0
 800c318:	4608      	mov	r0, r1
 800c31a:	4611      	mov	r1, r2
 800c31c:	602b      	str	r3, [r5, #0]
 800c31e:	f7f5 f8e8 	bl	80014f2 <_fstat>
 800c322:	1c43      	adds	r3, r0, #1
 800c324:	d102      	bne.n	800c32c <_fstat_r+0x1c>
 800c326:	682b      	ldr	r3, [r5, #0]
 800c328:	b103      	cbz	r3, 800c32c <_fstat_r+0x1c>
 800c32a:	6023      	str	r3, [r4, #0]
 800c32c:	bd38      	pop	{r3, r4, r5, pc}
 800c32e:	bf00      	nop
 800c330:	240004c8 	.word	0x240004c8

0800c334 <_isatty_r>:
 800c334:	b538      	push	{r3, r4, r5, lr}
 800c336:	4d06      	ldr	r5, [pc, #24]	@ (800c350 <_isatty_r+0x1c>)
 800c338:	2300      	movs	r3, #0
 800c33a:	4604      	mov	r4, r0
 800c33c:	4608      	mov	r0, r1
 800c33e:	602b      	str	r3, [r5, #0]
 800c340:	f7f5 f8e7 	bl	8001512 <_isatty>
 800c344:	1c43      	adds	r3, r0, #1
 800c346:	d102      	bne.n	800c34e <_isatty_r+0x1a>
 800c348:	682b      	ldr	r3, [r5, #0]
 800c34a:	b103      	cbz	r3, 800c34e <_isatty_r+0x1a>
 800c34c:	6023      	str	r3, [r4, #0]
 800c34e:	bd38      	pop	{r3, r4, r5, pc}
 800c350:	240004c8 	.word	0x240004c8

0800c354 <_sbrk_r>:
 800c354:	b538      	push	{r3, r4, r5, lr}
 800c356:	4d06      	ldr	r5, [pc, #24]	@ (800c370 <_sbrk_r+0x1c>)
 800c358:	2300      	movs	r3, #0
 800c35a:	4604      	mov	r4, r0
 800c35c:	4608      	mov	r0, r1
 800c35e:	602b      	str	r3, [r5, #0]
 800c360:	f7f5 f8f0 	bl	8001544 <_sbrk>
 800c364:	1c43      	adds	r3, r0, #1
 800c366:	d102      	bne.n	800c36e <_sbrk_r+0x1a>
 800c368:	682b      	ldr	r3, [r5, #0]
 800c36a:	b103      	cbz	r3, 800c36e <_sbrk_r+0x1a>
 800c36c:	6023      	str	r3, [r4, #0]
 800c36e:	bd38      	pop	{r3, r4, r5, pc}
 800c370:	240004c8 	.word	0x240004c8

0800c374 <memcpy>:
 800c374:	440a      	add	r2, r1
 800c376:	4291      	cmp	r1, r2
 800c378:	f100 33ff 	add.w	r3, r0, #4294967295
 800c37c:	d100      	bne.n	800c380 <memcpy+0xc>
 800c37e:	4770      	bx	lr
 800c380:	b510      	push	{r4, lr}
 800c382:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c386:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c38a:	4291      	cmp	r1, r2
 800c38c:	d1f9      	bne.n	800c382 <memcpy+0xe>
 800c38e:	bd10      	pop	{r4, pc}

0800c390 <__assert_func>:
 800c390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c392:	4614      	mov	r4, r2
 800c394:	461a      	mov	r2, r3
 800c396:	4b09      	ldr	r3, [pc, #36]	@ (800c3bc <__assert_func+0x2c>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4605      	mov	r5, r0
 800c39c:	68d8      	ldr	r0, [r3, #12]
 800c39e:	b14c      	cbz	r4, 800c3b4 <__assert_func+0x24>
 800c3a0:	4b07      	ldr	r3, [pc, #28]	@ (800c3c0 <__assert_func+0x30>)
 800c3a2:	9100      	str	r1, [sp, #0]
 800c3a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c3a8:	4906      	ldr	r1, [pc, #24]	@ (800c3c4 <__assert_func+0x34>)
 800c3aa:	462b      	mov	r3, r5
 800c3ac:	f000 f842 	bl	800c434 <fiprintf>
 800c3b0:	f000 f852 	bl	800c458 <abort>
 800c3b4:	4b04      	ldr	r3, [pc, #16]	@ (800c3c8 <__assert_func+0x38>)
 800c3b6:	461c      	mov	r4, r3
 800c3b8:	e7f3      	b.n	800c3a2 <__assert_func+0x12>
 800c3ba:	bf00      	nop
 800c3bc:	2400001c 	.word	0x2400001c
 800c3c0:	0800d431 	.word	0x0800d431
 800c3c4:	0800d43e 	.word	0x0800d43e
 800c3c8:	0800d46c 	.word	0x0800d46c

0800c3cc <_calloc_r>:
 800c3cc:	b570      	push	{r4, r5, r6, lr}
 800c3ce:	fba1 5402 	umull	r5, r4, r1, r2
 800c3d2:	b934      	cbnz	r4, 800c3e2 <_calloc_r+0x16>
 800c3d4:	4629      	mov	r1, r5
 800c3d6:	f7ff f945 	bl	800b664 <_malloc_r>
 800c3da:	4606      	mov	r6, r0
 800c3dc:	b928      	cbnz	r0, 800c3ea <_calloc_r+0x1e>
 800c3de:	4630      	mov	r0, r6
 800c3e0:	bd70      	pop	{r4, r5, r6, pc}
 800c3e2:	220c      	movs	r2, #12
 800c3e4:	6002      	str	r2, [r0, #0]
 800c3e6:	2600      	movs	r6, #0
 800c3e8:	e7f9      	b.n	800c3de <_calloc_r+0x12>
 800c3ea:	462a      	mov	r2, r5
 800c3ec:	4621      	mov	r1, r4
 800c3ee:	f7fe fa5f 	bl	800a8b0 <memset>
 800c3f2:	e7f4      	b.n	800c3de <_calloc_r+0x12>

0800c3f4 <__ascii_mbtowc>:
 800c3f4:	b082      	sub	sp, #8
 800c3f6:	b901      	cbnz	r1, 800c3fa <__ascii_mbtowc+0x6>
 800c3f8:	a901      	add	r1, sp, #4
 800c3fa:	b142      	cbz	r2, 800c40e <__ascii_mbtowc+0x1a>
 800c3fc:	b14b      	cbz	r3, 800c412 <__ascii_mbtowc+0x1e>
 800c3fe:	7813      	ldrb	r3, [r2, #0]
 800c400:	600b      	str	r3, [r1, #0]
 800c402:	7812      	ldrb	r2, [r2, #0]
 800c404:	1e10      	subs	r0, r2, #0
 800c406:	bf18      	it	ne
 800c408:	2001      	movne	r0, #1
 800c40a:	b002      	add	sp, #8
 800c40c:	4770      	bx	lr
 800c40e:	4610      	mov	r0, r2
 800c410:	e7fb      	b.n	800c40a <__ascii_mbtowc+0x16>
 800c412:	f06f 0001 	mvn.w	r0, #1
 800c416:	e7f8      	b.n	800c40a <__ascii_mbtowc+0x16>

0800c418 <__ascii_wctomb>:
 800c418:	4603      	mov	r3, r0
 800c41a:	4608      	mov	r0, r1
 800c41c:	b141      	cbz	r1, 800c430 <__ascii_wctomb+0x18>
 800c41e:	2aff      	cmp	r2, #255	@ 0xff
 800c420:	d904      	bls.n	800c42c <__ascii_wctomb+0x14>
 800c422:	228a      	movs	r2, #138	@ 0x8a
 800c424:	601a      	str	r2, [r3, #0]
 800c426:	f04f 30ff 	mov.w	r0, #4294967295
 800c42a:	4770      	bx	lr
 800c42c:	700a      	strb	r2, [r1, #0]
 800c42e:	2001      	movs	r0, #1
 800c430:	4770      	bx	lr
	...

0800c434 <fiprintf>:
 800c434:	b40e      	push	{r1, r2, r3}
 800c436:	b503      	push	{r0, r1, lr}
 800c438:	4601      	mov	r1, r0
 800c43a:	ab03      	add	r3, sp, #12
 800c43c:	4805      	ldr	r0, [pc, #20]	@ (800c454 <fiprintf+0x20>)
 800c43e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c442:	6800      	ldr	r0, [r0, #0]
 800c444:	9301      	str	r3, [sp, #4]
 800c446:	f7ff fd3d 	bl	800bec4 <_vfiprintf_r>
 800c44a:	b002      	add	sp, #8
 800c44c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c450:	b003      	add	sp, #12
 800c452:	4770      	bx	lr
 800c454:	2400001c 	.word	0x2400001c

0800c458 <abort>:
 800c458:	b508      	push	{r3, lr}
 800c45a:	2006      	movs	r0, #6
 800c45c:	f000 f82c 	bl	800c4b8 <raise>
 800c460:	2001      	movs	r0, #1
 800c462:	f7f5 f812 	bl	800148a <_exit>

0800c466 <_raise_r>:
 800c466:	291f      	cmp	r1, #31
 800c468:	b538      	push	{r3, r4, r5, lr}
 800c46a:	4605      	mov	r5, r0
 800c46c:	460c      	mov	r4, r1
 800c46e:	d904      	bls.n	800c47a <_raise_r+0x14>
 800c470:	2316      	movs	r3, #22
 800c472:	6003      	str	r3, [r0, #0]
 800c474:	f04f 30ff 	mov.w	r0, #4294967295
 800c478:	bd38      	pop	{r3, r4, r5, pc}
 800c47a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c47c:	b112      	cbz	r2, 800c484 <_raise_r+0x1e>
 800c47e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c482:	b94b      	cbnz	r3, 800c498 <_raise_r+0x32>
 800c484:	4628      	mov	r0, r5
 800c486:	f000 f831 	bl	800c4ec <_getpid_r>
 800c48a:	4622      	mov	r2, r4
 800c48c:	4601      	mov	r1, r0
 800c48e:	4628      	mov	r0, r5
 800c490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c494:	f000 b818 	b.w	800c4c8 <_kill_r>
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d00a      	beq.n	800c4b2 <_raise_r+0x4c>
 800c49c:	1c59      	adds	r1, r3, #1
 800c49e:	d103      	bne.n	800c4a8 <_raise_r+0x42>
 800c4a0:	2316      	movs	r3, #22
 800c4a2:	6003      	str	r3, [r0, #0]
 800c4a4:	2001      	movs	r0, #1
 800c4a6:	e7e7      	b.n	800c478 <_raise_r+0x12>
 800c4a8:	2100      	movs	r1, #0
 800c4aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	4798      	blx	r3
 800c4b2:	2000      	movs	r0, #0
 800c4b4:	e7e0      	b.n	800c478 <_raise_r+0x12>
	...

0800c4b8 <raise>:
 800c4b8:	4b02      	ldr	r3, [pc, #8]	@ (800c4c4 <raise+0xc>)
 800c4ba:	4601      	mov	r1, r0
 800c4bc:	6818      	ldr	r0, [r3, #0]
 800c4be:	f7ff bfd2 	b.w	800c466 <_raise_r>
 800c4c2:	bf00      	nop
 800c4c4:	2400001c 	.word	0x2400001c

0800c4c8 <_kill_r>:
 800c4c8:	b538      	push	{r3, r4, r5, lr}
 800c4ca:	4d07      	ldr	r5, [pc, #28]	@ (800c4e8 <_kill_r+0x20>)
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	4608      	mov	r0, r1
 800c4d2:	4611      	mov	r1, r2
 800c4d4:	602b      	str	r3, [r5, #0]
 800c4d6:	f7f4 ffc8 	bl	800146a <_kill>
 800c4da:	1c43      	adds	r3, r0, #1
 800c4dc:	d102      	bne.n	800c4e4 <_kill_r+0x1c>
 800c4de:	682b      	ldr	r3, [r5, #0]
 800c4e0:	b103      	cbz	r3, 800c4e4 <_kill_r+0x1c>
 800c4e2:	6023      	str	r3, [r4, #0]
 800c4e4:	bd38      	pop	{r3, r4, r5, pc}
 800c4e6:	bf00      	nop
 800c4e8:	240004c8 	.word	0x240004c8

0800c4ec <_getpid_r>:
 800c4ec:	f7f4 bfb5 	b.w	800145a <_getpid>

0800c4f0 <atan2f>:
 800c4f0:	f000 b822 	b.w	800c538 <__ieee754_atan2f>

0800c4f4 <sqrtf>:
 800c4f4:	b508      	push	{r3, lr}
 800c4f6:	ed2d 8b02 	vpush	{d8}
 800c4fa:	eeb0 8a40 	vmov.f32	s16, s0
 800c4fe:	f000 f817 	bl	800c530 <__ieee754_sqrtf>
 800c502:	eeb4 8a48 	vcmp.f32	s16, s16
 800c506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c50a:	d60c      	bvs.n	800c526 <sqrtf+0x32>
 800c50c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c52c <sqrtf+0x38>
 800c510:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c518:	d505      	bpl.n	800c526 <sqrtf+0x32>
 800c51a:	f7fe fa1b 	bl	800a954 <__errno>
 800c51e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c522:	2321      	movs	r3, #33	@ 0x21
 800c524:	6003      	str	r3, [r0, #0]
 800c526:	ecbd 8b02 	vpop	{d8}
 800c52a:	bd08      	pop	{r3, pc}
 800c52c:	00000000 	.word	0x00000000

0800c530 <__ieee754_sqrtf>:
 800c530:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c534:	4770      	bx	lr
	...

0800c538 <__ieee754_atan2f>:
 800c538:	ee10 2a90 	vmov	r2, s1
 800c53c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800c540:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c544:	b510      	push	{r4, lr}
 800c546:	eef0 7a40 	vmov.f32	s15, s0
 800c54a:	d806      	bhi.n	800c55a <__ieee754_atan2f+0x22>
 800c54c:	ee10 0a10 	vmov	r0, s0
 800c550:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c554:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c558:	d904      	bls.n	800c564 <__ieee754_atan2f+0x2c>
 800c55a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c55e:	eeb0 0a67 	vmov.f32	s0, s15
 800c562:	bd10      	pop	{r4, pc}
 800c564:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800c568:	d103      	bne.n	800c572 <__ieee754_atan2f+0x3a>
 800c56a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c56e:	f000 b881 	b.w	800c674 <atanf>
 800c572:	1794      	asrs	r4, r2, #30
 800c574:	f004 0402 	and.w	r4, r4, #2
 800c578:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c57c:	b93b      	cbnz	r3, 800c58e <__ieee754_atan2f+0x56>
 800c57e:	2c02      	cmp	r4, #2
 800c580:	d05c      	beq.n	800c63c <__ieee754_atan2f+0x104>
 800c582:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800c650 <__ieee754_atan2f+0x118>
 800c586:	2c03      	cmp	r4, #3
 800c588:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800c58c:	e7e7      	b.n	800c55e <__ieee754_atan2f+0x26>
 800c58e:	b939      	cbnz	r1, 800c5a0 <__ieee754_atan2f+0x68>
 800c590:	eddf 7a30 	vldr	s15, [pc, #192]	@ 800c654 <__ieee754_atan2f+0x11c>
 800c594:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800c658 <__ieee754_atan2f+0x120>
 800c598:	2800      	cmp	r0, #0
 800c59a:	fe67 7a27 	vselge.f32	s15, s14, s15
 800c59e:	e7de      	b.n	800c55e <__ieee754_atan2f+0x26>
 800c5a0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c5a4:	d110      	bne.n	800c5c8 <__ieee754_atan2f+0x90>
 800c5a6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c5aa:	f104 34ff 	add.w	r4, r4, #4294967295
 800c5ae:	d107      	bne.n	800c5c0 <__ieee754_atan2f+0x88>
 800c5b0:	2c02      	cmp	r4, #2
 800c5b2:	d846      	bhi.n	800c642 <__ieee754_atan2f+0x10a>
 800c5b4:	4b29      	ldr	r3, [pc, #164]	@ (800c65c <__ieee754_atan2f+0x124>)
 800c5b6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c5ba:	edd3 7a00 	vldr	s15, [r3]
 800c5be:	e7ce      	b.n	800c55e <__ieee754_atan2f+0x26>
 800c5c0:	2c02      	cmp	r4, #2
 800c5c2:	d841      	bhi.n	800c648 <__ieee754_atan2f+0x110>
 800c5c4:	4b26      	ldr	r3, [pc, #152]	@ (800c660 <__ieee754_atan2f+0x128>)
 800c5c6:	e7f6      	b.n	800c5b6 <__ieee754_atan2f+0x7e>
 800c5c8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c5cc:	d0e0      	beq.n	800c590 <__ieee754_atan2f+0x58>
 800c5ce:	1a5b      	subs	r3, r3, r1
 800c5d0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800c5d4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c5d8:	da1a      	bge.n	800c610 <__ieee754_atan2f+0xd8>
 800c5da:	2a00      	cmp	r2, #0
 800c5dc:	da01      	bge.n	800c5e2 <__ieee754_atan2f+0xaa>
 800c5de:	313c      	adds	r1, #60	@ 0x3c
 800c5e0:	db19      	blt.n	800c616 <__ieee754_atan2f+0xde>
 800c5e2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c5e6:	f000 f919 	bl	800c81c <fabsf>
 800c5ea:	f000 f843 	bl	800c674 <atanf>
 800c5ee:	eef0 7a40 	vmov.f32	s15, s0
 800c5f2:	2c01      	cmp	r4, #1
 800c5f4:	d012      	beq.n	800c61c <__ieee754_atan2f+0xe4>
 800c5f6:	2c02      	cmp	r4, #2
 800c5f8:	d017      	beq.n	800c62a <__ieee754_atan2f+0xf2>
 800c5fa:	2c00      	cmp	r4, #0
 800c5fc:	d0af      	beq.n	800c55e <__ieee754_atan2f+0x26>
 800c5fe:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800c664 <__ieee754_atan2f+0x12c>
 800c602:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c606:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800c668 <__ieee754_atan2f+0x130>
 800c60a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c60e:	e7a6      	b.n	800c55e <__ieee754_atan2f+0x26>
 800c610:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800c658 <__ieee754_atan2f+0x120>
 800c614:	e7ed      	b.n	800c5f2 <__ieee754_atan2f+0xba>
 800c616:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c66c <__ieee754_atan2f+0x134>
 800c61a:	e7ea      	b.n	800c5f2 <__ieee754_atan2f+0xba>
 800c61c:	ee17 3a90 	vmov	r3, s15
 800c620:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c624:	ee07 3a90 	vmov	s15, r3
 800c628:	e799      	b.n	800c55e <__ieee754_atan2f+0x26>
 800c62a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800c664 <__ieee754_atan2f+0x12c>
 800c62e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c632:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800c668 <__ieee754_atan2f+0x130>
 800c636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c63a:	e790      	b.n	800c55e <__ieee754_atan2f+0x26>
 800c63c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800c668 <__ieee754_atan2f+0x130>
 800c640:	e78d      	b.n	800c55e <__ieee754_atan2f+0x26>
 800c642:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800c670 <__ieee754_atan2f+0x138>
 800c646:	e78a      	b.n	800c55e <__ieee754_atan2f+0x26>
 800c648:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c66c <__ieee754_atan2f+0x134>
 800c64c:	e787      	b.n	800c55e <__ieee754_atan2f+0x26>
 800c64e:	bf00      	nop
 800c650:	c0490fdb 	.word	0xc0490fdb
 800c654:	bfc90fdb 	.word	0xbfc90fdb
 800c658:	3fc90fdb 	.word	0x3fc90fdb
 800c65c:	0800d680 	.word	0x0800d680
 800c660:	0800d674 	.word	0x0800d674
 800c664:	33bbbd2e 	.word	0x33bbbd2e
 800c668:	40490fdb 	.word	0x40490fdb
 800c66c:	00000000 	.word	0x00000000
 800c670:	3f490fdb 	.word	0x3f490fdb

0800c674 <atanf>:
 800c674:	b538      	push	{r3, r4, r5, lr}
 800c676:	ee10 5a10 	vmov	r5, s0
 800c67a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800c67e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800c682:	eef0 7a40 	vmov.f32	s15, s0
 800c686:	d30f      	bcc.n	800c6a8 <atanf+0x34>
 800c688:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800c68c:	d904      	bls.n	800c698 <atanf+0x24>
 800c68e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c692:	eeb0 0a67 	vmov.f32	s0, s15
 800c696:	bd38      	pop	{r3, r4, r5, pc}
 800c698:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800c7d0 <atanf+0x15c>
 800c69c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800c7d4 <atanf+0x160>
 800c6a0:	2d00      	cmp	r5, #0
 800c6a2:	fe77 7a27 	vselgt.f32	s15, s14, s15
 800c6a6:	e7f4      	b.n	800c692 <atanf+0x1e>
 800c6a8:	4b4b      	ldr	r3, [pc, #300]	@ (800c7d8 <atanf+0x164>)
 800c6aa:	429c      	cmp	r4, r3
 800c6ac:	d810      	bhi.n	800c6d0 <atanf+0x5c>
 800c6ae:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800c6b2:	d20a      	bcs.n	800c6ca <atanf+0x56>
 800c6b4:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800c7dc <atanf+0x168>
 800c6b8:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c6bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c6c0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6c8:	dce3      	bgt.n	800c692 <atanf+0x1e>
 800c6ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ce:	e013      	b.n	800c6f8 <atanf+0x84>
 800c6d0:	f000 f8a4 	bl	800c81c <fabsf>
 800c6d4:	4b42      	ldr	r3, [pc, #264]	@ (800c7e0 <atanf+0x16c>)
 800c6d6:	429c      	cmp	r4, r3
 800c6d8:	d84f      	bhi.n	800c77a <atanf+0x106>
 800c6da:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800c6de:	429c      	cmp	r4, r3
 800c6e0:	d841      	bhi.n	800c766 <atanf+0xf2>
 800c6e2:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800c6e6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c6ea:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c6f4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c6f8:	1c5a      	adds	r2, r3, #1
 800c6fa:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c6fe:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800c7e4 <atanf+0x170>
 800c702:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800c7e8 <atanf+0x174>
 800c706:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 800c7ec <atanf+0x178>
 800c70a:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c70e:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c712:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800c7f0 <atanf+0x17c>
 800c716:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c71a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800c7f4 <atanf+0x180>
 800c71e:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c722:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800c7f8 <atanf+0x184>
 800c726:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c72a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c7fc <atanf+0x188>
 800c72e:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c732:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800c800 <atanf+0x18c>
 800c736:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c73a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800c804 <atanf+0x190>
 800c73e:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c742:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800c808 <atanf+0x194>
 800c746:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c74a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800c80c <atanf+0x198>
 800c74e:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c752:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c756:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c75a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c75e:	d121      	bne.n	800c7a4 <atanf+0x130>
 800c760:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c764:	e795      	b.n	800c692 <atanf+0x1e>
 800c766:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c76a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c76e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c772:	2301      	movs	r3, #1
 800c774:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c778:	e7be      	b.n	800c6f8 <atanf+0x84>
 800c77a:	4b25      	ldr	r3, [pc, #148]	@ (800c810 <atanf+0x19c>)
 800c77c:	429c      	cmp	r4, r3
 800c77e:	d80b      	bhi.n	800c798 <atanf+0x124>
 800c780:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800c784:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c788:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c78c:	2302      	movs	r3, #2
 800c78e:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c796:	e7af      	b.n	800c6f8 <atanf+0x84>
 800c798:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c79c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c7a0:	2303      	movs	r3, #3
 800c7a2:	e7a9      	b.n	800c6f8 <atanf+0x84>
 800c7a4:	4a1b      	ldr	r2, [pc, #108]	@ (800c814 <atanf+0x1a0>)
 800c7a6:	491c      	ldr	r1, [pc, #112]	@ (800c818 <atanf+0x1a4>)
 800c7a8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c7ac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c7b0:	edd3 6a00 	vldr	s13, [r3]
 800c7b4:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c7b8:	2d00      	cmp	r5, #0
 800c7ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c7be:	edd2 7a00 	vldr	s15, [r2]
 800c7c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7c6:	bfb8      	it	lt
 800c7c8:	eef1 7a67 	vneglt.f32	s15, s15
 800c7cc:	e761      	b.n	800c692 <atanf+0x1e>
 800c7ce:	bf00      	nop
 800c7d0:	bfc90fdb 	.word	0xbfc90fdb
 800c7d4:	3fc90fdb 	.word	0x3fc90fdb
 800c7d8:	3edfffff 	.word	0x3edfffff
 800c7dc:	7149f2ca 	.word	0x7149f2ca
 800c7e0:	3f97ffff 	.word	0x3f97ffff
 800c7e4:	3c8569d7 	.word	0x3c8569d7
 800c7e8:	3d4bda59 	.word	0x3d4bda59
 800c7ec:	bd6ef16b 	.word	0xbd6ef16b
 800c7f0:	3d886b35 	.word	0x3d886b35
 800c7f4:	3dba2e6e 	.word	0x3dba2e6e
 800c7f8:	3e124925 	.word	0x3e124925
 800c7fc:	3eaaaaab 	.word	0x3eaaaaab
 800c800:	bd15a221 	.word	0xbd15a221
 800c804:	bd9d8795 	.word	0xbd9d8795
 800c808:	bde38e38 	.word	0xbde38e38
 800c80c:	be4ccccd 	.word	0xbe4ccccd
 800c810:	401bffff 	.word	0x401bffff
 800c814:	0800d69c 	.word	0x0800d69c
 800c818:	0800d68c 	.word	0x0800d68c

0800c81c <fabsf>:
 800c81c:	ee10 3a10 	vmov	r3, s0
 800c820:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c824:	ee00 3a10 	vmov	s0, r3
 800c828:	4770      	bx	lr
	...

0800c82c <_init>:
 800c82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82e:	bf00      	nop
 800c830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c832:	bc08      	pop	{r3}
 800c834:	469e      	mov	lr, r3
 800c836:	4770      	bx	lr

0800c838 <_fini>:
 800c838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c83a:	bf00      	nop
 800c83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c83e:	bc08      	pop	{r3}
 800c840:	469e      	mov	lr, r3
 800c842:	4770      	bx	lr
